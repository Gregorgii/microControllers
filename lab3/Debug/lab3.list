
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f2c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  080060fc  080060fc  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066cc  080066cc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080066cc  080066cc  000076cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066d4  080066d4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066d8  080066d8  000076d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080066dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000068  08006744  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08006744  00008424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f04e  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b6  00000000  00000000  000170e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  000193a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b0b  00000000  00000000  0001a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000226ed  00000000  00000000  0001acd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b8e  00000000  00000000  0003d3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3029  00000000  00000000  0004df4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00120f77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004690  00000000  00000000  00120fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012564c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060e4 	.word	0x080060e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080060e4 	.word	0x080060e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	0000      	movs	r0, r0
	...

08000df0 <main>:
/* USER CODE BEGIN 0 */
static uint32_t sample_index = 0;
/* USER CODE END 0 */

int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000df6:	f000 fce9 	bl	80017cc <HAL_Init>
  SystemClock_Config();
 8000dfa:	f000 fa0f 	bl	800121c <SystemClock_Config>
  MX_GPIO_Init();
 8000dfe:	f000 fb03 	bl	8001408 <MX_GPIO_Init>
  MX_DAC_Init();
 8000e02:	f000 fa77 	bl	80012f4 <MX_DAC_Init>
  MX_TIM6_Init();
 8000e06:	f000 fa9f 	bl	8001348 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000e0a:	f000 fad3 	bl	80013b4 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  // Запуск таймера в режиме прерываний
  HAL_TIM_Base_Start_IT(&htim6);
 8000e0e:	4828      	ldr	r0, [pc, #160]	@ (8000eb0 <main+0xc0>)
 8000e10:	f001 ff9e 	bl	8002d50 <HAL_TIM_Base_Start_IT>

  // Запуск ЦАП
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000e14:	2100      	movs	r1, #0
 8000e16:	4827      	ldr	r0, [pc, #156]	@ (8000eb4 <main+0xc4>)
 8000e18:	f000 fe7d 	bl	8001b16 <HAL_DAC_Start>

  // Инициализация массива sine_wave
  for(int i = 0; i < SAMPLES; i++)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	e033      	b.n	8000e8a <main+0x9a>
  {
      sine_wave[i] = (sinf(2 * M_PI * i / SAMPLES) * amplitude_scale + 1) / 2;
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff fb9e 	bl	8000564 <__aeabi_i2d>
 8000e28:	a31f      	add	r3, pc, #124	@ (adr r3, 8000ea8 <main+0xb8>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f7ff fc03 	bl	8000638 <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f04f 0200 	mov.w	r2, #0
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb8 <main+0xc8>)
 8000e40:	f7ff fd24 	bl	800088c <__aeabi_ddiv>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f7ff fe06 	bl	8000a5c <__aeabi_d2f>
 8000e50:	4603      	mov	r3, r0
 8000e52:	ee00 3a10 	vmov	s0, r3
 8000e56:	f004 fc0b 	bl	8005670 <sinf>
 8000e5a:	eeb0 7a40 	vmov.f32	s14, s0
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <main+0xcc>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000e70:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e78:	4a11      	ldr	r2, [pc, #68]	@ (8000ec0 <main+0xd0>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < SAMPLES; i++)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3301      	adds	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b63      	cmp	r3, #99	@ 0x63
 8000e8e:	ddc8      	ble.n	8000e22 <main+0x32>
  }

  // Начало приема данных по UART
  HAL_UART_Receive_IT(&huart2, &rx_byte, buf_size);
 8000e90:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <main+0xd4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	461a      	mov	r2, r3
 8000e98:	490b      	ldr	r1, [pc, #44]	@ (8000ec8 <main+0xd8>)
 8000e9a:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <main+0xdc>)
 8000e9c:	f002 fb27 	bl	80034ee <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  while (1)
 8000ea0:	bf00      	nop
 8000ea2:	e7fd      	b.n	8000ea0 <main+0xb0>
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	54442d18 	.word	0x54442d18
 8000eac:	401921fb 	.word	0x401921fb
 8000eb0:	20000228 	.word	0x20000228
 8000eb4:	20000214 	.word	0x20000214
 8000eb8:	40590000 	.word	0x40590000
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000084 	.word	0x20000084
 8000ec4:	20000008 	.word	0x20000008
 8000ec8:	200002b8 	.word	0x200002b8
 8000ecc:	20000270 	.word	0x20000270

08000ed0 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */
// Обработчик прерывания по завершению приема данных UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a1b      	ldr	r2, [pc, #108]	@ (8000f4c <HAL_UART_RxCpltCallback+0x7c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d12f      	bne.n	8000f42 <HAL_UART_RxCpltCallback+0x72>
    {
        if(rx_byte != '\n' && rx_index < sizeof(rx_buffer) - 1)
 8000ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f50 <HAL_UART_RxCpltCallback+0x80>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b0a      	cmp	r3, #10
 8000ee8:	d00f      	beq.n	8000f0a <HAL_UART_RxCpltCallback+0x3a>
 8000eea:	4b1a      	ldr	r3, [pc, #104]	@ (8000f54 <HAL_UART_RxCpltCallback+0x84>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b0e      	cmp	r3, #14
 8000ef0:	d80b      	bhi.n	8000f0a <HAL_UART_RxCpltCallback+0x3a>
        {
            rx_buffer[rx_index++] = rx_byte;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	@ (8000f54 <HAL_UART_RxCpltCallback+0x84>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	1c5a      	adds	r2, r3, #1
 8000ef8:	b2d1      	uxtb	r1, r2
 8000efa:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <HAL_UART_RxCpltCallback+0x84>)
 8000efc:	7011      	strb	r1, [r2, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <HAL_UART_RxCpltCallback+0x80>)
 8000f02:	7819      	ldrb	r1, [r3, #0]
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <HAL_UART_RxCpltCallback+0x88>)
 8000f06:	5499      	strb	r1, [r3, r2]
 8000f08:	e016      	b.n	8000f38 <HAL_UART_RxCpltCallback+0x68>
        }
        else
        {
            rx_buffer[rx_index] = '\0';
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <HAL_UART_RxCpltCallback+0x84>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <HAL_UART_RxCpltCallback+0x88>)
 8000f12:	2100      	movs	r1, #0
 8000f14:	5499      	strb	r1, [r3, r2]
            // Обработка полученного сообщения
            HAL_UART_Transmit(&huart2, (uint8_t*)rx_buffer, strlen(rx_buffer), HAL_MAX_DELAY);
 8000f16:	4810      	ldr	r0, [pc, #64]	@ (8000f58 <HAL_UART_RxCpltCallback+0x88>)
 8000f18:	f7ff f97a 	bl	8000210 <strlen>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <HAL_UART_RxCpltCallback+0x88>)
 8000f26:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <HAL_UART_RxCpltCallback+0x8c>)
 8000f28:	f002 fa56 	bl	80033d8 <HAL_UART_Transmit>
            ParseUARTMessage(rx_buffer);
 8000f2c:	480a      	ldr	r0, [pc, #40]	@ (8000f58 <HAL_UART_RxCpltCallback+0x88>)
 8000f2e:	f000 f817 	bl	8000f60 <ParseUARTMessage>
            // Сброс индекса
            rx_index = 0;
 8000f32:	4b08      	ldr	r3, [pc, #32]	@ (8000f54 <HAL_UART_RxCpltCallback+0x84>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
        }

        // Перезапуск приема данных по UART
        HAL_UART_Receive_IT(&huart2, &rx_byte, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4905      	ldr	r1, [pc, #20]	@ (8000f50 <HAL_UART_RxCpltCallback+0x80>)
 8000f3c:	4807      	ldr	r0, [pc, #28]	@ (8000f5c <HAL_UART_RxCpltCallback+0x8c>)
 8000f3e:	f002 fad6 	bl	80034ee <HAL_UART_Receive_IT>
    }
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40004400 	.word	0x40004400
 8000f50:	200002b8 	.word	0x200002b8
 8000f54:	200002cc 	.word	0x200002cc
 8000f58:	200002bc 	.word	0x200002bc
 8000f5c:	20000270 	.word	0x20000270

08000f60 <ParseUARTMessage>:

// Функция разбора входящего сообщения
void ParseUARTMessage(char* message)
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b0a2      	sub	sp, #136	@ 0x88
 8000f64:	af02      	add	r7, sp, #8
 8000f66:	6078      	str	r0, [r7, #4]
    float new_amplitude_scale;
    float new_frequency;

    // Парсинг сообщения
    if(sscanf(message, "A=%f,F=%f", &new_amplitude_scale, &new_frequency) == 2)
 8000f68:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000f6c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8000f70:	495b      	ldr	r1, [pc, #364]	@ (80010e0 <ParseUARTMessage+0x180>)
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f003 fa56 	bl	8004424 <siscanf>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d16b      	bne.n	8001056 <ParseUARTMessage+0xf6>
    {
        // Обновление амплитуды и частоты
        amplitude_scale = new_amplitude_scale;
 8000f7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000f80:	4a58      	ldr	r2, [pc, #352]	@ (80010e4 <ParseUARTMessage+0x184>)
 8000f82:	6013      	str	r3, [r2, #0]
        frequency = new_frequency;
 8000f84:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f86:	4a58      	ldr	r2, [pc, #352]	@ (80010e8 <ParseUARTMessage+0x188>)
 8000f88:	6013      	str	r3, [r2, #0]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8a:	b672      	cpsid	i
}
 8000f8c:	bf00      	nop

        // Обновление массива sine_wave
        __disable_irq(); // Отключение прерываний
        for(int i = 0; i < SAMPLES; i++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000f92:	e033      	b.n	8000ffc <ParseUARTMessage+0x9c>
        {
            sine_wave[i] = (sinf(2 * M_PI * i / SAMPLES) * amplitude_scale + 1) / 2;
 8000f94:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8000f96:	f7ff fae5 	bl	8000564 <__aeabi_i2d>
 8000f9a:	a34f      	add	r3, pc, #316	@ (adr r3, 80010d8 <ParseUARTMessage+0x178>)
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f7ff fb4a 	bl	8000638 <__aeabi_dmul>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80010ec <ParseUARTMessage+0x18c>)
 8000fb2:	f7ff fc6b 	bl	800088c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd4d 	bl	8000a5c <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	ee00 3a10 	vmov	s0, r3
 8000fc8:	f004 fb52 	bl	8005670 <sinf>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	4b44      	ldr	r3, [pc, #272]	@ (80010e4 <ParseUARTMessage+0x184>)
 8000fd2:	edd3 7a00 	vldr	s15, [r3]
 8000fd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fe2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000fe6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fea:	4a41      	ldr	r2, [pc, #260]	@ (80010f0 <ParseUARTMessage+0x190>)
 8000fec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
        for(int i = 0; i < SAMPLES; i++)
 8000ff6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ffc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000ffe:	2b63      	cmp	r3, #99	@ 0x63
 8001000:	ddc8      	ble.n	8000f94 <ParseUARTMessage+0x34>
  __ASM volatile ("cpsie i" : : : "memory");
 8001002:	b662      	cpsie	i
}
 8001004:	bf00      	nop
        }
        __enable_irq(); // Включение прерываний

        // Обновление настроек таймера
        UpdateTimerFrequency();
 8001006:	f000 f87d 	bl	8001104 <UpdateTimerFrequency>

        // Отправка подтверждения по UART
        char ack_message[50];
        sprintf(ack_message, "Amplitude: %.3f, Frequency: %.3f Hz\r\n", amplitude_scale, frequency);
 800100a:	4b36      	ldr	r3, [pc, #216]	@ (80010e4 <ParseUARTMessage+0x184>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff faba 	bl	8000588 <__aeabi_f2d>
 8001014:	4604      	mov	r4, r0
 8001016:	460d      	mov	r5, r1
 8001018:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <ParseUARTMessage+0x188>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fab3 	bl	8000588 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	f107 000c 	add.w	r0, r7, #12
 800102a:	e9cd 2300 	strd	r2, r3, [sp]
 800102e:	4622      	mov	r2, r4
 8001030:	462b      	mov	r3, r5
 8001032:	4930      	ldr	r1, [pc, #192]	@ (80010f4 <ParseUARTMessage+0x194>)
 8001034:	f003 f9d6 	bl	80043e4 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)ack_message, strlen(ack_message), HAL_MAX_DELAY);
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff f8e7 	bl	8000210 <strlen>
 8001042:	4603      	mov	r3, r0
 8001044:	b29a      	uxth	r2, r3
 8001046:	f107 010c 	add.w	r1, r7, #12
 800104a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800104e:	482a      	ldr	r0, [pc, #168]	@ (80010f8 <ParseUARTMessage+0x198>)
 8001050:	f002 f9c2 	bl	80033d8 <HAL_UART_Transmit>
 8001054:	e017      	b.n	8001086 <ParseUARTMessage+0x126>
    }
    else
    {
        // Сообщение об ошибке парсинга
        char error_message[] = "Invalid format. Use A=amp,F=freq\n";
 8001056:	4b29      	ldr	r3, [pc, #164]	@ (80010fc <ParseUARTMessage+0x19c>)
 8001058:	f107 040c 	add.w	r4, r7, #12
 800105c:	461d      	mov	r5, r3
 800105e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001060:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)error_message, strlen(error_message), HAL_MAX_DELAY);
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f8ce 	bl	8000210 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	f107 010c 	add.w	r1, r7, #12
 800107c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001080:	481d      	ldr	r0, [pc, #116]	@ (80010f8 <ParseUARTMessage+0x198>)
 8001082:	f002 f9a9 	bl	80033d8 <HAL_UART_Transmit>
    }
    char debug_message[50];
    sprintf(debug_message, "Amplitude set to: %.3f, Frequency set to: %.3f\r\n", amplitude_scale, frequency);
 8001086:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <ParseUARTMessage+0x184>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa7c 	bl	8000588 <__aeabi_f2d>
 8001090:	4604      	mov	r4, r0
 8001092:	460d      	mov	r5, r1
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <ParseUARTMessage+0x188>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff fa75 	bl	8000588 <__aeabi_f2d>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 80010a6:	e9cd 2300 	strd	r2, r3, [sp]
 80010aa:	4622      	mov	r2, r4
 80010ac:	462b      	mov	r3, r5
 80010ae:	4914      	ldr	r1, [pc, #80]	@ (8001100 <ParseUARTMessage+0x1a0>)
 80010b0:	f003 f998 	bl	80043e4 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debug_message, strlen(debug_message), HAL_MAX_DELAY);
 80010b4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff f8a9 	bl	8000210 <strlen>
 80010be:	4603      	mov	r3, r0
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ca:	480b      	ldr	r0, [pc, #44]	@ (80010f8 <ParseUARTMessage+0x198>)
 80010cc:	f002 f984 	bl	80033d8 <HAL_UART_Transmit>
}
 80010d0:	bf00      	nop
 80010d2:	3780      	adds	r7, #128	@ 0x80
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bdb0      	pop	{r4, r5, r7, pc}
 80010d8:	54442d18 	.word	0x54442d18
 80010dc:	401921fb 	.word	0x401921fb
 80010e0:	080060fc 	.word	0x080060fc
 80010e4:	20000000 	.word	0x20000000
 80010e8:	20000004 	.word	0x20000004
 80010ec:	40590000 	.word	0x40590000
 80010f0:	20000084 	.word	0x20000084
 80010f4:	08006108 	.word	0x08006108
 80010f8:	20000270 	.word	0x20000270
 80010fc:	08006164 	.word	0x08006164
 8001100:	08006130 	.word	0x08006130

08001104 <UpdateTimerFrequency>:

// Функция обновления настроек таймера для изменения частоты
void UpdateTimerFrequency()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
    // Желательная частота прерываний таймера = частота * количество_samples
    uint32_t desired_timer_freq = frequency * SAMPLES;
 800110a:	4b24      	ldr	r3, [pc, #144]	@ (800119c <UpdateTimerFrequency+0x98>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80011a0 <UpdateTimerFrequency+0x9c>
 8001114:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800111c:	ee17 3a90 	vmov	r3, s15
 8001120:	607b      	str	r3, [r7, #4]

    // Получение частоты таймера
    uint32_t timer_clock = HAL_RCC_GetPCLK1Freq() * 2; // Умножаем на 2 для корректной частоты таймера (если используется APB1)
 8001122:	f001 f955 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8001126:	4603      	mov	r3, r0
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	603b      	str	r3, [r7, #0]

    // Вычисление предделителя и периода
    uint32_t prescaler = (timer_clock / desired_timer_freq / 65536) + 1;
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	fbb2 f3f3 	udiv	r3, r2, r3
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
    if(prescaler > 0xFFFF) prescaler = 0xFFFF;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001140:	d302      	bcc.n	8001148 <UpdateTimerFrequency+0x44>
 8001142:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001146:	60fb      	str	r3, [r7, #12]

    uint32_t period = (timer_clock / (prescaler * desired_timer_freq)) - 1;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	fb02 f303 	mul.w	r3, r2, r3
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	3b01      	subs	r3, #1
 8001158:	60bb      	str	r3, [r7, #8]
    if(period > 0xFFFF) period = 0xFFFF;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001160:	d302      	bcc.n	8001168 <UpdateTimerFrequency+0x64>
 8001162:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001166:	60bb      	str	r3, [r7, #8]

    // Остановка таймера
    HAL_TIM_Base_Stop_IT(&htim6);
 8001168:	480e      	ldr	r0, [pc, #56]	@ (80011a4 <UpdateTimerFrequency+0xa0>)
 800116a:	f001 fe61 	bl	8002e30 <HAL_TIM_Base_Stop_IT>

    // Обновление настроек таймера
    htim6.Init.Prescaler = prescaler - 1;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	3b01      	subs	r3, #1
 8001172:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <UpdateTimerFrequency+0xa0>)
 8001174:	6053      	str	r3, [r2, #4]
    htim6.Init.Period = period;
 8001176:	4a0b      	ldr	r2, [pc, #44]	@ (80011a4 <UpdateTimerFrequency+0xa0>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]

    if(HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800117c:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <UpdateTimerFrequency+0xa0>)
 800117e:	f001 fd97 	bl	8002cb0 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <UpdateTimerFrequency+0x88>
    {
        Error_Handler();
 8001188:	f000 f974 	bl	8001474 <Error_Handler>
    }

    // Запуск таймера
    HAL_TIM_Base_Start_IT(&htim6);
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <UpdateTimerFrequency+0xa0>)
 800118e:	f001 fddf 	bl	8002d50 <HAL_TIM_Base_Start_IT>
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	20000004 	.word	0x20000004
 80011a0:	42c80000 	.word	0x42c80000
 80011a4:	20000228 	.word	0x20000228

080011a8 <HAL_TIM_PeriodElapsedCallback>:

// Обработчик прерывания таймера
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a14      	ldr	r2, [pc, #80]	@ (8001208 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d121      	bne.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x56>
    {
        // Преобразование значения из массива в значение для ЦАП
        uint32_t dac_value = (uint32_t)(sine_wave[sample_index] * 4095); // Диапазон 0-4095
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a14      	ldr	r2, [pc, #80]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	edd3 7a00 	vldr	s15, [r3]
 80011c8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001214 <HAL_TIM_PeriodElapsedCallback+0x6c>
 80011cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d4:	ee17 3a90 	vmov	r3, s15
 80011d8:	60fb      	str	r3, [r7, #12]

        // Установка значения на ЦАП
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	2100      	movs	r1, #0
 80011e0:	480d      	ldr	r0, [pc, #52]	@ (8001218 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80011e2:	f000 fd45 	bl	8001c70 <HAL_DAC_SetValue>

        // Увеличение индекса и проверка на переполнение
        sample_index++;
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	4a07      	ldr	r2, [pc, #28]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011ee:	6013      	str	r3, [r2, #0]
        if(sample_index >= SAMPLES)
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b63      	cmp	r3, #99	@ 0x63
 80011f6:	d902      	bls.n	80011fe <HAL_TIM_PeriodElapsedCallback+0x56>
        {
            sample_index = 0;
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <HAL_TIM_PeriodElapsedCallback+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
        }
    }
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40001000 	.word	0x40001000
 800120c:	200002d0 	.word	0x200002d0
 8001210:	20000084 	.word	0x20000084
 8001214:	457ff000 	.word	0x457ff000
 8001218:	20000214 	.word	0x20000214

0800121c <SystemClock_Config>:
/* USER CODE END 4 */

/* Функции инициализации периферии */

void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 031c 	add.w	r3, r7, #28
 8001226:	2234      	movs	r2, #52	@ 0x34
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f003 f926 	bl	800447c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Инициализация напряжения основного внутреннего регулятора */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <SystemClock_Config+0xd0>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <SystemClock_Config+0xd0>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001250:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <SystemClock_Config+0xd0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125c:	2300      	movs	r3, #0
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <SystemClock_Config+0xd4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a22      	ldr	r2, [pc, #136]	@ (80012f0 <SystemClock_Config+0xd4>)
 8001266:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800126a:	6013      	str	r3, [r2, #0]
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <SystemClock_Config+0xd4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	683b      	ldr	r3, [r7, #0]

  /** Инициализация RCC Осцилляторов */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001278:	2302      	movs	r3, #2
 800127a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800127c:	2301      	movs	r3, #1
 800127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001280:	2310      	movs	r3, #16
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001288:	2300      	movs	r3, #0
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800128c:	2308      	movs	r3, #8
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001290:	23a0      	movs	r3, #160	@ 0xa0
 8001292:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001294:	2302      	movs	r3, #2
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001298:	2302      	movs	r3, #2
 800129a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800129c:	2302      	movs	r3, #2
 800129e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 031c 	add.w	r3, r7, #28
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fa65 	bl	8002774 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012b0:	f000 f8e0 	bl	8001474 <Error_Handler>
  }

  /** Инициализация тактирования CPU, AHB и APB шин */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4; // Обратите внимание на делитель
 80012c0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2; // Обратите внимание на делитель
 80012c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012ca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	2105      	movs	r1, #5
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 ff8a 	bl	80021ec <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012de:	f000 f8c9 	bl	8001474 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	@ 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_DAC_Init>:

static void MX_DAC_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]

  /** Инициализация DAC */
  hdac.Instance = DAC;
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <MX_DAC_Init+0x4c>)
 8001304:	4a0f      	ldr	r2, [pc, #60]	@ (8001344 <MX_DAC_Init+0x50>)
 8001306:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001308:	480d      	ldr	r0, [pc, #52]	@ (8001340 <MX_DAC_Init+0x4c>)
 800130a:	f000 fbe2 	bl	8001ad2 <HAL_DAC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001314:	f000 f8ae 	bl	8001474 <Error_Handler>
  }

  /** Настройка канала DAC OUT1 */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001320:	463b      	mov	r3, r7
 8001322:	2200      	movs	r2, #0
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	@ (8001340 <MX_DAC_Init+0x4c>)
 8001328:	f000 fcd6 	bl	8001cd8 <HAL_DAC_ConfigChannel>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001332:	f000 f89f 	bl	8001474 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000214 	.word	0x20000214
 8001344:	40007400 	.word	0x40007400

08001348 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134e:	463b      	mov	r3, r7
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]

  /** Инициализация TIM6 */
  htim6.Instance = TIM6;
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <MX_TIM6_Init+0x64>)
 8001358:	4a15      	ldr	r2, [pc, #84]	@ (80013b0 <MX_TIM6_Init+0x68>)
 800135a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 800135c:	4b13      	ldr	r3, [pc, #76]	@ (80013ac <MX_TIM6_Init+0x64>)
 800135e:	2227      	movs	r2, #39	@ 0x27
 8001360:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <MX_TIM6_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001368:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <MX_TIM6_Init+0x64>)
 800136a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800136e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001370:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <MX_TIM6_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <MX_TIM6_Init+0x64>)
 8001378:	f001 fc9a 	bl	8002cb0 <HAL_TIM_Base_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001382:	f000 f877 	bl	8001474 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800138e:	463b      	mov	r3, r7
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	@ (80013ac <MX_TIM6_Init+0x64>)
 8001394:	f001 ff40 	bl	8003218 <HAL_TIMEx_MasterConfigSynchronization>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800139e:	f000 f869 	bl	8001474 <Error_Handler>
  }
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000228 	.word	0x20000228
 80013b0:	40001000 	.word	0x40001000

080013b4 <MX_USART2_UART_Init>:

static void MX_USART2_UART_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /** Инициализация UART2 */
  huart2.Instance = USART2;
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ba:	4a12      	ldr	r2, [pc, #72]	@ (8001404 <MX_USART2_UART_Init+0x50>)
 80013bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80013be:	4b10      	ldr	r3, [pc, #64]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80013c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013da:	220c      	movs	r2, #12
 80013dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e4:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	@ (8001400 <MX_USART2_UART_Init+0x4c>)
 80013ec:	f001 ffa4 	bl	8003338 <HAL_UART_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f6:	f000 f83d 	bl	8001474 <Error_Handler>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000270 	.word	0x20000270
 8001404:	40004400 	.word	0x40004400

08001408 <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
  /* Включение тактирования GPIO портов */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <MX_GPIO_Init+0x68>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a16      	ldr	r2, [pc, #88]	@ (8001470 <MX_GPIO_Init+0x68>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b14      	ldr	r3, [pc, #80]	@ (8001470 <MX_GPIO_Init+0x68>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	4b10      	ldr	r3, [pc, #64]	@ (8001470 <MX_GPIO_Init+0x68>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a0f      	ldr	r2, [pc, #60]	@ (8001470 <MX_GPIO_Init+0x68>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <MX_GPIO_Init+0x68>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <MX_GPIO_Init+0x68>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a08      	ldr	r2, [pc, #32]	@ (8001470 <MX_GPIO_Init+0x68>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b06      	ldr	r3, [pc, #24]	@ (8001470 <MX_GPIO_Init+0x68>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	607b      	str	r3, [r7, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800

08001474 <Error_Handler>:
/**
  * @brief  Функция обработки ошибок.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* Пользователь может добавить свою реализацию для обработки ошибок */
  __disable_irq();
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <Error_Handler+0x8>

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <HAL_MspInit+0x4c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <HAL_MspInit+0x4c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <HAL_DAC_MspInit+0x8c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12f      	bne.n	8001552 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001560 <HAL_DAC_MspInit+0x90>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a19      	ldr	r2, [pc, #100]	@ (8001560 <HAL_DAC_MspInit+0x90>)
 80014fc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HAL_DAC_MspInit+0x90>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <HAL_DAC_MspInit+0x90>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <HAL_DAC_MspInit+0x90>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <HAL_DAC_MspInit+0x90>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800152a:	2310      	movs	r3, #16
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800152e:	2303      	movs	r3, #3
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	4809      	ldr	r0, [pc, #36]	@ (8001564 <HAL_DAC_MspInit+0x94>)
 800153e:	f000 fcc1 	bl	8001ec4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2100      	movs	r1, #0
 8001546:	2036      	movs	r0, #54	@ 0x36
 8001548:	f000 fa8d 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800154c:	2036      	movs	r0, #54	@ 0x36
 800154e:	f000 faa6 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001552:	bf00      	nop
 8001554:	3728      	adds	r7, #40	@ 0x28
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40007400 	.word	0x40007400
 8001560:	40023800 	.word	0x40023800
 8001564:	40020000 	.word	0x40020000

08001568 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <HAL_TIM_Base_MspInit+0x48>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d115      	bne.n	80015a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	4a0c      	ldr	r2, [pc, #48]	@ (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 8001584:	f043 0310 	orr.w	r3, r3, #16
 8001588:	6413      	str	r3, [r2, #64]	@ 0x40
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <HAL_TIM_Base_MspInit+0x4c>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001596:	2200      	movs	r2, #0
 8001598:	2100      	movs	r1, #0
 800159a:	2036      	movs	r0, #54	@ 0x36
 800159c:	f000 fa63 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015a0:	2036      	movs	r0, #54	@ 0x36
 80015a2:	f000 fa7c 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80015a6:	bf00      	nop
 80015a8:	3710      	adds	r7, #16
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40001000 	.word	0x40001000
 80015b4:	40023800 	.word	0x40023800

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1d      	ldr	r2, [pc, #116]	@ (800164c <HAL_UART_MspInit+0x94>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d133      	bne.n	8001642 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <HAL_UART_MspInit+0x98>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001650 <HAL_UART_MspInit+0x98>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ea:	4b19      	ldr	r3, [pc, #100]	@ (8001650 <HAL_UART_MspInit+0x98>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <HAL_UART_MspInit+0x98>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a14      	ldr	r2, [pc, #80]	@ (8001650 <HAL_UART_MspInit+0x98>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b12      	ldr	r3, [pc, #72]	@ (8001650 <HAL_UART_MspInit+0x98>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001612:	230c      	movs	r3, #12
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001622:	2307      	movs	r3, #7
 8001624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4809      	ldr	r0, [pc, #36]	@ (8001654 <HAL_UART_MspInit+0x9c>)
 800162e:	f000 fc49 	bl	8001ec4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2026      	movs	r0, #38	@ 0x26
 8001638:	f000 fa15 	bl	8001a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800163c:	2026      	movs	r0, #38	@ 0x26
 800163e:	f000 fa2e 	bl	8001a9e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	@ 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40004400 	.word	0x40004400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <NMI_Handler+0x4>

08001660 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <HardFault_Handler+0x4>

08001668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <MemManage_Handler+0x4>

08001670 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <BusFault_Handler+0x4>

08001678 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <UsageFault_Handler+0x4>

08001680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ae:	f000 f8df 	bl	8001870 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016bc:	4802      	ldr	r0, [pc, #8]	@ (80016c8 <USART2_IRQHandler+0x10>)
 80016be:	f001 ff3b 	bl	8003538 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000270 	.word	0x20000270

080016cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80016d0:	4803      	ldr	r0, [pc, #12]	@ (80016e0 <TIM6_DAC_IRQHandler+0x14>)
 80016d2:	f000 fa77 	bl	8001bc4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80016d6:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <TIM6_DAC_IRQHandler+0x18>)
 80016d8:	f001 fbd9 	bl	8002e8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000214 	.word	0x20000214
 80016e4:	20000228 	.word	0x20000228

080016e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016f0:	4a14      	ldr	r2, [pc, #80]	@ (8001744 <_sbrk+0x5c>)
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <_sbrk+0x60>)
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <_sbrk+0x64>)
 8001706:	4a12      	ldr	r2, [pc, #72]	@ (8001750 <_sbrk+0x68>)
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	429a      	cmp	r2, r3
 8001716:	d207      	bcs.n	8001728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001718:	f002 feb8 	bl	800448c <__errno>
 800171c:	4603      	mov	r3, r0
 800171e:	220c      	movs	r2, #12
 8001720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001722:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001726:	e009      	b.n	800173c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172e:	4b07      	ldr	r3, [pc, #28]	@ (800174c <_sbrk+0x64>)
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4413      	add	r3, r2
 8001736:	4a05      	ldr	r2, [pc, #20]	@ (800174c <_sbrk+0x64>)
 8001738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800173a:	68fb      	ldr	r3, [r7, #12]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20020000 	.word	0x20020000
 8001748:	00000400 	.word	0x00000400
 800174c:	200002d4 	.word	0x200002d4
 8001750:	20000428 	.word	0x20000428

08001754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001758:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <SystemInit+0x20>)
 800175a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <SystemInit+0x20>)
 8001760:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001764:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800177c:	f7ff ffea 	bl	8001754 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001780:	480c      	ldr	r0, [pc, #48]	@ (80017b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001782:	490d      	ldr	r1, [pc, #52]	@ (80017b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001784:	4a0d      	ldr	r2, [pc, #52]	@ (80017bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001788:	e002      	b.n	8001790 <LoopCopyDataInit>

0800178a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800178a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800178c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800178e:	3304      	adds	r3, #4

08001790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001794:	d3f9      	bcc.n	800178a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001796:	4a0a      	ldr	r2, [pc, #40]	@ (80017c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001798:	4c0a      	ldr	r4, [pc, #40]	@ (80017c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800179c:	e001      	b.n	80017a2 <LoopFillZerobss>

0800179e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800179e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a0:	3204      	adds	r2, #4

080017a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017a4:	d3fb      	bcc.n	800179e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017a6:	f002 fe77 	bl	8004498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017aa:	f7ff fb21 	bl	8000df0 <main>
  bx  lr    
 80017ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017b8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80017bc:	080066dc 	.word	0x080066dc
  ldr r2, =_sbss
 80017c0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80017c4:	20000424 	.word	0x20000424

080017c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017c8:	e7fe      	b.n	80017c8 <ADC_IRQHandler>
	...

080017cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	@ (800180c <HAL_Init+0x40>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0a      	ldr	r2, [pc, #40]	@ (800180c <HAL_Init+0x40>)
 80017e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e8:	4b08      	ldr	r3, [pc, #32]	@ (800180c <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a07      	ldr	r2, [pc, #28]	@ (800180c <HAL_Init+0x40>)
 80017ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f4:	2003      	movs	r0, #3
 80017f6:	f000 f92b 	bl	8001a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fa:	200f      	movs	r0, #15
 80017fc:	f000 f808 	bl	8001810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001800:	f7ff fe3e 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_InitTick+0x54>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4b12      	ldr	r3, [pc, #72]	@ (8001868 <HAL_InitTick+0x58>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	4619      	mov	r1, r3
 8001822:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001826:	fbb3 f3f1 	udiv	r3, r3, r1
 800182a:	fbb2 f3f3 	udiv	r3, r2, r3
 800182e:	4618      	mov	r0, r3
 8001830:	f000 f943 	bl	8001aba <HAL_SYSTICK_Config>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e00e      	b.n	800185c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2b0f      	cmp	r3, #15
 8001842:	d80a      	bhi.n	800185a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001844:	2200      	movs	r2, #0
 8001846:	6879      	ldr	r1, [r7, #4]
 8001848:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800184c:	f000 f90b 	bl	8001a66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001850:	4a06      	ldr	r2, [pc, #24]	@ (800186c <HAL_InitTick+0x5c>)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e000      	b.n	800185c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	2000000c 	.word	0x2000000c
 8001868:	20000014 	.word	0x20000014
 800186c:	20000010 	.word	0x20000010

08001870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_IncTick+0x20>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	461a      	mov	r2, r3
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_IncTick+0x24>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4413      	add	r3, r2
 8001880:	4a04      	ldr	r2, [pc, #16]	@ (8001894 <HAL_IncTick+0x24>)
 8001882:	6013      	str	r3, [r2, #0]
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000014 	.word	0x20000014
 8001894:	200002d8 	.word	0x200002d8

08001898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return uwTick;
 800189c:	4b03      	ldr	r3, [pc, #12]	@ (80018ac <HAL_GetTick+0x14>)
 800189e:	681b      	ldr	r3, [r3, #0]
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	200002d8 	.word	0x200002d8

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	@ (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	@ (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4907      	ldr	r1, [pc, #28]	@ (800194c <__NVIC_EnableIRQ+0x38>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	@ (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	@ (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	@ 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3b01      	subs	r3, #1
 8001a18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a1c:	d301      	bcc.n	8001a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e00f      	b.n	8001a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a22:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <SysTick_Config+0x40>)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a30:	f7ff ff8e 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a34:	4b05      	ldr	r3, [pc, #20]	@ (8001a4c <SysTick_Config+0x40>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a3a:	4b04      	ldr	r3, [pc, #16]	@ (8001a4c <SysTick_Config+0x40>)
 8001a3c:	2207      	movs	r2, #7
 8001a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	e000e010 	.word	0xe000e010

08001a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff29 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a78:	f7ff ff3e 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	6978      	ldr	r0, [r7, #20]
 8001a84:	f7ff ff8e 	bl	80019a4 <NVIC_EncodePriority>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8e:	4611      	mov	r1, r2
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff5d 	bl	8001950 <__NVIC_SetPriority>
}
 8001a96:	bf00      	nop
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b082      	sub	sp, #8
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff31 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7ff ffa2 	bl	8001a0c <SysTick_Config>
 8001ac8:	4603      	mov	r3, r0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e014      	b.n	8001b0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d105      	bne.n	8001afa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff fceb 	bl	80014d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2202      	movs	r2, #2
 8001afe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
 8001b1e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e046      	b.n	8001bb8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	795b      	ldrb	r3, [r3, #5]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_DAC_Start+0x20>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e040      	b.n	8001bb8 <HAL_DAC_Start+0xa2>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	f003 0310 	and.w	r3, r3, #16
 8001b4e:	2201      	movs	r2, #1
 8001b50:	409a      	lsls	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10f      	bne.n	8001b80 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001b6a:	2b3c      	cmp	r3, #60	@ 0x3c
 8001b6c:	d11d      	bne.n	8001baa <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f042 0201 	orr.w	r2, r2, #1
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	e014      	b.n	8001baa <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	213c      	movs	r1, #60	@ 0x3c
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d107      	bne.n	8001baa <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f042 0202 	orr.w	r2, r2, #2
 8001ba8:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	370c      	adds	r7, #12
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bda:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01d      	beq.n	8001c22 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d018      	beq.n	8001c22 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001c1a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f851 	bl	8001cc4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d01d      	beq.n	8001c68 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d018      	beq.n	8001c68 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2204      	movs	r2, #4
 8001c3a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f043 0202 	orr.w	r2, r3, #2
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001c60:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f891 	bl	8001d8a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001c68:	bf00      	nop
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b087      	sub	sp, #28
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e015      	b.n	8001cb8 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d105      	bne.n	8001ca4 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	e004      	b.n	8001cae <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ca4:	697a      	ldr	r2, [r7, #20]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	3314      	adds	r3, #20
 8001cac:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	@ 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <HAL_DAC_ConfigChannel+0x1c>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e042      	b.n	8001d7e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	795b      	ldrb	r3, [r3, #5]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_DAC_ConfigChannel+0x2c>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e03c      	b.n	8001d7e <HAL_DAC_ConfigChannel+0xa6>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2202      	movs	r2, #2
 8001d0e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001d26:	43db      	mvns	r3, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6819      	ldr	r1, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f003 0310 	and.w	r3, r3, #16
 8001d60:	22c0      	movs	r2, #192	@ 0xc0
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43da      	mvns	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2201      	movs	r2, #1
 8001d74:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	@ 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001daa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dac:	f7ff fd74 	bl	8001898 <HAL_GetTick>
 8001db0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d008      	beq.n	8001dd0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2280      	movs	r2, #128	@ 0x80
 8001dc2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e052      	b.n	8001e76 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0216 	bic.w	r2, r2, #22
 8001dde:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dee:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d103      	bne.n	8001e00 <HAL_DMA_Abort+0x62>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0208 	bic.w	r2, r2, #8
 8001e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0201 	bic.w	r2, r2, #1
 8001e1e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e20:	e013      	b.n	8001e4a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e22:	f7ff fd39 	bl	8001898 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b05      	cmp	r3, #5
 8001e2e:	d90c      	bls.n	8001e4a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2203      	movs	r2, #3
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e015      	b.n	8001e76 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1e4      	bne.n	8001e22 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e5c:	223f      	movs	r2, #63	@ 0x3f
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d004      	beq.n	8001e9c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e00c      	b.n	8001eb6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2205      	movs	r2, #5
 8001ea0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0201 	bic.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	@ 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	61fb      	str	r3, [r7, #28]
 8001ede:	e165      	b.n	80021ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	697a      	ldr	r2, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8154 	bne.w	80021a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d005      	beq.n	8001f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d130      	bne.n	8001f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	2203      	movs	r2, #3
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f003 0201 	and.w	r2, r3, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d017      	beq.n	8001fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d123      	bne.n	8002008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	69b9      	ldr	r1, [r7, #24]
 8002004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80ae 	beq.w	80021a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b5d      	ldr	r3, [pc, #372]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	4a5c      	ldr	r2, [pc, #368]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 8002054:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002058:	6453      	str	r3, [r2, #68]	@ 0x44
 800205a:	4b5a      	ldr	r3, [pc, #360]	@ (80021c4 <HAL_GPIO_Init+0x300>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002066:	4a58      	ldr	r2, [pc, #352]	@ (80021c8 <HAL_GPIO_Init+0x304>)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	220f      	movs	r2, #15
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4a4f      	ldr	r2, [pc, #316]	@ (80021cc <HAL_GPIO_Init+0x308>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d025      	beq.n	80020de <HAL_GPIO_Init+0x21a>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a4e      	ldr	r2, [pc, #312]	@ (80021d0 <HAL_GPIO_Init+0x30c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01f      	beq.n	80020da <HAL_GPIO_Init+0x216>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a4d      	ldr	r2, [pc, #308]	@ (80021d4 <HAL_GPIO_Init+0x310>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d019      	beq.n	80020d6 <HAL_GPIO_Init+0x212>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a4c      	ldr	r2, [pc, #304]	@ (80021d8 <HAL_GPIO_Init+0x314>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d013      	beq.n	80020d2 <HAL_GPIO_Init+0x20e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a4b      	ldr	r2, [pc, #300]	@ (80021dc <HAL_GPIO_Init+0x318>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d00d      	beq.n	80020ce <HAL_GPIO_Init+0x20a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a4a      	ldr	r2, [pc, #296]	@ (80021e0 <HAL_GPIO_Init+0x31c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d007      	beq.n	80020ca <HAL_GPIO_Init+0x206>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a49      	ldr	r2, [pc, #292]	@ (80021e4 <HAL_GPIO_Init+0x320>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d101      	bne.n	80020c6 <HAL_GPIO_Init+0x202>
 80020c2:	2306      	movs	r3, #6
 80020c4:	e00c      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e00a      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e008      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e006      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e004      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e002      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020da:	2301      	movs	r3, #1
 80020dc:	e000      	b.n	80020e0 <HAL_GPIO_Init+0x21c>
 80020de:	2300      	movs	r3, #0
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	f002 0203 	and.w	r2, r2, #3
 80020e6:	0092      	lsls	r2, r2, #2
 80020e8:	4093      	lsls	r3, r2
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f0:	4935      	ldr	r1, [pc, #212]	@ (80021c8 <HAL_GPIO_Init+0x304>)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	089b      	lsrs	r3, r3, #2
 80020f6:	3302      	adds	r3, #2
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020fe:	4b3a      	ldr	r3, [pc, #232]	@ (80021e8 <HAL_GPIO_Init+0x324>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002122:	4a31      	ldr	r2, [pc, #196]	@ (80021e8 <HAL_GPIO_Init+0x324>)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002128:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <HAL_GPIO_Init+0x324>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d003      	beq.n	800214c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4313      	orrs	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800214c:	4a26      	ldr	r2, [pc, #152]	@ (80021e8 <HAL_GPIO_Init+0x324>)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002152:	4b25      	ldr	r3, [pc, #148]	@ (80021e8 <HAL_GPIO_Init+0x324>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002176:	4a1c      	ldr	r2, [pc, #112]	@ (80021e8 <HAL_GPIO_Init+0x324>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800217c:	4b1a      	ldr	r3, [pc, #104]	@ (80021e8 <HAL_GPIO_Init+0x324>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a0:	4a11      	ldr	r2, [pc, #68]	@ (80021e8 <HAL_GPIO_Init+0x324>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	2b0f      	cmp	r3, #15
 80021b0:	f67f ae96 	bls.w	8001ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40013800 	.word	0x40013800
 80021cc:	40020000 	.word	0x40020000
 80021d0:	40020400 	.word	0x40020400
 80021d4:	40020800 	.word	0x40020800
 80021d8:	40020c00 	.word	0x40020c00
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40021400 	.word	0x40021400
 80021e4:	40021800 	.word	0x40021800
 80021e8:	40013c00 	.word	0x40013c00

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0cc      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b68      	ldr	r3, [pc, #416]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d90c      	bls.n	8002228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b65      	ldr	r3, [pc, #404]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d044      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d119      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e06f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e067      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b37      	ldr	r3, [pc, #220]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4934      	ldr	r1, [pc, #208]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7ff fadc 	bl	8001898 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7ff fad8 	bl	8001898 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2b      	ldr	r3, [pc, #172]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b25      	ldr	r3, [pc, #148]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d20c      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b22      	ldr	r3, [pc, #136]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	@ (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235e:	4b12      	ldr	r3, [pc, #72]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f855 	bl	8002420 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	@ (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	@ (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fa3c 	bl	8001810 <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08006194 	.word	0x08006194
 80023b0:	2000000c 	.word	0x2000000c
 80023b4:	20000010 	.word	0x20000010

080023b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <HAL_RCC_GetHCLKFreq+0x14>)
 80023be:	681b      	ldr	r3, [r3, #0]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	2000000c 	.word	0x2000000c

080023d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d4:	f7ff fff0 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 80023d8:	4602      	mov	r2, r0
 80023da:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0a9b      	lsrs	r3, r3, #10
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	4903      	ldr	r1, [pc, #12]	@ (80023f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023e6:	5ccb      	ldrb	r3, [r1, r3]
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	080061a4 	.word	0x080061a4

080023f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023fc:	f7ff ffdc 	bl	80023b8 <HAL_RCC_GetHCLKFreq>
 8002400:	4602      	mov	r2, r0
 8002402:	4b05      	ldr	r3, [pc, #20]	@ (8002418 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	0b5b      	lsrs	r3, r3, #13
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	4903      	ldr	r1, [pc, #12]	@ (800241c <HAL_RCC_GetPCLK2Freq+0x24>)
 800240e:	5ccb      	ldrb	r3, [r1, r3]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002414:	4618      	mov	r0, r3
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40023800 	.word	0x40023800
 800241c:	080061a4 	.word	0x080061a4

08002420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002424:	b0a6      	sub	sp, #152	@ 0x98
 8002426:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002446:	4bc8      	ldr	r3, [pc, #800]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b0c      	cmp	r3, #12
 8002450:	f200 817e 	bhi.w	8002750 <HAL_RCC_GetSysClockFreq+0x330>
 8002454:	a201      	add	r2, pc, #4	@ (adr r2, 800245c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245a:	bf00      	nop
 800245c:	08002491 	.word	0x08002491
 8002460:	08002751 	.word	0x08002751
 8002464:	08002751 	.word	0x08002751
 8002468:	08002751 	.word	0x08002751
 800246c:	08002499 	.word	0x08002499
 8002470:	08002751 	.word	0x08002751
 8002474:	08002751 	.word	0x08002751
 8002478:	08002751 	.word	0x08002751
 800247c:	080024a1 	.word	0x080024a1
 8002480:	08002751 	.word	0x08002751
 8002484:	08002751 	.word	0x08002751
 8002488:	08002751 	.word	0x08002751
 800248c:	0800260b 	.word	0x0800260b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002490:	4bb6      	ldr	r3, [pc, #728]	@ (800276c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002496:	e15f      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002498:	4bb5      	ldr	r3, [pc, #724]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x350>)
 800249a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800249e:	e15b      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a0:	4bb1      	ldr	r3, [pc, #708]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024ac:	4bae      	ldr	r3, [pc, #696]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d031      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b8:	4bab      	ldr	r3, [pc, #684]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	2200      	movs	r2, #0
 80024c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80024c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80024cc:	2300      	movs	r3, #0
 80024ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80024d0:	4ba7      	ldr	r3, [pc, #668]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x350>)
 80024d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80024d6:	462a      	mov	r2, r5
 80024d8:	fb03 f202 	mul.w	r2, r3, r2
 80024dc:	2300      	movs	r3, #0
 80024de:	4621      	mov	r1, r4
 80024e0:	fb01 f303 	mul.w	r3, r1, r3
 80024e4:	4413      	add	r3, r2
 80024e6:	4aa2      	ldr	r2, [pc, #648]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x350>)
 80024e8:	4621      	mov	r1, r4
 80024ea:	fba1 1202 	umull	r1, r2, r1, r2
 80024ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80024f0:	460a      	mov	r2, r1
 80024f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80024f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80024f6:	4413      	add	r3, r2
 80024f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80024fe:	2200      	movs	r2, #0
 8002500:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002502:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002504:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002508:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800250c:	f7fe faf6 	bl	8000afc <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800251a:	e064      	b.n	80025e6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251c:	4b92      	ldr	r3, [pc, #584]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	2200      	movs	r2, #0
 8002524:	653b      	str	r3, [r7, #80]	@ 0x50
 8002526:	657a      	str	r2, [r7, #84]	@ 0x54
 8002528:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800252a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002530:	2300      	movs	r3, #0
 8002532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002534:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002538:	4622      	mov	r2, r4
 800253a:	462b      	mov	r3, r5
 800253c:	f04f 0000 	mov.w	r0, #0
 8002540:	f04f 0100 	mov.w	r1, #0
 8002544:	0159      	lsls	r1, r3, #5
 8002546:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800254a:	0150      	lsls	r0, r2, #5
 800254c:	4602      	mov	r2, r0
 800254e:	460b      	mov	r3, r1
 8002550:	4621      	mov	r1, r4
 8002552:	1a51      	subs	r1, r2, r1
 8002554:	6139      	str	r1, [r7, #16]
 8002556:	4629      	mov	r1, r5
 8002558:	eb63 0301 	sbc.w	r3, r3, r1
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800256a:	4659      	mov	r1, fp
 800256c:	018b      	lsls	r3, r1, #6
 800256e:	4651      	mov	r1, sl
 8002570:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002574:	4651      	mov	r1, sl
 8002576:	018a      	lsls	r2, r1, #6
 8002578:	4651      	mov	r1, sl
 800257a:	ebb2 0801 	subs.w	r8, r2, r1
 800257e:	4659      	mov	r1, fp
 8002580:	eb63 0901 	sbc.w	r9, r3, r1
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	f04f 0300 	mov.w	r3, #0
 800258c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002590:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002594:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002598:	4690      	mov	r8, r2
 800259a:	4699      	mov	r9, r3
 800259c:	4623      	mov	r3, r4
 800259e:	eb18 0303 	adds.w	r3, r8, r3
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	462b      	mov	r3, r5
 80025a6:	eb49 0303 	adc.w	r3, r9, r3
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	f04f 0300 	mov.w	r3, #0
 80025b4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025b8:	4629      	mov	r1, r5
 80025ba:	028b      	lsls	r3, r1, #10
 80025bc:	4621      	mov	r1, r4
 80025be:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c2:	4621      	mov	r1, r4
 80025c4:	028a      	lsls	r2, r1, #10
 80025c6:	4610      	mov	r0, r2
 80025c8:	4619      	mov	r1, r3
 80025ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025ce:	2200      	movs	r2, #0
 80025d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80025d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80025d4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80025d8:	f7fe fa90 	bl	8000afc <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025e6:	4b60      	ldr	r3, [pc, #384]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	0c1b      	lsrs	r3, r3, #16
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	3301      	adds	r3, #1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80025f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80025fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002600:	fbb2 f3f3 	udiv	r3, r2, r3
 8002604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002608:	e0a6      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800260a:	4b57      	ldr	r3, [pc, #348]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002612:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002616:	4b54      	ldr	r3, [pc, #336]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d02a      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002622:	4b51      	ldr	r3, [pc, #324]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	2200      	movs	r2, #0
 800262a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800262c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800262e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002630:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002634:	2100      	movs	r1, #0
 8002636:	4b4e      	ldr	r3, [pc, #312]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x350>)
 8002638:	fb03 f201 	mul.w	r2, r3, r1
 800263c:	2300      	movs	r3, #0
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	4413      	add	r3, r2
 8002644:	4a4a      	ldr	r2, [pc, #296]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x350>)
 8002646:	fba0 1202 	umull	r1, r2, r0, r2
 800264a:	677a      	str	r2, [r7, #116]	@ 0x74
 800264c:	460a      	mov	r2, r1
 800264e:	673a      	str	r2, [r7, #112]	@ 0x70
 8002650:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002652:	4413      	add	r3, r2
 8002654:	677b      	str	r3, [r7, #116]	@ 0x74
 8002656:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800265a:	2200      	movs	r2, #0
 800265c:	633b      	str	r3, [r7, #48]	@ 0x30
 800265e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002660:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002664:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002668:	f7fe fa48 	bl	8000afc <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002676:	e05b      	b.n	8002730 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002678:	4b3b      	ldr	r3, [pc, #236]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	099b      	lsrs	r3, r3, #6
 800267e:	2200      	movs	r2, #0
 8002680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002682:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	2300      	movs	r3, #0
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002690:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002694:	4642      	mov	r2, r8
 8002696:	464b      	mov	r3, r9
 8002698:	f04f 0000 	mov.w	r0, #0
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	0159      	lsls	r1, r3, #5
 80026a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a6:	0150      	lsls	r0, r2, #5
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	4641      	mov	r1, r8
 80026ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80026b2:	4649      	mov	r1, r9
 80026b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026cc:	ebb2 040a 	subs.w	r4, r2, sl
 80026d0:	eb63 050b 	sbc.w	r5, r3, fp
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	00eb      	lsls	r3, r5, #3
 80026de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026e2:	00e2      	lsls	r2, r4, #3
 80026e4:	4614      	mov	r4, r2
 80026e6:	461d      	mov	r5, r3
 80026e8:	4643      	mov	r3, r8
 80026ea:	18e3      	adds	r3, r4, r3
 80026ec:	603b      	str	r3, [r7, #0]
 80026ee:	464b      	mov	r3, r9
 80026f0:	eb45 0303 	adc.w	r3, r5, r3
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	f04f 0200 	mov.w	r2, #0
 80026fa:	f04f 0300 	mov.w	r3, #0
 80026fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002702:	4629      	mov	r1, r5
 8002704:	028b      	lsls	r3, r1, #10
 8002706:	4621      	mov	r1, r4
 8002708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800270c:	4621      	mov	r1, r4
 800270e:	028a      	lsls	r2, r1, #10
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002718:	2200      	movs	r2, #0
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	61fa      	str	r2, [r7, #28]
 800271e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002722:	f7fe f9eb 	bl	8000afc <__aeabi_uldivmod>
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4613      	mov	r3, r2
 800272c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002730:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x348>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	0f1b      	lsrs	r3, r3, #28
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 800273e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002742:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800274e:	e003      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002750:	4b06      	ldr	r3, [pc, #24]	@ (800276c <HAL_RCC_GetSysClockFreq+0x34c>)
 8002752:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002756:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002758:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 800275c:	4618      	mov	r0, r3
 800275e:	3798      	adds	r7, #152	@ 0x98
 8002760:	46bd      	mov	sp, r7
 8002762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	00f42400 	.word	0x00f42400
 8002770:	006ddd00 	.word	0x006ddd00

08002774 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e28d      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	f000 8083 	beq.w	800289a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002794:	4b94      	ldr	r3, [pc, #592]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b04      	cmp	r3, #4
 800279e:	d019      	beq.n	80027d4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027a0:	4b91      	ldr	r3, [pc, #580]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 030c 	and.w	r3, r3, #12
        || \
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d106      	bne.n	80027ba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027ac:	4b8e      	ldr	r3, [pc, #568]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b8:	d00c      	beq.n	80027d4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ba:	4b8b      	ldr	r3, [pc, #556]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d112      	bne.n	80027ec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027c6:	4b88      	ldr	r3, [pc, #544]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d2:	d10b      	bne.n	80027ec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d4:	4b84      	ldr	r3, [pc, #528]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d05b      	beq.n	8002898 <HAL_RCC_OscConfig+0x124>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d157      	bne.n	8002898 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e25a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027f4:	d106      	bne.n	8002804 <HAL_RCC_OscConfig+0x90>
 80027f6:	4b7c      	ldr	r3, [pc, #496]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a7b      	ldr	r2, [pc, #492]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e01d      	b.n	8002840 <HAL_RCC_OscConfig+0xcc>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800280c:	d10c      	bne.n	8002828 <HAL_RCC_OscConfig+0xb4>
 800280e:	4b76      	ldr	r3, [pc, #472]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a75      	ldr	r2, [pc, #468]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 8002814:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	4b73      	ldr	r3, [pc, #460]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a72      	ldr	r2, [pc, #456]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 8002820:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	e00b      	b.n	8002840 <HAL_RCC_OscConfig+0xcc>
 8002828:	4b6f      	ldr	r3, [pc, #444]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a6e      	ldr	r2, [pc, #440]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 800282e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002832:	6013      	str	r3, [r2, #0]
 8002834:	4b6c      	ldr	r3, [pc, #432]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a6b      	ldr	r2, [pc, #428]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 800283a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800283e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d013      	beq.n	8002870 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002848:	f7ff f826 	bl	8001898 <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800284e:	e008      	b.n	8002862 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002850:	f7ff f822 	bl	8001898 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	@ 0x64
 800285c:	d901      	bls.n	8002862 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e21f      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002862:	4b61      	ldr	r3, [pc, #388]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d0f0      	beq.n	8002850 <HAL_RCC_OscConfig+0xdc>
 800286e:	e014      	b.n	800289a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7ff f812 	bl	8001898 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff f80e 	bl	8001898 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e20b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800288a:	4b57      	ldr	r3, [pc, #348]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x104>
 8002896:	e000      	b.n	800289a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d06f      	beq.n	8002986 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028a6:	4b50      	ldr	r3, [pc, #320]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d017      	beq.n	80028e2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028b2:	4b4d      	ldr	r3, [pc, #308]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 030c 	and.w	r3, r3, #12
        || \
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d105      	bne.n	80028ca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028be:	4b4a      	ldr	r3, [pc, #296]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00b      	beq.n	80028e2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ca:	4b47      	ldr	r3, [pc, #284]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d11c      	bne.n	8002910 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028d6:	4b44      	ldr	r3, [pc, #272]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d116      	bne.n	8002910 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028e2:	4b41      	ldr	r3, [pc, #260]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d005      	beq.n	80028fa <HAL_RCC_OscConfig+0x186>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d001      	beq.n	80028fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e1d3      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fa:	4b3b      	ldr	r3, [pc, #236]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	4937      	ldr	r1, [pc, #220]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 800290a:	4313      	orrs	r3, r2
 800290c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290e:	e03a      	b.n	8002986 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d020      	beq.n	800295a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002918:	4b34      	ldr	r3, [pc, #208]	@ (80029ec <HAL_RCC_OscConfig+0x278>)
 800291a:	2201      	movs	r2, #1
 800291c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe ffbb 	bl	8001898 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002926:	f7fe ffb7 	bl	8001898 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e1b4      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002944:	4b28      	ldr	r3, [pc, #160]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	00db      	lsls	r3, r3, #3
 8002952:	4925      	ldr	r1, [pc, #148]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
 8002958:	e015      	b.n	8002986 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800295a:	4b24      	ldr	r3, [pc, #144]	@ (80029ec <HAL_RCC_OscConfig+0x278>)
 800295c:	2200      	movs	r2, #0
 800295e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe ff9a 	bl	8001898 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002968:	f7fe ff96 	bl	8001898 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e193      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800297a:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	2b00      	cmp	r3, #0
 8002990:	d036      	beq.n	8002a00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d016      	beq.n	80029c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800299a:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <HAL_RCC_OscConfig+0x27c>)
 800299c:	2201      	movs	r2, #1
 800299e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029a0:	f7fe ff7a 	bl	8001898 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a8:	f7fe ff76 	bl	8001898 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e173      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ba:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <HAL_RCC_OscConfig+0x274>)
 80029bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x234>
 80029c6:	e01b      	b.n	8002a00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c8:	4b09      	ldr	r3, [pc, #36]	@ (80029f0 <HAL_RCC_OscConfig+0x27c>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ce:	f7fe ff63 	bl	8001898 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d4:	e00e      	b.n	80029f4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d6:	f7fe ff5f 	bl	8001898 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d907      	bls.n	80029f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e15c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
 80029e8:	40023800 	.word	0x40023800
 80029ec:	42470000 	.word	0x42470000
 80029f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f4:	4b8a      	ldr	r3, [pc, #552]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 80029f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1ea      	bne.n	80029d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 8097 	beq.w	8002b3c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a12:	4b83      	ldr	r3, [pc, #524]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d10f      	bne.n	8002a3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	4b7f      	ldr	r3, [pc, #508]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	4a7e      	ldr	r2, [pc, #504]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	60bb      	str	r3, [r7, #8]
 8002a38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3e:	4b79      	ldr	r3, [pc, #484]	@ (8002c24 <HAL_RCC_OscConfig+0x4b0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d118      	bne.n	8002a7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a4a:	4b76      	ldr	r3, [pc, #472]	@ (8002c24 <HAL_RCC_OscConfig+0x4b0>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a75      	ldr	r2, [pc, #468]	@ (8002c24 <HAL_RCC_OscConfig+0x4b0>)
 8002a50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7fe ff1f 	bl	8001898 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe ff1b 	bl	8001898 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e118      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b6c      	ldr	r3, [pc, #432]	@ (8002c24 <HAL_RCC_OscConfig+0x4b0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d106      	bne.n	8002a92 <HAL_RCC_OscConfig+0x31e>
 8002a84:	4b66      	ldr	r3, [pc, #408]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002a86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a88:	4a65      	ldr	r2, [pc, #404]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a90:	e01c      	b.n	8002acc <HAL_RCC_OscConfig+0x358>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b05      	cmp	r3, #5
 8002a98:	d10c      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x340>
 8002a9a:	4b61      	ldr	r3, [pc, #388]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9e:	4a60      	ldr	r2, [pc, #384]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	f043 0304 	orr.w	r3, r3, #4
 8002aa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa6:	4b5e      	ldr	r3, [pc, #376]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aaa:	4a5d      	ldr	r2, [pc, #372]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	f043 0301 	orr.w	r3, r3, #1
 8002ab0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab2:	e00b      	b.n	8002acc <HAL_RCC_OscConfig+0x358>
 8002ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab8:	4a59      	ldr	r2, [pc, #356]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002aba:	f023 0301 	bic.w	r3, r3, #1
 8002abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac0:	4b57      	ldr	r3, [pc, #348]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac4:	4a56      	ldr	r2, [pc, #344]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002ac6:	f023 0304 	bic.w	r3, r3, #4
 8002aca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d015      	beq.n	8002b00 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fee0 	bl	8001898 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7fe fedc 	bl	8001898 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e0d7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	4b4b      	ldr	r3, [pc, #300]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0ee      	beq.n	8002adc <HAL_RCC_OscConfig+0x368>
 8002afe:	e014      	b.n	8002b2a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b00:	f7fe feca 	bl	8001898 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fec6 	bl	8001898 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e0c1      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1e:	4b40      	ldr	r3, [pc, #256]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1ee      	bne.n	8002b08 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d105      	bne.n	8002b3c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b30:	4b3b      	ldr	r3, [pc, #236]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	4a3a      	ldr	r2, [pc, #232]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002b36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80ad 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b46:	4b36      	ldr	r3, [pc, #216]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f003 030c 	and.w	r3, r3, #12
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d060      	beq.n	8002c14 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d145      	bne.n	8002be6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	4b33      	ldr	r3, [pc, #204]	@ (8002c28 <HAL_RCC_OscConfig+0x4b4>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b60:	f7fe fe9a 	bl	8001898 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fe96 	bl	8001898 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e093      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7a:	4b29      	ldr	r3, [pc, #164]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b94:	019b      	lsls	r3, r3, #6
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	085b      	lsrs	r3, r3, #1
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	041b      	lsls	r3, r3, #16
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	071b      	lsls	r3, r3, #28
 8002bb2:	491b      	ldr	r1, [pc, #108]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <HAL_RCC_OscConfig+0x4b4>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fe6b 	bl	8001898 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7fe fe67 	bl	8001898 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e064      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd8:	4b11      	ldr	r3, [pc, #68]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x452>
 8002be4:	e05c      	b.n	8002ca0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b10      	ldr	r3, [pc, #64]	@ (8002c28 <HAL_RCC_OscConfig+0x4b4>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe fe54 	bl	8001898 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe fe50 	bl	8001898 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e04d      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x480>
 8002c12:	e045      	b.n	8002ca0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d107      	bne.n	8002c2c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e040      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
 8002c20:	40023800 	.word	0x40023800
 8002c24:	40007000 	.word	0x40007000
 8002c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cac <HAL_RCC_OscConfig+0x538>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d030      	beq.n	8002c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d129      	bne.n	8002c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d122      	bne.n	8002c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d119      	bne.n	8002c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	3b01      	subs	r3, #1
 8002c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d10f      	bne.n	8002c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d107      	bne.n	8002c9c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800

08002cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e041      	b.n	8002d46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fc46 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3304      	adds	r3, #4
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f000 f9e6 	bl	80030c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d001      	beq.n	8002d68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e04e      	b.n	8002e06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a23      	ldr	r2, [pc, #140]	@ (8002e14 <HAL_TIM_Base_Start_IT+0xc4>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d022      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d92:	d01d      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1f      	ldr	r2, [pc, #124]	@ (8002e18 <HAL_TIM_Base_Start_IT+0xc8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d018      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e1c <HAL_TIM_Base_Start_IT+0xcc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d013      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a1c      	ldr	r2, [pc, #112]	@ (8002e20 <HAL_TIM_Base_Start_IT+0xd0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00e      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e24 <HAL_TIM_Base_Start_IT+0xd4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a19      	ldr	r2, [pc, #100]	@ (8002e28 <HAL_TIM_Base_Start_IT+0xd8>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIM_Base_Start_IT+0x80>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a18      	ldr	r2, [pc, #96]	@ (8002e2c <HAL_TIM_Base_Start_IT+0xdc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d111      	bne.n	8002df4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d010      	beq.n	8002e04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df2:	e007      	b.n	8002e04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40010000 	.word	0x40010000
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	40000c00 	.word	0x40000c00
 8002e24:	40010400 	.word	0x40010400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40001800 	.word	0x40001800

08002e30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0201 	bic.w	r2, r2, #1
 8002e46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10f      	bne.n	8002e78 <HAL_TIM_Base_Stop_IT+0x48>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <HAL_TIM_Base_Stop_IT+0x48>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0201 	bic.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01b      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0202 	mvn.w	r2, #2
 8002ec2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f8d2 	bl	8003082 <HAL_TIM_IC_CaptureCallback>
 8002ede:	e005      	b.n	8002eec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f8c4 	bl	800306e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8d5 	bl	8003096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d020      	beq.n	8002f3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01b      	beq.n	8002f3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f06f 0204 	mvn.w	r2, #4
 8002f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f8ac 	bl	8003082 <HAL_TIM_IC_CaptureCallback>
 8002f2a:	e005      	b.n	8002f38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 f89e 	bl	800306e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 f8af 	bl	8003096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d020      	beq.n	8002f8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01b      	beq.n	8002f8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f06f 0208 	mvn.w	r2, #8
 8002f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2204      	movs	r2, #4
 8002f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f886 	bl	8003082 <HAL_TIM_IC_CaptureCallback>
 8002f76:	e005      	b.n	8002f84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f878 	bl	800306e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f889 	bl	8003096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0310 	and.w	r3, r3, #16
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01b      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f06f 0210 	mvn.w	r2, #16
 8002fa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2208      	movs	r2, #8
 8002fac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 f860 	bl	8003082 <HAL_TIM_IC_CaptureCallback>
 8002fc2:	e005      	b.n	8002fd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f852 	bl	800306e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f863 	bl	8003096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00c      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d007      	beq.n	8002ffa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f06f 0201 	mvn.w	r2, #1
 8002ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7fe f8d7 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00c      	beq.n	800301e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f000 f983 	bl	8003324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00c      	beq.n	8003042 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800303a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f834 	bl	80030aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00c      	beq.n	8003066 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f06f 0220 	mvn.w	r2, #32
 800305e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f955 	bl	8003310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800306e:	b480      	push	{r7}
 8003070:	b083      	sub	sp, #12
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
	...

080030c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a46      	ldr	r2, [pc, #280]	@ (80031ec <TIM_Base_SetConfig+0x12c>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <TIM_Base_SetConfig+0x40>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030de:	d00f      	beq.n	8003100 <TIM_Base_SetConfig+0x40>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a43      	ldr	r2, [pc, #268]	@ (80031f0 <TIM_Base_SetConfig+0x130>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00b      	beq.n	8003100 <TIM_Base_SetConfig+0x40>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a42      	ldr	r2, [pc, #264]	@ (80031f4 <TIM_Base_SetConfig+0x134>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <TIM_Base_SetConfig+0x40>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a41      	ldr	r2, [pc, #260]	@ (80031f8 <TIM_Base_SetConfig+0x138>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_Base_SetConfig+0x40>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a40      	ldr	r2, [pc, #256]	@ (80031fc <TIM_Base_SetConfig+0x13c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d108      	bne.n	8003112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a35      	ldr	r2, [pc, #212]	@ (80031ec <TIM_Base_SetConfig+0x12c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d02b      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003120:	d027      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a32      	ldr	r2, [pc, #200]	@ (80031f0 <TIM_Base_SetConfig+0x130>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d023      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a31      	ldr	r2, [pc, #196]	@ (80031f4 <TIM_Base_SetConfig+0x134>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01f      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a30      	ldr	r2, [pc, #192]	@ (80031f8 <TIM_Base_SetConfig+0x138>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01b      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a2f      	ldr	r2, [pc, #188]	@ (80031fc <TIM_Base_SetConfig+0x13c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d017      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a2e      	ldr	r2, [pc, #184]	@ (8003200 <TIM_Base_SetConfig+0x140>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a2d      	ldr	r2, [pc, #180]	@ (8003204 <TIM_Base_SetConfig+0x144>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00f      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a2c      	ldr	r2, [pc, #176]	@ (8003208 <TIM_Base_SetConfig+0x148>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d00b      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a2b      	ldr	r2, [pc, #172]	@ (800320c <TIM_Base_SetConfig+0x14c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d007      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a2a      	ldr	r2, [pc, #168]	@ (8003210 <TIM_Base_SetConfig+0x150>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d003      	beq.n	8003172 <TIM_Base_SetConfig+0xb2>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a29      	ldr	r2, [pc, #164]	@ (8003214 <TIM_Base_SetConfig+0x154>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d108      	bne.n	8003184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4313      	orrs	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a10      	ldr	r2, [pc, #64]	@ (80031ec <TIM_Base_SetConfig+0x12c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d003      	beq.n	80031b8 <TIM_Base_SetConfig+0xf8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <TIM_Base_SetConfig+0x13c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d103      	bne.n	80031c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	691a      	ldr	r2, [r3, #16]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	f023 0201 	bic.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	611a      	str	r2, [r3, #16]
  }
}
 80031de:	bf00      	nop
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40000800 	.word	0x40000800
 80031f8:	40000c00 	.word	0x40000c00
 80031fc:	40010400 	.word	0x40010400
 8003200:	40014000 	.word	0x40014000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800
 800320c:	40001800 	.word	0x40001800
 8003210:	40001c00 	.word	0x40001c00
 8003214:	40002000 	.word	0x40002000

08003218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003228:	2b01      	cmp	r3, #1
 800322a:	d101      	bne.n	8003230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800322c:	2302      	movs	r3, #2
 800322e:	e05a      	b.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a21      	ldr	r2, [pc, #132]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d022      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800327c:	d01d      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1b      	ldr	r2, [pc, #108]	@ (80032fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d013      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1a      	ldr	r2, [pc, #104]	@ (8003300 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a18      	ldr	r2, [pc, #96]	@ (8003304 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a17      	ldr	r2, [pc, #92]	@ (8003308 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a15      	ldr	r2, [pc, #84]	@ (800330c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10c      	bne.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	40010000 	.word	0x40010000
 80032f8:	40000400 	.word	0x40000400
 80032fc:	40000800 	.word	0x40000800
 8003300:	40000c00 	.word	0x40000c00
 8003304:	40010400 	.word	0x40010400
 8003308:	40014000 	.word	0x40014000
 800330c:	40001800 	.word	0x40001800

08003310 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e042      	b.n	80033d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d106      	bne.n	8003364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7fe f92a 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2224      	movs	r2, #36	@ 0x24
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800337a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fdbd 	bl	8003efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695a      	ldr	r2, [r3, #20]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68da      	ldr	r2, [r3, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	@ 0x28
 80033dc:	af02      	add	r7, sp, #8
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	4613      	mov	r3, r2
 80033e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d175      	bne.n	80034e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d002      	beq.n	8003404 <HAL_UART_Transmit+0x2c>
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e06e      	b.n	80034e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2221      	movs	r2, #33	@ 0x21
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003416:	f7fe fa3f 	bl	8001898 <HAL_GetTick>
 800341a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	88fa      	ldrh	r2, [r7, #6]
 8003426:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003430:	d108      	bne.n	8003444 <HAL_UART_Transmit+0x6c>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d104      	bne.n	8003444 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800343a:	2300      	movs	r3, #0
 800343c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	e003      	b.n	800344c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003448:	2300      	movs	r3, #0
 800344a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800344c:	e02e      	b.n	80034ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2200      	movs	r2, #0
 8003456:	2180      	movs	r1, #128	@ 0x80
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fb1f 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e03a      	b.n	80034e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10b      	bne.n	800348e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	461a      	mov	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003484:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	3302      	adds	r3, #2
 800348a:	61bb      	str	r3, [r7, #24]
 800348c:	e007      	b.n	800349e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3301      	adds	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1cb      	bne.n	800344e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	2200      	movs	r2, #0
 80034be:	2140      	movs	r1, #64	@ 0x40
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 faeb 	bl	8003a9c <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e006      	b.n	80034e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3720      	adds	r7, #32
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	4613      	mov	r3, r2
 80034fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d112      	bne.n	800352e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_UART_Receive_IT+0x26>
 800350e:	88fb      	ldrh	r3, [r7, #6]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e00b      	b.n	8003530 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	461a      	mov	r2, r3
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fb12 	bl	8003b4e <UART_Start_Receive_IT>
 800352a:	4603      	mov	r3, r0
 800352c:	e000      	b.n	8003530 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
  }
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b0ba      	sub	sp, #232	@ 0xe8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800355e:	2300      	movs	r3, #0
 8003560:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003564:	2300      	movs	r3, #0
 8003566:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800356a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800357e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_UART_IRQHandler+0x66>
 800358a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fbf2 	bl	8003d80 <UART_Receive_IT>
      return;
 800359c:	e25b      	b.n	8003a56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800359e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 80de 	beq.w	8003764 <HAL_UART_IRQHandler+0x22c>
 80035a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80d1 	beq.w	8003764 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_UART_IRQHandler+0xae>
 80035ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00b      	beq.n	800360a <HAL_UART_IRQHandler+0xd2>
 80035f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	f043 0202 	orr.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_UART_IRQHandler+0xf6>
 8003616:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	2b00      	cmp	r3, #0
 8003620:	d005      	beq.n	800362e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	f043 0204 	orr.w	r2, r3, #4
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800362e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d011      	beq.n	800365e <HAL_UART_IRQHandler+0x126>
 800363a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800363e:	f003 0320 	and.w	r3, r3, #32
 8003642:	2b00      	cmp	r3, #0
 8003644:	d105      	bne.n	8003652 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d005      	beq.n	800365e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	f043 0208 	orr.w	r2, r3, #8
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 81f2 	beq.w	8003a4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800366c:	f003 0320 	and.w	r3, r3, #32
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_UART_IRQHandler+0x14e>
 8003674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003678:	f003 0320 	and.w	r3, r3, #32
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fb7d 	bl	8003d80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003690:	2b40      	cmp	r3, #64	@ 0x40
 8003692:	bf0c      	ite	eq
 8003694:	2301      	moveq	r3, #1
 8003696:	2300      	movne	r3, #0
 8003698:	b2db      	uxtb	r3, r3
 800369a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <HAL_UART_IRQHandler+0x17a>
 80036aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d04f      	beq.n	8003752 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 fa85 	bl	8003bc2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c2:	2b40      	cmp	r3, #64	@ 0x40
 80036c4:	d141      	bne.n	800374a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3314      	adds	r3, #20
 80036cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80036d4:	e853 3f00 	ldrex	r3, [r3]
 80036d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80036dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80036e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3314      	adds	r3, #20
 80036ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80036f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80036f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80036fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003702:	e841 2300 	strex	r3, r2, [r1]
 8003706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800370a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1d9      	bne.n	80036c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d013      	beq.n	8003742 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800371e:	4a7e      	ldr	r2, [pc, #504]	@ (8003918 <HAL_UART_IRQHandler+0x3e0>)
 8003720:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003726:	4618      	mov	r0, r3
 8003728:	f7fe fba9 	bl	8001e7e <HAL_DMA_Abort_IT>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d016      	beq.n	8003760 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003736:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800373c:	4610      	mov	r0, r2
 800373e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003740:	e00e      	b.n	8003760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f994 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	e00a      	b.n	8003760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f990 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003750:	e006      	b.n	8003760 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f98c 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800375e:	e175      	b.n	8003a4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003760:	bf00      	nop
    return;
 8003762:	e173      	b.n	8003a4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003768:	2b01      	cmp	r3, #1
 800376a:	f040 814f 	bne.w	8003a0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800376e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 8148 	beq.w	8003a0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800377c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b00      	cmp	r3, #0
 8003786:	f000 8141 	beq.w	8003a0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b40      	cmp	r3, #64	@ 0x40
 80037ac:	f040 80b6 	bne.w	800391c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 8145 	beq.w	8003a50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037ce:	429a      	cmp	r2, r3
 80037d0:	f080 813e 	bcs.w	8003a50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80037da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037e6:	f000 8088 	beq.w	80038fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	330c      	adds	r3, #12
 80037f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003800:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003808:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	330c      	adds	r3, #12
 8003812:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003816:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800381a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003822:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800382e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1d9      	bne.n	80037ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3314      	adds	r3, #20
 800383c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003840:	e853 3f00 	ldrex	r3, [r3]
 8003844:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3314      	adds	r3, #20
 8003856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800385a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800385e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003862:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800386c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1e1      	bne.n	8003836 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	3314      	adds	r3, #20
 8003878:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800387c:	e853 3f00 	ldrex	r3, [r3]
 8003880:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003882:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003884:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003888:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3314      	adds	r3, #20
 8003892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003896:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003898:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800389c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e3      	bne.n	8003872 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	330c      	adds	r3, #12
 80038be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80038c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ca:	f023 0310 	bic.w	r3, r3, #16
 80038ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	330c      	adds	r3, #12
 80038d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80038dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80038de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80038e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80038ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e3      	bne.n	80038b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fe fa52 	bl	8001d9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2202      	movs	r2, #2
 80038fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003908:	b29b      	uxth	r3, r3
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	b29b      	uxth	r3, r3
 800390e:	4619      	mov	r1, r3
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 f8b7 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003916:	e09b      	b.n	8003a50 <HAL_UART_IRQHandler+0x518>
 8003918:	08003c89 	.word	0x08003c89
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003924:	b29b      	uxth	r3, r3
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 808e 	beq.w	8003a54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8089 	beq.w	8003a54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	330c      	adds	r3, #12
 8003948:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003954:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003958:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003966:	647a      	str	r2, [r7, #68]	@ 0x44
 8003968:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800396c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800396e:	e841 2300 	strex	r3, r2, [r1]
 8003972:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1e3      	bne.n	8003942 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	3314      	adds	r3, #20
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	e853 3f00 	ldrex	r3, [r3]
 8003988:	623b      	str	r3, [r7, #32]
   return(result);
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	f023 0301 	bic.w	r3, r3, #1
 8003990:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3314      	adds	r3, #20
 800399a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800399e:	633a      	str	r2, [r7, #48]	@ 0x30
 80039a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039a6:	e841 2300 	strex	r3, r2, [r1]
 80039aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1e3      	bne.n	800397a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2220      	movs	r2, #32
 80039b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	e853 3f00 	ldrex	r3, [r3]
 80039ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0310 	bic.w	r3, r3, #16
 80039d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	330c      	adds	r3, #12
 80039e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80039e4:	61fa      	str	r2, [r7, #28]
 80039e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e8:	69b9      	ldr	r1, [r7, #24]
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	e841 2300 	strex	r3, r2, [r1]
 80039f0:	617b      	str	r3, [r7, #20]
   return(result);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1e3      	bne.n	80039c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f83d 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a0a:	e023      	b.n	8003a54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <HAL_UART_IRQHandler+0x4f4>
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f943 	bl	8003cb0 <UART_Transmit_IT>
    return;
 8003a2a:	e014      	b.n	8003a56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d00e      	beq.n	8003a56 <HAL_UART_IRQHandler+0x51e>
 8003a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f983 	bl	8003d50 <UART_EndTransmit_IT>
    return;
 8003a4a:	e004      	b.n	8003a56 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a4c:	bf00      	nop
 8003a4e:	e002      	b.n	8003a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a54:	bf00      	nop
  }
}
 8003a56:	37e8      	adds	r7, #232	@ 0xe8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aac:	e03b      	b.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ab4:	d037      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab6:	f7fd feef 	bl	8001898 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d302      	bcc.n	8003acc <UART_WaitOnFlagUntilTimeout+0x30>
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e03a      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d023      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b80      	cmp	r3, #128	@ 0x80
 8003ae2:	d020      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b40      	cmp	r3, #64	@ 0x40
 8003ae8:	d01d      	beq.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d116      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003af8:	2300      	movs	r3, #0
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 f857 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2208      	movs	r2, #8
 8003b18:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e00f      	b.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	bf0c      	ite	eq
 8003b36:	2301      	moveq	r3, #1
 8003b38:	2300      	movne	r3, #0
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	79fb      	ldrb	r3, [r7, #7]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d0b4      	beq.n	8003aae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	88fa      	ldrh	r2, [r7, #6]
 8003b6c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2222      	movs	r2, #34	@ 0x22
 8003b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b92:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0220 	orr.w	r2, r2, #32
 8003bb2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b095      	sub	sp, #84	@ 0x54
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	330c      	adds	r3, #12
 8003be8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003bea:	643a      	str	r2, [r7, #64]	@ 0x40
 8003bec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e5      	bne.n	8003bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3314      	adds	r3, #20
 8003c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e5      	bne.n	8003bfe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d119      	bne.n	8003c6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	330c      	adds	r3, #12
 8003c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	330c      	adds	r3, #12
 8003c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c5a:	61ba      	str	r2, [r7, #24]
 8003c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6979      	ldr	r1, [r7, #20]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	613b      	str	r3, [r7, #16]
   return(result);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e5      	bne.n	8003c3a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003c7c:	bf00      	nop
 8003c7e:	3754      	adds	r7, #84	@ 0x54
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f7ff fee4 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b21      	cmp	r3, #33	@ 0x21
 8003cc2:	d13e      	bne.n	8003d42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ccc:	d114      	bne.n	8003cf8 <UART_Transmit_IT+0x48>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d110      	bne.n	8003cf8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	881b      	ldrh	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	1c9a      	adds	r2, r3, #2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	621a      	str	r2, [r3, #32]
 8003cf6:	e008      	b.n	8003d0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	1c59      	adds	r1, r3, #1
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6211      	str	r1, [r2, #32]
 8003d02:	781a      	ldrb	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4619      	mov	r1, r3
 8003d18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10f      	bne.n	8003d3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68da      	ldr	r2, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	e000      	b.n	8003d44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d42:	2302      	movs	r3, #2
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68da      	ldr	r2, [r3, #12]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff fe73 	bl	8003a5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08c      	sub	sp, #48	@ 0x30
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b22      	cmp	r3, #34	@ 0x22
 8003d92:	f040 80ae 	bne.w	8003ef2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d9e:	d117      	bne.n	8003dd0 <UART_Receive_IT+0x50>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	691b      	ldr	r3, [r3, #16]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d113      	bne.n	8003dd0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc8:	1c9a      	adds	r2, r3, #2
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dce:	e026      	b.n	8003e1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de2:	d007      	beq.n	8003df4 <UART_Receive_IT+0x74>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d10a      	bne.n	8003e02 <UART_Receive_IT+0x82>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d106      	bne.n	8003e02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	b2da      	uxtb	r2, r3
 8003dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dfe:	701a      	strb	r2, [r3, #0]
 8003e00:	e008      	b.n	8003e14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4619      	mov	r1, r3
 8003e2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d15d      	bne.n	8003eee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68da      	ldr	r2, [r3, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0220 	bic.w	r2, r2, #32
 8003e40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0201 	bic.w	r2, r2, #1
 8003e60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d135      	bne.n	8003ee4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	330c      	adds	r3, #12
 8003e84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	e853 3f00 	ldrex	r3, [r3]
 8003e8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f023 0310 	bic.w	r3, r3, #16
 8003e94:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9e:	623a      	str	r2, [r7, #32]
 8003ea0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	69f9      	ldr	r1, [r7, #28]
 8003ea4:	6a3a      	ldr	r2, [r7, #32]
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e5      	bne.n	8003e7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d10a      	bne.n	8003ed6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fdd1 	bl	8003a84 <HAL_UARTEx_RxEventCallback>
 8003ee2:	e002      	b.n	8003eea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fc fff3 	bl	8000ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	e002      	b.n	8003ef4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ef2:	2302      	movs	r3, #2
  }
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3730      	adds	r7, #48	@ 0x30
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f00:	b0c0      	sub	sp, #256	@ 0x100
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f18:	68d9      	ldr	r1, [r3, #12]
 8003f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	ea40 0301 	orr.w	r3, r0, r1
 8003f24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	69db      	ldr	r3, [r3, #28]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f54:	f021 010c 	bic.w	r1, r1, #12
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003f62:	430b      	orrs	r3, r1
 8003f64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f76:	6999      	ldr	r1, [r3, #24]
 8003f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	ea40 0301 	orr.w	r3, r0, r1
 8003f82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	4b8f      	ldr	r3, [pc, #572]	@ (80041c8 <UART_SetConfig+0x2cc>)
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d005      	beq.n	8003f9c <UART_SetConfig+0xa0>
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	4b8d      	ldr	r3, [pc, #564]	@ (80041cc <UART_SetConfig+0x2d0>)
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d104      	bne.n	8003fa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f9c:	f7fe fa2c 	bl	80023f8 <HAL_RCC_GetPCLK2Freq>
 8003fa0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fa4:	e003      	b.n	8003fae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fa6:	f7fe fa13 	bl	80023d0 <HAL_RCC_GetPCLK1Freq>
 8003faa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb2:	69db      	ldr	r3, [r3, #28]
 8003fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fb8:	f040 810c 	bne.w	80041d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003fc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003fca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003fce:	4622      	mov	r2, r4
 8003fd0:	462b      	mov	r3, r5
 8003fd2:	1891      	adds	r1, r2, r2
 8003fd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003fd6:	415b      	adcs	r3, r3
 8003fd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003fde:	4621      	mov	r1, r4
 8003fe0:	eb12 0801 	adds.w	r8, r2, r1
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	eb43 0901 	adc.w	r9, r3, r1
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ff6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ffa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ffe:	4690      	mov	r8, r2
 8004000:	4699      	mov	r9, r3
 8004002:	4623      	mov	r3, r4
 8004004:	eb18 0303 	adds.w	r3, r8, r3
 8004008:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800400c:	462b      	mov	r3, r5
 800400e:	eb49 0303 	adc.w	r3, r9, r3
 8004012:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004022:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004026:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800402a:	460b      	mov	r3, r1
 800402c:	18db      	adds	r3, r3, r3
 800402e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004030:	4613      	mov	r3, r2
 8004032:	eb42 0303 	adc.w	r3, r2, r3
 8004036:	657b      	str	r3, [r7, #84]	@ 0x54
 8004038:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800403c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004040:	f7fc fd5c 	bl	8000afc <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4b61      	ldr	r3, [pc, #388]	@ (80041d0 <UART_SetConfig+0x2d4>)
 800404a:	fba3 2302 	umull	r2, r3, r3, r2
 800404e:	095b      	lsrs	r3, r3, #5
 8004050:	011c      	lsls	r4, r3, #4
 8004052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004056:	2200      	movs	r2, #0
 8004058:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800405c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004060:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004064:	4642      	mov	r2, r8
 8004066:	464b      	mov	r3, r9
 8004068:	1891      	adds	r1, r2, r2
 800406a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800406c:	415b      	adcs	r3, r3
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004070:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004074:	4641      	mov	r1, r8
 8004076:	eb12 0a01 	adds.w	sl, r2, r1
 800407a:	4649      	mov	r1, r9
 800407c:	eb43 0b01 	adc.w	fp, r3, r1
 8004080:	f04f 0200 	mov.w	r2, #0
 8004084:	f04f 0300 	mov.w	r3, #0
 8004088:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800408c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004090:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004094:	4692      	mov	sl, r2
 8004096:	469b      	mov	fp, r3
 8004098:	4643      	mov	r3, r8
 800409a:	eb1a 0303 	adds.w	r3, sl, r3
 800409e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040a2:	464b      	mov	r3, r9
 80040a4:	eb4b 0303 	adc.w	r3, fp, r3
 80040a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80040c0:	460b      	mov	r3, r1
 80040c2:	18db      	adds	r3, r3, r3
 80040c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80040c6:	4613      	mov	r3, r2
 80040c8:	eb42 0303 	adc.w	r3, r2, r3
 80040cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80040d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80040d6:	f7fc fd11 	bl	8000afc <__aeabi_uldivmod>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	4b3b      	ldr	r3, [pc, #236]	@ (80041d0 <UART_SetConfig+0x2d4>)
 80040e2:	fba3 2301 	umull	r2, r3, r3, r1
 80040e6:	095b      	lsrs	r3, r3, #5
 80040e8:	2264      	movs	r2, #100	@ 0x64
 80040ea:	fb02 f303 	mul.w	r3, r2, r3
 80040ee:	1acb      	subs	r3, r1, r3
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80040f6:	4b36      	ldr	r3, [pc, #216]	@ (80041d0 <UART_SetConfig+0x2d4>)
 80040f8:	fba3 2302 	umull	r2, r3, r3, r2
 80040fc:	095b      	lsrs	r3, r3, #5
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004104:	441c      	add	r4, r3
 8004106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800410a:	2200      	movs	r2, #0
 800410c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004110:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004114:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004118:	4642      	mov	r2, r8
 800411a:	464b      	mov	r3, r9
 800411c:	1891      	adds	r1, r2, r2
 800411e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004120:	415b      	adcs	r3, r3
 8004122:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004124:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004128:	4641      	mov	r1, r8
 800412a:	1851      	adds	r1, r2, r1
 800412c:	6339      	str	r1, [r7, #48]	@ 0x30
 800412e:	4649      	mov	r1, r9
 8004130:	414b      	adcs	r3, r1
 8004132:	637b      	str	r3, [r7, #52]	@ 0x34
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004140:	4659      	mov	r1, fp
 8004142:	00cb      	lsls	r3, r1, #3
 8004144:	4651      	mov	r1, sl
 8004146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800414a:	4651      	mov	r1, sl
 800414c:	00ca      	lsls	r2, r1, #3
 800414e:	4610      	mov	r0, r2
 8004150:	4619      	mov	r1, r3
 8004152:	4603      	mov	r3, r0
 8004154:	4642      	mov	r2, r8
 8004156:	189b      	adds	r3, r3, r2
 8004158:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800415c:	464b      	mov	r3, r9
 800415e:	460a      	mov	r2, r1
 8004160:	eb42 0303 	adc.w	r3, r2, r3
 8004164:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004174:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004178:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800417c:	460b      	mov	r3, r1
 800417e:	18db      	adds	r3, r3, r3
 8004180:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004182:	4613      	mov	r3, r2
 8004184:	eb42 0303 	adc.w	r3, r2, r3
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800418a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800418e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004192:	f7fc fcb3 	bl	8000afc <__aeabi_uldivmod>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <UART_SetConfig+0x2d4>)
 800419c:	fba3 1302 	umull	r1, r3, r3, r2
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	2164      	movs	r1, #100	@ 0x64
 80041a4:	fb01 f303 	mul.w	r3, r1, r3
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	3332      	adds	r3, #50	@ 0x32
 80041ae:	4a08      	ldr	r2, [pc, #32]	@ (80041d0 <UART_SetConfig+0x2d4>)
 80041b0:	fba2 2303 	umull	r2, r3, r2, r3
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	f003 0207 	and.w	r2, r3, #7
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4422      	add	r2, r4
 80041c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041c4:	e106      	b.n	80043d4 <UART_SetConfig+0x4d8>
 80041c6:	bf00      	nop
 80041c8:	40011000 	.word	0x40011000
 80041cc:	40011400 	.word	0x40011400
 80041d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041d8:	2200      	movs	r2, #0
 80041da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80041e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80041e6:	4642      	mov	r2, r8
 80041e8:	464b      	mov	r3, r9
 80041ea:	1891      	adds	r1, r2, r2
 80041ec:	6239      	str	r1, [r7, #32]
 80041ee:	415b      	adcs	r3, r3
 80041f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80041f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041f6:	4641      	mov	r1, r8
 80041f8:	1854      	adds	r4, r2, r1
 80041fa:	4649      	mov	r1, r9
 80041fc:	eb43 0501 	adc.w	r5, r3, r1
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	00eb      	lsls	r3, r5, #3
 800420a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800420e:	00e2      	lsls	r2, r4, #3
 8004210:	4614      	mov	r4, r2
 8004212:	461d      	mov	r5, r3
 8004214:	4643      	mov	r3, r8
 8004216:	18e3      	adds	r3, r4, r3
 8004218:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800421c:	464b      	mov	r3, r9
 800421e:	eb45 0303 	adc.w	r3, r5, r3
 8004222:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004232:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004236:	f04f 0200 	mov.w	r2, #0
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004242:	4629      	mov	r1, r5
 8004244:	008b      	lsls	r3, r1, #2
 8004246:	4621      	mov	r1, r4
 8004248:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800424c:	4621      	mov	r1, r4
 800424e:	008a      	lsls	r2, r1, #2
 8004250:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004254:	f7fc fc52 	bl	8000afc <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4b60      	ldr	r3, [pc, #384]	@ (80043e0 <UART_SetConfig+0x4e4>)
 800425e:	fba3 2302 	umull	r2, r3, r3, r2
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	011c      	lsls	r4, r3, #4
 8004266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800426a:	2200      	movs	r2, #0
 800426c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004270:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004274:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004278:	4642      	mov	r2, r8
 800427a:	464b      	mov	r3, r9
 800427c:	1891      	adds	r1, r2, r2
 800427e:	61b9      	str	r1, [r7, #24]
 8004280:	415b      	adcs	r3, r3
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004288:	4641      	mov	r1, r8
 800428a:	1851      	adds	r1, r2, r1
 800428c:	6139      	str	r1, [r7, #16]
 800428e:	4649      	mov	r1, r9
 8004290:	414b      	adcs	r3, r1
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	f04f 0200 	mov.w	r2, #0
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a0:	4659      	mov	r1, fp
 80042a2:	00cb      	lsls	r3, r1, #3
 80042a4:	4651      	mov	r1, sl
 80042a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042aa:	4651      	mov	r1, sl
 80042ac:	00ca      	lsls	r2, r1, #3
 80042ae:	4610      	mov	r0, r2
 80042b0:	4619      	mov	r1, r3
 80042b2:	4603      	mov	r3, r0
 80042b4:	4642      	mov	r2, r8
 80042b6:	189b      	adds	r3, r3, r2
 80042b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042bc:	464b      	mov	r3, r9
 80042be:	460a      	mov	r2, r1
 80042c0:	eb42 0303 	adc.w	r3, r2, r3
 80042c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80042e0:	4649      	mov	r1, r9
 80042e2:	008b      	lsls	r3, r1, #2
 80042e4:	4641      	mov	r1, r8
 80042e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ea:	4641      	mov	r1, r8
 80042ec:	008a      	lsls	r2, r1, #2
 80042ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80042f2:	f7fc fc03 	bl	8000afc <__aeabi_uldivmod>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	4b38      	ldr	r3, [pc, #224]	@ (80043e0 <UART_SetConfig+0x4e4>)
 80042fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2264      	movs	r2, #100	@ 0x64
 8004306:	fb02 f303 	mul.w	r3, r2, r3
 800430a:	1acb      	subs	r3, r1, r3
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	3332      	adds	r3, #50	@ 0x32
 8004310:	4a33      	ldr	r2, [pc, #204]	@ (80043e0 <UART_SetConfig+0x4e4>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800431c:	441c      	add	r4, r3
 800431e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004322:	2200      	movs	r2, #0
 8004324:	673b      	str	r3, [r7, #112]	@ 0x70
 8004326:	677a      	str	r2, [r7, #116]	@ 0x74
 8004328:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	1891      	adds	r1, r2, r2
 8004332:	60b9      	str	r1, [r7, #8]
 8004334:	415b      	adcs	r3, r3
 8004336:	60fb      	str	r3, [r7, #12]
 8004338:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800433c:	4641      	mov	r1, r8
 800433e:	1851      	adds	r1, r2, r1
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	4649      	mov	r1, r9
 8004344:	414b      	adcs	r3, r1
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	f04f 0200 	mov.w	r2, #0
 800434c:	f04f 0300 	mov.w	r3, #0
 8004350:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004354:	4659      	mov	r1, fp
 8004356:	00cb      	lsls	r3, r1, #3
 8004358:	4651      	mov	r1, sl
 800435a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800435e:	4651      	mov	r1, sl
 8004360:	00ca      	lsls	r2, r1, #3
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	4603      	mov	r3, r0
 8004368:	4642      	mov	r2, r8
 800436a:	189b      	adds	r3, r3, r2
 800436c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800436e:	464b      	mov	r3, r9
 8004370:	460a      	mov	r2, r1
 8004372:	eb42 0303 	adc.w	r3, r2, r3
 8004376:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	663b      	str	r3, [r7, #96]	@ 0x60
 8004382:	667a      	str	r2, [r7, #100]	@ 0x64
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004390:	4649      	mov	r1, r9
 8004392:	008b      	lsls	r3, r1, #2
 8004394:	4641      	mov	r1, r8
 8004396:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800439a:	4641      	mov	r1, r8
 800439c:	008a      	lsls	r2, r1, #2
 800439e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043a2:	f7fc fbab 	bl	8000afc <__aeabi_uldivmod>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <UART_SetConfig+0x4e4>)
 80043ac:	fba3 1302 	umull	r1, r3, r3, r2
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	2164      	movs	r1, #100	@ 0x64
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	3332      	adds	r3, #50	@ 0x32
 80043be:	4a08      	ldr	r2, [pc, #32]	@ (80043e0 <UART_SetConfig+0x4e4>)
 80043c0:	fba2 2303 	umull	r2, r3, r2, r3
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	f003 020f 	and.w	r2, r3, #15
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4422      	add	r2, r4
 80043d2:	609a      	str	r2, [r3, #8]
}
 80043d4:	bf00      	nop
 80043d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80043da:	46bd      	mov	sp, r7
 80043dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e0:	51eb851f 	.word	0x51eb851f

080043e4 <siprintf>:
 80043e4:	b40e      	push	{r1, r2, r3}
 80043e6:	b500      	push	{lr}
 80043e8:	b09c      	sub	sp, #112	@ 0x70
 80043ea:	ab1d      	add	r3, sp, #116	@ 0x74
 80043ec:	9002      	str	r0, [sp, #8]
 80043ee:	9006      	str	r0, [sp, #24]
 80043f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80043f4:	4809      	ldr	r0, [pc, #36]	@ (800441c <siprintf+0x38>)
 80043f6:	9107      	str	r1, [sp, #28]
 80043f8:	9104      	str	r1, [sp, #16]
 80043fa:	4909      	ldr	r1, [pc, #36]	@ (8004420 <siprintf+0x3c>)
 80043fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004400:	9105      	str	r1, [sp, #20]
 8004402:	6800      	ldr	r0, [r0, #0]
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	a902      	add	r1, sp, #8
 8004408:	f000 f912 	bl	8004630 <_svfiprintf_r>
 800440c:	9b02      	ldr	r3, [sp, #8]
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
 8004412:	b01c      	add	sp, #112	@ 0x70
 8004414:	f85d eb04 	ldr.w	lr, [sp], #4
 8004418:	b003      	add	sp, #12
 800441a:	4770      	bx	lr
 800441c:	20000018 	.word	0x20000018
 8004420:	ffff0208 	.word	0xffff0208

08004424 <siscanf>:
 8004424:	b40e      	push	{r1, r2, r3}
 8004426:	b530      	push	{r4, r5, lr}
 8004428:	b09c      	sub	sp, #112	@ 0x70
 800442a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800442c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004430:	f854 5b04 	ldr.w	r5, [r4], #4
 8004434:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004438:	9002      	str	r0, [sp, #8]
 800443a:	9006      	str	r0, [sp, #24]
 800443c:	f7fb fee8 	bl	8000210 <strlen>
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <siscanf+0x4c>)
 8004442:	9003      	str	r0, [sp, #12]
 8004444:	9007      	str	r0, [sp, #28]
 8004446:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004448:	480a      	ldr	r0, [pc, #40]	@ (8004474 <siscanf+0x50>)
 800444a:	9401      	str	r4, [sp, #4]
 800444c:	2300      	movs	r3, #0
 800444e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004450:	9314      	str	r3, [sp, #80]	@ 0x50
 8004452:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004456:	f8ad 3016 	strh.w	r3, [sp, #22]
 800445a:	462a      	mov	r2, r5
 800445c:	4623      	mov	r3, r4
 800445e:	a902      	add	r1, sp, #8
 8004460:	6800      	ldr	r0, [r0, #0]
 8004462:	f000 fa39 	bl	80048d8 <__ssvfiscanf_r>
 8004466:	b01c      	add	sp, #112	@ 0x70
 8004468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800446c:	b003      	add	sp, #12
 800446e:	4770      	bx	lr
 8004470:	08004479 	.word	0x08004479
 8004474:	20000018 	.word	0x20000018

08004478 <__seofread>:
 8004478:	2000      	movs	r0, #0
 800447a:	4770      	bx	lr

0800447c <memset>:
 800447c:	4402      	add	r2, r0
 800447e:	4603      	mov	r3, r0
 8004480:	4293      	cmp	r3, r2
 8004482:	d100      	bne.n	8004486 <memset+0xa>
 8004484:	4770      	bx	lr
 8004486:	f803 1b01 	strb.w	r1, [r3], #1
 800448a:	e7f9      	b.n	8004480 <memset+0x4>

0800448c <__errno>:
 800448c:	4b01      	ldr	r3, [pc, #4]	@ (8004494 <__errno+0x8>)
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	20000018 	.word	0x20000018

08004498 <__libc_init_array>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4d0d      	ldr	r5, [pc, #52]	@ (80044d0 <__libc_init_array+0x38>)
 800449c:	4c0d      	ldr	r4, [pc, #52]	@ (80044d4 <__libc_init_array+0x3c>)
 800449e:	1b64      	subs	r4, r4, r5
 80044a0:	10a4      	asrs	r4, r4, #2
 80044a2:	2600      	movs	r6, #0
 80044a4:	42a6      	cmp	r6, r4
 80044a6:	d109      	bne.n	80044bc <__libc_init_array+0x24>
 80044a8:	4d0b      	ldr	r5, [pc, #44]	@ (80044d8 <__libc_init_array+0x40>)
 80044aa:	4c0c      	ldr	r4, [pc, #48]	@ (80044dc <__libc_init_array+0x44>)
 80044ac:	f001 fe1a 	bl	80060e4 <_init>
 80044b0:	1b64      	subs	r4, r4, r5
 80044b2:	10a4      	asrs	r4, r4, #2
 80044b4:	2600      	movs	r6, #0
 80044b6:	42a6      	cmp	r6, r4
 80044b8:	d105      	bne.n	80044c6 <__libc_init_array+0x2e>
 80044ba:	bd70      	pop	{r4, r5, r6, pc}
 80044bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c0:	4798      	blx	r3
 80044c2:	3601      	adds	r6, #1
 80044c4:	e7ee      	b.n	80044a4 <__libc_init_array+0xc>
 80044c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80044ca:	4798      	blx	r3
 80044cc:	3601      	adds	r6, #1
 80044ce:	e7f2      	b.n	80044b6 <__libc_init_array+0x1e>
 80044d0:	080066d4 	.word	0x080066d4
 80044d4:	080066d4 	.word	0x080066d4
 80044d8:	080066d4 	.word	0x080066d4
 80044dc:	080066d8 	.word	0x080066d8

080044e0 <__retarget_lock_acquire_recursive>:
 80044e0:	4770      	bx	lr

080044e2 <__retarget_lock_release_recursive>:
 80044e2:	4770      	bx	lr

080044e4 <_free_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4605      	mov	r5, r0
 80044e8:	2900      	cmp	r1, #0
 80044ea:	d041      	beq.n	8004570 <_free_r+0x8c>
 80044ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044f0:	1f0c      	subs	r4, r1, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfb8      	it	lt
 80044f6:	18e4      	addlt	r4, r4, r3
 80044f8:	f000 ff1a 	bl	8005330 <__malloc_lock>
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <_free_r+0x90>)
 80044fe:	6813      	ldr	r3, [r2, #0]
 8004500:	b933      	cbnz	r3, 8004510 <_free_r+0x2c>
 8004502:	6063      	str	r3, [r4, #4]
 8004504:	6014      	str	r4, [r2, #0]
 8004506:	4628      	mov	r0, r5
 8004508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800450c:	f000 bf16 	b.w	800533c <__malloc_unlock>
 8004510:	42a3      	cmp	r3, r4
 8004512:	d908      	bls.n	8004526 <_free_r+0x42>
 8004514:	6820      	ldr	r0, [r4, #0]
 8004516:	1821      	adds	r1, r4, r0
 8004518:	428b      	cmp	r3, r1
 800451a:	bf01      	itttt	eq
 800451c:	6819      	ldreq	r1, [r3, #0]
 800451e:	685b      	ldreq	r3, [r3, #4]
 8004520:	1809      	addeq	r1, r1, r0
 8004522:	6021      	streq	r1, [r4, #0]
 8004524:	e7ed      	b.n	8004502 <_free_r+0x1e>
 8004526:	461a      	mov	r2, r3
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	b10b      	cbz	r3, 8004530 <_free_r+0x4c>
 800452c:	42a3      	cmp	r3, r4
 800452e:	d9fa      	bls.n	8004526 <_free_r+0x42>
 8004530:	6811      	ldr	r1, [r2, #0]
 8004532:	1850      	adds	r0, r2, r1
 8004534:	42a0      	cmp	r0, r4
 8004536:	d10b      	bne.n	8004550 <_free_r+0x6c>
 8004538:	6820      	ldr	r0, [r4, #0]
 800453a:	4401      	add	r1, r0
 800453c:	1850      	adds	r0, r2, r1
 800453e:	4283      	cmp	r3, r0
 8004540:	6011      	str	r1, [r2, #0]
 8004542:	d1e0      	bne.n	8004506 <_free_r+0x22>
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	6053      	str	r3, [r2, #4]
 800454a:	4408      	add	r0, r1
 800454c:	6010      	str	r0, [r2, #0]
 800454e:	e7da      	b.n	8004506 <_free_r+0x22>
 8004550:	d902      	bls.n	8004558 <_free_r+0x74>
 8004552:	230c      	movs	r3, #12
 8004554:	602b      	str	r3, [r5, #0]
 8004556:	e7d6      	b.n	8004506 <_free_r+0x22>
 8004558:	6820      	ldr	r0, [r4, #0]
 800455a:	1821      	adds	r1, r4, r0
 800455c:	428b      	cmp	r3, r1
 800455e:	bf04      	itt	eq
 8004560:	6819      	ldreq	r1, [r3, #0]
 8004562:	685b      	ldreq	r3, [r3, #4]
 8004564:	6063      	str	r3, [r4, #4]
 8004566:	bf04      	itt	eq
 8004568:	1809      	addeq	r1, r1, r0
 800456a:	6021      	streq	r1, [r4, #0]
 800456c:	6054      	str	r4, [r2, #4]
 800456e:	e7ca      	b.n	8004506 <_free_r+0x22>
 8004570:	bd38      	pop	{r3, r4, r5, pc}
 8004572:	bf00      	nop
 8004574:	20000420 	.word	0x20000420

08004578 <__ssputs_r>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	688e      	ldr	r6, [r1, #8]
 800457e:	461f      	mov	r7, r3
 8004580:	42be      	cmp	r6, r7
 8004582:	680b      	ldr	r3, [r1, #0]
 8004584:	4682      	mov	sl, r0
 8004586:	460c      	mov	r4, r1
 8004588:	4690      	mov	r8, r2
 800458a:	d82d      	bhi.n	80045e8 <__ssputs_r+0x70>
 800458c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004590:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004594:	d026      	beq.n	80045e4 <__ssputs_r+0x6c>
 8004596:	6965      	ldr	r5, [r4, #20]
 8004598:	6909      	ldr	r1, [r1, #16]
 800459a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800459e:	eba3 0901 	sub.w	r9, r3, r1
 80045a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045a6:	1c7b      	adds	r3, r7, #1
 80045a8:	444b      	add	r3, r9
 80045aa:	106d      	asrs	r5, r5, #1
 80045ac:	429d      	cmp	r5, r3
 80045ae:	bf38      	it	cc
 80045b0:	461d      	movcc	r5, r3
 80045b2:	0553      	lsls	r3, r2, #21
 80045b4:	d527      	bpl.n	8004606 <__ssputs_r+0x8e>
 80045b6:	4629      	mov	r1, r5
 80045b8:	f000 fb24 	bl	8004c04 <_malloc_r>
 80045bc:	4606      	mov	r6, r0
 80045be:	b360      	cbz	r0, 800461a <__ssputs_r+0xa2>
 80045c0:	6921      	ldr	r1, [r4, #16]
 80045c2:	464a      	mov	r2, r9
 80045c4:	f001 f83e 	bl	8005644 <memcpy>
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80045ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	6126      	str	r6, [r4, #16]
 80045d6:	6165      	str	r5, [r4, #20]
 80045d8:	444e      	add	r6, r9
 80045da:	eba5 0509 	sub.w	r5, r5, r9
 80045de:	6026      	str	r6, [r4, #0]
 80045e0:	60a5      	str	r5, [r4, #8]
 80045e2:	463e      	mov	r6, r7
 80045e4:	42be      	cmp	r6, r7
 80045e6:	d900      	bls.n	80045ea <__ssputs_r+0x72>
 80045e8:	463e      	mov	r6, r7
 80045ea:	6820      	ldr	r0, [r4, #0]
 80045ec:	4632      	mov	r2, r6
 80045ee:	4641      	mov	r1, r8
 80045f0:	f000 fffe 	bl	80055f0 <memmove>
 80045f4:	68a3      	ldr	r3, [r4, #8]
 80045f6:	1b9b      	subs	r3, r3, r6
 80045f8:	60a3      	str	r3, [r4, #8]
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	4433      	add	r3, r6
 80045fe:	6023      	str	r3, [r4, #0]
 8004600:	2000      	movs	r0, #0
 8004602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004606:	462a      	mov	r2, r5
 8004608:	f000 fed8 	bl	80053bc <_realloc_r>
 800460c:	4606      	mov	r6, r0
 800460e:	2800      	cmp	r0, #0
 8004610:	d1e0      	bne.n	80045d4 <__ssputs_r+0x5c>
 8004612:	6921      	ldr	r1, [r4, #16]
 8004614:	4650      	mov	r0, sl
 8004616:	f7ff ff65 	bl	80044e4 <_free_r>
 800461a:	230c      	movs	r3, #12
 800461c:	f8ca 3000 	str.w	r3, [sl]
 8004620:	89a3      	ldrh	r3, [r4, #12]
 8004622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004626:	81a3      	strh	r3, [r4, #12]
 8004628:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800462c:	e7e9      	b.n	8004602 <__ssputs_r+0x8a>
	...

08004630 <_svfiprintf_r>:
 8004630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004634:	4698      	mov	r8, r3
 8004636:	898b      	ldrh	r3, [r1, #12]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	b09d      	sub	sp, #116	@ 0x74
 800463c:	4607      	mov	r7, r0
 800463e:	460d      	mov	r5, r1
 8004640:	4614      	mov	r4, r2
 8004642:	d510      	bpl.n	8004666 <_svfiprintf_r+0x36>
 8004644:	690b      	ldr	r3, [r1, #16]
 8004646:	b973      	cbnz	r3, 8004666 <_svfiprintf_r+0x36>
 8004648:	2140      	movs	r1, #64	@ 0x40
 800464a:	f000 fadb 	bl	8004c04 <_malloc_r>
 800464e:	6028      	str	r0, [r5, #0]
 8004650:	6128      	str	r0, [r5, #16]
 8004652:	b930      	cbnz	r0, 8004662 <_svfiprintf_r+0x32>
 8004654:	230c      	movs	r3, #12
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800465c:	b01d      	add	sp, #116	@ 0x74
 800465e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004662:	2340      	movs	r3, #64	@ 0x40
 8004664:	616b      	str	r3, [r5, #20]
 8004666:	2300      	movs	r3, #0
 8004668:	9309      	str	r3, [sp, #36]	@ 0x24
 800466a:	2320      	movs	r3, #32
 800466c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004670:	f8cd 800c 	str.w	r8, [sp, #12]
 8004674:	2330      	movs	r3, #48	@ 0x30
 8004676:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004814 <_svfiprintf_r+0x1e4>
 800467a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800467e:	f04f 0901 	mov.w	r9, #1
 8004682:	4623      	mov	r3, r4
 8004684:	469a      	mov	sl, r3
 8004686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800468a:	b10a      	cbz	r2, 8004690 <_svfiprintf_r+0x60>
 800468c:	2a25      	cmp	r2, #37	@ 0x25
 800468e:	d1f9      	bne.n	8004684 <_svfiprintf_r+0x54>
 8004690:	ebba 0b04 	subs.w	fp, sl, r4
 8004694:	d00b      	beq.n	80046ae <_svfiprintf_r+0x7e>
 8004696:	465b      	mov	r3, fp
 8004698:	4622      	mov	r2, r4
 800469a:	4629      	mov	r1, r5
 800469c:	4638      	mov	r0, r7
 800469e:	f7ff ff6b 	bl	8004578 <__ssputs_r>
 80046a2:	3001      	adds	r0, #1
 80046a4:	f000 80a7 	beq.w	80047f6 <_svfiprintf_r+0x1c6>
 80046a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046aa:	445a      	add	r2, fp
 80046ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80046ae:	f89a 3000 	ldrb.w	r3, [sl]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 809f 	beq.w	80047f6 <_svfiprintf_r+0x1c6>
 80046b8:	2300      	movs	r3, #0
 80046ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046c2:	f10a 0a01 	add.w	sl, sl, #1
 80046c6:	9304      	str	r3, [sp, #16]
 80046c8:	9307      	str	r3, [sp, #28]
 80046ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80046ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80046d0:	4654      	mov	r4, sl
 80046d2:	2205      	movs	r2, #5
 80046d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d8:	484e      	ldr	r0, [pc, #312]	@ (8004814 <_svfiprintf_r+0x1e4>)
 80046da:	f7fb fda1 	bl	8000220 <memchr>
 80046de:	9a04      	ldr	r2, [sp, #16]
 80046e0:	b9d8      	cbnz	r0, 800471a <_svfiprintf_r+0xea>
 80046e2:	06d0      	lsls	r0, r2, #27
 80046e4:	bf44      	itt	mi
 80046e6:	2320      	movmi	r3, #32
 80046e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046ec:	0711      	lsls	r1, r2, #28
 80046ee:	bf44      	itt	mi
 80046f0:	232b      	movmi	r3, #43	@ 0x2b
 80046f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80046f6:	f89a 3000 	ldrb.w	r3, [sl]
 80046fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80046fc:	d015      	beq.n	800472a <_svfiprintf_r+0xfa>
 80046fe:	9a07      	ldr	r2, [sp, #28]
 8004700:	4654      	mov	r4, sl
 8004702:	2000      	movs	r0, #0
 8004704:	f04f 0c0a 	mov.w	ip, #10
 8004708:	4621      	mov	r1, r4
 800470a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800470e:	3b30      	subs	r3, #48	@ 0x30
 8004710:	2b09      	cmp	r3, #9
 8004712:	d94b      	bls.n	80047ac <_svfiprintf_r+0x17c>
 8004714:	b1b0      	cbz	r0, 8004744 <_svfiprintf_r+0x114>
 8004716:	9207      	str	r2, [sp, #28]
 8004718:	e014      	b.n	8004744 <_svfiprintf_r+0x114>
 800471a:	eba0 0308 	sub.w	r3, r0, r8
 800471e:	fa09 f303 	lsl.w	r3, r9, r3
 8004722:	4313      	orrs	r3, r2
 8004724:	9304      	str	r3, [sp, #16]
 8004726:	46a2      	mov	sl, r4
 8004728:	e7d2      	b.n	80046d0 <_svfiprintf_r+0xa0>
 800472a:	9b03      	ldr	r3, [sp, #12]
 800472c:	1d19      	adds	r1, r3, #4
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	9103      	str	r1, [sp, #12]
 8004732:	2b00      	cmp	r3, #0
 8004734:	bfbb      	ittet	lt
 8004736:	425b      	neglt	r3, r3
 8004738:	f042 0202 	orrlt.w	r2, r2, #2
 800473c:	9307      	strge	r3, [sp, #28]
 800473e:	9307      	strlt	r3, [sp, #28]
 8004740:	bfb8      	it	lt
 8004742:	9204      	strlt	r2, [sp, #16]
 8004744:	7823      	ldrb	r3, [r4, #0]
 8004746:	2b2e      	cmp	r3, #46	@ 0x2e
 8004748:	d10a      	bne.n	8004760 <_svfiprintf_r+0x130>
 800474a:	7863      	ldrb	r3, [r4, #1]
 800474c:	2b2a      	cmp	r3, #42	@ 0x2a
 800474e:	d132      	bne.n	80047b6 <_svfiprintf_r+0x186>
 8004750:	9b03      	ldr	r3, [sp, #12]
 8004752:	1d1a      	adds	r2, r3, #4
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	9203      	str	r2, [sp, #12]
 8004758:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800475c:	3402      	adds	r4, #2
 800475e:	9305      	str	r3, [sp, #20]
 8004760:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004824 <_svfiprintf_r+0x1f4>
 8004764:	7821      	ldrb	r1, [r4, #0]
 8004766:	2203      	movs	r2, #3
 8004768:	4650      	mov	r0, sl
 800476a:	f7fb fd59 	bl	8000220 <memchr>
 800476e:	b138      	cbz	r0, 8004780 <_svfiprintf_r+0x150>
 8004770:	9b04      	ldr	r3, [sp, #16]
 8004772:	eba0 000a 	sub.w	r0, r0, sl
 8004776:	2240      	movs	r2, #64	@ 0x40
 8004778:	4082      	lsls	r2, r0
 800477a:	4313      	orrs	r3, r2
 800477c:	3401      	adds	r4, #1
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004784:	4824      	ldr	r0, [pc, #144]	@ (8004818 <_svfiprintf_r+0x1e8>)
 8004786:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800478a:	2206      	movs	r2, #6
 800478c:	f7fb fd48 	bl	8000220 <memchr>
 8004790:	2800      	cmp	r0, #0
 8004792:	d036      	beq.n	8004802 <_svfiprintf_r+0x1d2>
 8004794:	4b21      	ldr	r3, [pc, #132]	@ (800481c <_svfiprintf_r+0x1ec>)
 8004796:	bb1b      	cbnz	r3, 80047e0 <_svfiprintf_r+0x1b0>
 8004798:	9b03      	ldr	r3, [sp, #12]
 800479a:	3307      	adds	r3, #7
 800479c:	f023 0307 	bic.w	r3, r3, #7
 80047a0:	3308      	adds	r3, #8
 80047a2:	9303      	str	r3, [sp, #12]
 80047a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047a6:	4433      	add	r3, r6
 80047a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80047aa:	e76a      	b.n	8004682 <_svfiprintf_r+0x52>
 80047ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b0:	460c      	mov	r4, r1
 80047b2:	2001      	movs	r0, #1
 80047b4:	e7a8      	b.n	8004708 <_svfiprintf_r+0xd8>
 80047b6:	2300      	movs	r3, #0
 80047b8:	3401      	adds	r4, #1
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	4619      	mov	r1, r3
 80047be:	f04f 0c0a 	mov.w	ip, #10
 80047c2:	4620      	mov	r0, r4
 80047c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047c8:	3a30      	subs	r2, #48	@ 0x30
 80047ca:	2a09      	cmp	r2, #9
 80047cc:	d903      	bls.n	80047d6 <_svfiprintf_r+0x1a6>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0c6      	beq.n	8004760 <_svfiprintf_r+0x130>
 80047d2:	9105      	str	r1, [sp, #20]
 80047d4:	e7c4      	b.n	8004760 <_svfiprintf_r+0x130>
 80047d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047da:	4604      	mov	r4, r0
 80047dc:	2301      	movs	r3, #1
 80047de:	e7f0      	b.n	80047c2 <_svfiprintf_r+0x192>
 80047e0:	ab03      	add	r3, sp, #12
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	462a      	mov	r2, r5
 80047e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004820 <_svfiprintf_r+0x1f0>)
 80047e8:	a904      	add	r1, sp, #16
 80047ea:	4638      	mov	r0, r7
 80047ec:	f3af 8000 	nop.w
 80047f0:	1c42      	adds	r2, r0, #1
 80047f2:	4606      	mov	r6, r0
 80047f4:	d1d6      	bne.n	80047a4 <_svfiprintf_r+0x174>
 80047f6:	89ab      	ldrh	r3, [r5, #12]
 80047f8:	065b      	lsls	r3, r3, #25
 80047fa:	f53f af2d 	bmi.w	8004658 <_svfiprintf_r+0x28>
 80047fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004800:	e72c      	b.n	800465c <_svfiprintf_r+0x2c>
 8004802:	ab03      	add	r3, sp, #12
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	462a      	mov	r2, r5
 8004808:	4b05      	ldr	r3, [pc, #20]	@ (8004820 <_svfiprintf_r+0x1f0>)
 800480a:	a904      	add	r1, sp, #16
 800480c:	4638      	mov	r0, r7
 800480e:	f000 fae7 	bl	8004de0 <_printf_i>
 8004812:	e7ed      	b.n	80047f0 <_svfiprintf_r+0x1c0>
 8004814:	080061ac 	.word	0x080061ac
 8004818:	080061b6 	.word	0x080061b6
 800481c:	00000000 	.word	0x00000000
 8004820:	08004579 	.word	0x08004579
 8004824:	080061b2 	.word	0x080061b2

08004828 <_sungetc_r>:
 8004828:	b538      	push	{r3, r4, r5, lr}
 800482a:	1c4b      	adds	r3, r1, #1
 800482c:	4614      	mov	r4, r2
 800482e:	d103      	bne.n	8004838 <_sungetc_r+0x10>
 8004830:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004834:	4628      	mov	r0, r5
 8004836:	bd38      	pop	{r3, r4, r5, pc}
 8004838:	8993      	ldrh	r3, [r2, #12]
 800483a:	f023 0320 	bic.w	r3, r3, #32
 800483e:	8193      	strh	r3, [r2, #12]
 8004840:	6853      	ldr	r3, [r2, #4]
 8004842:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004844:	b2cd      	uxtb	r5, r1
 8004846:	b18a      	cbz	r2, 800486c <_sungetc_r+0x44>
 8004848:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800484a:	429a      	cmp	r2, r3
 800484c:	dd08      	ble.n	8004860 <_sungetc_r+0x38>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	1e5a      	subs	r2, r3, #1
 8004852:	6022      	str	r2, [r4, #0]
 8004854:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	3301      	adds	r3, #1
 800485c:	6063      	str	r3, [r4, #4]
 800485e:	e7e9      	b.n	8004834 <_sungetc_r+0xc>
 8004860:	4621      	mov	r1, r4
 8004862:	f000 fd71 	bl	8005348 <__submore>
 8004866:	2800      	cmp	r0, #0
 8004868:	d0f1      	beq.n	800484e <_sungetc_r+0x26>
 800486a:	e7e1      	b.n	8004830 <_sungetc_r+0x8>
 800486c:	6921      	ldr	r1, [r4, #16]
 800486e:	6822      	ldr	r2, [r4, #0]
 8004870:	b141      	cbz	r1, 8004884 <_sungetc_r+0x5c>
 8004872:	4291      	cmp	r1, r2
 8004874:	d206      	bcs.n	8004884 <_sungetc_r+0x5c>
 8004876:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800487a:	42a9      	cmp	r1, r5
 800487c:	d102      	bne.n	8004884 <_sungetc_r+0x5c>
 800487e:	3a01      	subs	r2, #1
 8004880:	6022      	str	r2, [r4, #0]
 8004882:	e7ea      	b.n	800485a <_sungetc_r+0x32>
 8004884:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004888:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800488c:	6363      	str	r3, [r4, #52]	@ 0x34
 800488e:	2303      	movs	r3, #3
 8004890:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004892:	4623      	mov	r3, r4
 8004894:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004898:	6023      	str	r3, [r4, #0]
 800489a:	2301      	movs	r3, #1
 800489c:	e7de      	b.n	800485c <_sungetc_r+0x34>

0800489e <__ssrefill_r>:
 800489e:	b510      	push	{r4, lr}
 80048a0:	460c      	mov	r4, r1
 80048a2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80048a4:	b169      	cbz	r1, 80048c2 <__ssrefill_r+0x24>
 80048a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80048aa:	4299      	cmp	r1, r3
 80048ac:	d001      	beq.n	80048b2 <__ssrefill_r+0x14>
 80048ae:	f7ff fe19 	bl	80044e4 <_free_r>
 80048b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048b4:	6063      	str	r3, [r4, #4]
 80048b6:	2000      	movs	r0, #0
 80048b8:	6360      	str	r0, [r4, #52]	@ 0x34
 80048ba:	b113      	cbz	r3, 80048c2 <__ssrefill_r+0x24>
 80048bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80048be:	6023      	str	r3, [r4, #0]
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	6923      	ldr	r3, [r4, #16]
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	6063      	str	r3, [r4, #4]
 80048ca:	89a3      	ldrh	r3, [r4, #12]
 80048cc:	f043 0320 	orr.w	r3, r3, #32
 80048d0:	81a3      	strh	r3, [r4, #12]
 80048d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048d6:	e7f3      	b.n	80048c0 <__ssrefill_r+0x22>

080048d8 <__ssvfiscanf_r>:
 80048d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048dc:	460c      	mov	r4, r1
 80048de:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80048e2:	2100      	movs	r1, #0
 80048e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80048e8:	49a5      	ldr	r1, [pc, #660]	@ (8004b80 <__ssvfiscanf_r+0x2a8>)
 80048ea:	91a0      	str	r1, [sp, #640]	@ 0x280
 80048ec:	f10d 0804 	add.w	r8, sp, #4
 80048f0:	49a4      	ldr	r1, [pc, #656]	@ (8004b84 <__ssvfiscanf_r+0x2ac>)
 80048f2:	4fa5      	ldr	r7, [pc, #660]	@ (8004b88 <__ssvfiscanf_r+0x2b0>)
 80048f4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80048f8:	4606      	mov	r6, r0
 80048fa:	91a1      	str	r1, [sp, #644]	@ 0x284
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	7813      	ldrb	r3, [r2, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8158 	beq.w	8004bb6 <__ssvfiscanf_r+0x2de>
 8004906:	5cf9      	ldrb	r1, [r7, r3]
 8004908:	f011 0108 	ands.w	r1, r1, #8
 800490c:	f102 0501 	add.w	r5, r2, #1
 8004910:	d019      	beq.n	8004946 <__ssvfiscanf_r+0x6e>
 8004912:	6863      	ldr	r3, [r4, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	dd0f      	ble.n	8004938 <__ssvfiscanf_r+0x60>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	781a      	ldrb	r2, [r3, #0]
 800491c:	5cba      	ldrb	r2, [r7, r2]
 800491e:	0712      	lsls	r2, r2, #28
 8004920:	d401      	bmi.n	8004926 <__ssvfiscanf_r+0x4e>
 8004922:	462a      	mov	r2, r5
 8004924:	e7eb      	b.n	80048fe <__ssvfiscanf_r+0x26>
 8004926:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004928:	3201      	adds	r2, #1
 800492a:	9245      	str	r2, [sp, #276]	@ 0x114
 800492c:	6862      	ldr	r2, [r4, #4]
 800492e:	3301      	adds	r3, #1
 8004930:	3a01      	subs	r2, #1
 8004932:	6062      	str	r2, [r4, #4]
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	e7ec      	b.n	8004912 <__ssvfiscanf_r+0x3a>
 8004938:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800493a:	4621      	mov	r1, r4
 800493c:	4630      	mov	r0, r6
 800493e:	4798      	blx	r3
 8004940:	2800      	cmp	r0, #0
 8004942:	d0e9      	beq.n	8004918 <__ssvfiscanf_r+0x40>
 8004944:	e7ed      	b.n	8004922 <__ssvfiscanf_r+0x4a>
 8004946:	2b25      	cmp	r3, #37	@ 0x25
 8004948:	d012      	beq.n	8004970 <__ssvfiscanf_r+0x98>
 800494a:	4699      	mov	r9, r3
 800494c:	6863      	ldr	r3, [r4, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	f340 8093 	ble.w	8004a7a <__ssvfiscanf_r+0x1a2>
 8004954:	6822      	ldr	r2, [r4, #0]
 8004956:	7813      	ldrb	r3, [r2, #0]
 8004958:	454b      	cmp	r3, r9
 800495a:	f040 812c 	bne.w	8004bb6 <__ssvfiscanf_r+0x2de>
 800495e:	6863      	ldr	r3, [r4, #4]
 8004960:	3b01      	subs	r3, #1
 8004962:	6063      	str	r3, [r4, #4]
 8004964:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004966:	3201      	adds	r2, #1
 8004968:	3301      	adds	r3, #1
 800496a:	6022      	str	r2, [r4, #0]
 800496c:	9345      	str	r3, [sp, #276]	@ 0x114
 800496e:	e7d8      	b.n	8004922 <__ssvfiscanf_r+0x4a>
 8004970:	9141      	str	r1, [sp, #260]	@ 0x104
 8004972:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004974:	7853      	ldrb	r3, [r2, #1]
 8004976:	2b2a      	cmp	r3, #42	@ 0x2a
 8004978:	bf02      	ittt	eq
 800497a:	2310      	moveq	r3, #16
 800497c:	1c95      	addeq	r5, r2, #2
 800497e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004980:	220a      	movs	r2, #10
 8004982:	46a9      	mov	r9, r5
 8004984:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004988:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800498c:	2b09      	cmp	r3, #9
 800498e:	d91e      	bls.n	80049ce <__ssvfiscanf_r+0xf6>
 8004990:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8004b8c <__ssvfiscanf_r+0x2b4>
 8004994:	2203      	movs	r2, #3
 8004996:	4650      	mov	r0, sl
 8004998:	f7fb fc42 	bl	8000220 <memchr>
 800499c:	b138      	cbz	r0, 80049ae <__ssvfiscanf_r+0xd6>
 800499e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80049a0:	eba0 000a 	sub.w	r0, r0, sl
 80049a4:	2301      	movs	r3, #1
 80049a6:	4083      	lsls	r3, r0
 80049a8:	4313      	orrs	r3, r2
 80049aa:	9341      	str	r3, [sp, #260]	@ 0x104
 80049ac:	464d      	mov	r5, r9
 80049ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049b2:	2b78      	cmp	r3, #120	@ 0x78
 80049b4:	d806      	bhi.n	80049c4 <__ssvfiscanf_r+0xec>
 80049b6:	2b57      	cmp	r3, #87	@ 0x57
 80049b8:	d810      	bhi.n	80049dc <__ssvfiscanf_r+0x104>
 80049ba:	2b25      	cmp	r3, #37	@ 0x25
 80049bc:	d0c5      	beq.n	800494a <__ssvfiscanf_r+0x72>
 80049be:	d857      	bhi.n	8004a70 <__ssvfiscanf_r+0x198>
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d065      	beq.n	8004a90 <__ssvfiscanf_r+0x1b8>
 80049c4:	2303      	movs	r3, #3
 80049c6:	9347      	str	r3, [sp, #284]	@ 0x11c
 80049c8:	230a      	movs	r3, #10
 80049ca:	9342      	str	r3, [sp, #264]	@ 0x108
 80049cc:	e078      	b.n	8004ac0 <__ssvfiscanf_r+0x1e8>
 80049ce:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80049d0:	fb02 1103 	mla	r1, r2, r3, r1
 80049d4:	3930      	subs	r1, #48	@ 0x30
 80049d6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80049d8:	464d      	mov	r5, r9
 80049da:	e7d2      	b.n	8004982 <__ssvfiscanf_r+0xaa>
 80049dc:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80049e0:	2a20      	cmp	r2, #32
 80049e2:	d8ef      	bhi.n	80049c4 <__ssvfiscanf_r+0xec>
 80049e4:	a101      	add	r1, pc, #4	@ (adr r1, 80049ec <__ssvfiscanf_r+0x114>)
 80049e6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80049ea:	bf00      	nop
 80049ec:	08004a9f 	.word	0x08004a9f
 80049f0:	080049c5 	.word	0x080049c5
 80049f4:	080049c5 	.word	0x080049c5
 80049f8:	08004af9 	.word	0x08004af9
 80049fc:	080049c5 	.word	0x080049c5
 8004a00:	080049c5 	.word	0x080049c5
 8004a04:	080049c5 	.word	0x080049c5
 8004a08:	080049c5 	.word	0x080049c5
 8004a0c:	080049c5 	.word	0x080049c5
 8004a10:	080049c5 	.word	0x080049c5
 8004a14:	080049c5 	.word	0x080049c5
 8004a18:	08004b0f 	.word	0x08004b0f
 8004a1c:	08004af5 	.word	0x08004af5
 8004a20:	08004a77 	.word	0x08004a77
 8004a24:	08004a77 	.word	0x08004a77
 8004a28:	08004a77 	.word	0x08004a77
 8004a2c:	080049c5 	.word	0x080049c5
 8004a30:	08004ab1 	.word	0x08004ab1
 8004a34:	080049c5 	.word	0x080049c5
 8004a38:	080049c5 	.word	0x080049c5
 8004a3c:	080049c5 	.word	0x080049c5
 8004a40:	080049c5 	.word	0x080049c5
 8004a44:	08004b1f 	.word	0x08004b1f
 8004a48:	08004ab9 	.word	0x08004ab9
 8004a4c:	08004a97 	.word	0x08004a97
 8004a50:	080049c5 	.word	0x080049c5
 8004a54:	080049c5 	.word	0x080049c5
 8004a58:	08004b1b 	.word	0x08004b1b
 8004a5c:	080049c5 	.word	0x080049c5
 8004a60:	08004af5 	.word	0x08004af5
 8004a64:	080049c5 	.word	0x080049c5
 8004a68:	080049c5 	.word	0x080049c5
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	3b45      	subs	r3, #69	@ 0x45
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d8a6      	bhi.n	80049c4 <__ssvfiscanf_r+0xec>
 8004a76:	2305      	movs	r3, #5
 8004a78:	e021      	b.n	8004abe <__ssvfiscanf_r+0x1e6>
 8004a7a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004a7c:	4621      	mov	r1, r4
 8004a7e:	4630      	mov	r0, r6
 8004a80:	4798      	blx	r3
 8004a82:	2800      	cmp	r0, #0
 8004a84:	f43f af66 	beq.w	8004954 <__ssvfiscanf_r+0x7c>
 8004a88:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	f040 808b 	bne.w	8004ba6 <__ssvfiscanf_r+0x2ce>
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a94:	e08b      	b.n	8004bae <__ssvfiscanf_r+0x2d6>
 8004a96:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004a98:	f042 0220 	orr.w	r2, r2, #32
 8004a9c:	9241      	str	r2, [sp, #260]	@ 0x104
 8004a9e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004aa0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa4:	9241      	str	r2, [sp, #260]	@ 0x104
 8004aa6:	2210      	movs	r2, #16
 8004aa8:	2b6e      	cmp	r3, #110	@ 0x6e
 8004aaa:	9242      	str	r2, [sp, #264]	@ 0x108
 8004aac:	d902      	bls.n	8004ab4 <__ssvfiscanf_r+0x1dc>
 8004aae:	e005      	b.n	8004abc <__ssvfiscanf_r+0x1e4>
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	9342      	str	r3, [sp, #264]	@ 0x108
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e002      	b.n	8004abe <__ssvfiscanf_r+0x1e6>
 8004ab8:	2308      	movs	r3, #8
 8004aba:	9342      	str	r3, [sp, #264]	@ 0x108
 8004abc:	2304      	movs	r3, #4
 8004abe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004ac0:	6863      	ldr	r3, [r4, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	dd39      	ble.n	8004b3a <__ssvfiscanf_r+0x262>
 8004ac6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004ac8:	0659      	lsls	r1, r3, #25
 8004aca:	d404      	bmi.n	8004ad6 <__ssvfiscanf_r+0x1fe>
 8004acc:	6823      	ldr	r3, [r4, #0]
 8004ace:	781a      	ldrb	r2, [r3, #0]
 8004ad0:	5cba      	ldrb	r2, [r7, r2]
 8004ad2:	0712      	lsls	r2, r2, #28
 8004ad4:	d438      	bmi.n	8004b48 <__ssvfiscanf_r+0x270>
 8004ad6:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	dc47      	bgt.n	8004b6c <__ssvfiscanf_r+0x294>
 8004adc:	466b      	mov	r3, sp
 8004ade:	4622      	mov	r2, r4
 8004ae0:	a941      	add	r1, sp, #260	@ 0x104
 8004ae2:	4630      	mov	r0, r6
 8004ae4:	f000 fa9c 	bl	8005020 <_scanf_chars>
 8004ae8:	2801      	cmp	r0, #1
 8004aea:	d064      	beq.n	8004bb6 <__ssvfiscanf_r+0x2de>
 8004aec:	2802      	cmp	r0, #2
 8004aee:	f47f af18 	bne.w	8004922 <__ssvfiscanf_r+0x4a>
 8004af2:	e7c9      	b.n	8004a88 <__ssvfiscanf_r+0x1b0>
 8004af4:	220a      	movs	r2, #10
 8004af6:	e7d7      	b.n	8004aa8 <__ssvfiscanf_r+0x1d0>
 8004af8:	4629      	mov	r1, r5
 8004afa:	4640      	mov	r0, r8
 8004afc:	f000 fbde 	bl	80052bc <__sccl>
 8004b00:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004b02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b06:	9341      	str	r3, [sp, #260]	@ 0x104
 8004b08:	4605      	mov	r5, r0
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e7d7      	b.n	8004abe <__ssvfiscanf_r+0x1e6>
 8004b0e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8004b10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b14:	9341      	str	r3, [sp, #260]	@ 0x104
 8004b16:	2300      	movs	r3, #0
 8004b18:	e7d1      	b.n	8004abe <__ssvfiscanf_r+0x1e6>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e7cf      	b.n	8004abe <__ssvfiscanf_r+0x1e6>
 8004b1e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8004b20:	06c3      	lsls	r3, r0, #27
 8004b22:	f53f aefe 	bmi.w	8004922 <__ssvfiscanf_r+0x4a>
 8004b26:	9b00      	ldr	r3, [sp, #0]
 8004b28:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004b2a:	1d19      	adds	r1, r3, #4
 8004b2c:	9100      	str	r1, [sp, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	07c0      	lsls	r0, r0, #31
 8004b32:	bf4c      	ite	mi
 8004b34:	801a      	strhmi	r2, [r3, #0]
 8004b36:	601a      	strpl	r2, [r3, #0]
 8004b38:	e6f3      	b.n	8004922 <__ssvfiscanf_r+0x4a>
 8004b3a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004b3c:	4621      	mov	r1, r4
 8004b3e:	4630      	mov	r0, r6
 8004b40:	4798      	blx	r3
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d0bf      	beq.n	8004ac6 <__ssvfiscanf_r+0x1ee>
 8004b46:	e79f      	b.n	8004a88 <__ssvfiscanf_r+0x1b0>
 8004b48:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004b4a:	3201      	adds	r2, #1
 8004b4c:	9245      	str	r2, [sp, #276]	@ 0x114
 8004b4e:	6862      	ldr	r2, [r4, #4]
 8004b50:	3a01      	subs	r2, #1
 8004b52:	2a00      	cmp	r2, #0
 8004b54:	6062      	str	r2, [r4, #4]
 8004b56:	dd02      	ble.n	8004b5e <__ssvfiscanf_r+0x286>
 8004b58:	3301      	adds	r3, #1
 8004b5a:	6023      	str	r3, [r4, #0]
 8004b5c:	e7b6      	b.n	8004acc <__ssvfiscanf_r+0x1f4>
 8004b5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004b60:	4621      	mov	r1, r4
 8004b62:	4630      	mov	r0, r6
 8004b64:	4798      	blx	r3
 8004b66:	2800      	cmp	r0, #0
 8004b68:	d0b0      	beq.n	8004acc <__ssvfiscanf_r+0x1f4>
 8004b6a:	e78d      	b.n	8004a88 <__ssvfiscanf_r+0x1b0>
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	dc0f      	bgt.n	8004b90 <__ssvfiscanf_r+0x2b8>
 8004b70:	466b      	mov	r3, sp
 8004b72:	4622      	mov	r2, r4
 8004b74:	a941      	add	r1, sp, #260	@ 0x104
 8004b76:	4630      	mov	r0, r6
 8004b78:	f000 faac 	bl	80050d4 <_scanf_i>
 8004b7c:	e7b4      	b.n	8004ae8 <__ssvfiscanf_r+0x210>
 8004b7e:	bf00      	nop
 8004b80:	08004829 	.word	0x08004829
 8004b84:	0800489f 	.word	0x0800489f
 8004b88:	080061fb 	.word	0x080061fb
 8004b8c:	080061b2 	.word	0x080061b2
 8004b90:	4b0a      	ldr	r3, [pc, #40]	@ (8004bbc <__ssvfiscanf_r+0x2e4>)
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f43f aec5 	beq.w	8004922 <__ssvfiscanf_r+0x4a>
 8004b98:	466b      	mov	r3, sp
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	a941      	add	r1, sp, #260	@ 0x104
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	f3af 8000 	nop.w
 8004ba4:	e7a0      	b.n	8004ae8 <__ssvfiscanf_r+0x210>
 8004ba6:	89a3      	ldrh	r3, [r4, #12]
 8004ba8:	065b      	lsls	r3, r3, #25
 8004baa:	f53f af71 	bmi.w	8004a90 <__ssvfiscanf_r+0x1b8>
 8004bae:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8004bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004bb8:	e7f9      	b.n	8004bae <__ssvfiscanf_r+0x2d6>
 8004bba:	bf00      	nop
 8004bbc:	00000000 	.word	0x00000000

08004bc0 <sbrk_aligned>:
 8004bc0:	b570      	push	{r4, r5, r6, lr}
 8004bc2:	4e0f      	ldr	r6, [pc, #60]	@ (8004c00 <sbrk_aligned+0x40>)
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	6831      	ldr	r1, [r6, #0]
 8004bc8:	4605      	mov	r5, r0
 8004bca:	b911      	cbnz	r1, 8004bd2 <sbrk_aligned+0x12>
 8004bcc:	f000 fd2a 	bl	8005624 <_sbrk_r>
 8004bd0:	6030      	str	r0, [r6, #0]
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	f000 fd25 	bl	8005624 <_sbrk_r>
 8004bda:	1c43      	adds	r3, r0, #1
 8004bdc:	d103      	bne.n	8004be6 <sbrk_aligned+0x26>
 8004bde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004be2:	4620      	mov	r0, r4
 8004be4:	bd70      	pop	{r4, r5, r6, pc}
 8004be6:	1cc4      	adds	r4, r0, #3
 8004be8:	f024 0403 	bic.w	r4, r4, #3
 8004bec:	42a0      	cmp	r0, r4
 8004bee:	d0f8      	beq.n	8004be2 <sbrk_aligned+0x22>
 8004bf0:	1a21      	subs	r1, r4, r0
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 fd16 	bl	8005624 <_sbrk_r>
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d1f2      	bne.n	8004be2 <sbrk_aligned+0x22>
 8004bfc:	e7ef      	b.n	8004bde <sbrk_aligned+0x1e>
 8004bfe:	bf00      	nop
 8004c00:	2000041c 	.word	0x2000041c

08004c04 <_malloc_r>:
 8004c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c08:	1ccd      	adds	r5, r1, #3
 8004c0a:	f025 0503 	bic.w	r5, r5, #3
 8004c0e:	3508      	adds	r5, #8
 8004c10:	2d0c      	cmp	r5, #12
 8004c12:	bf38      	it	cc
 8004c14:	250c      	movcc	r5, #12
 8004c16:	2d00      	cmp	r5, #0
 8004c18:	4606      	mov	r6, r0
 8004c1a:	db01      	blt.n	8004c20 <_malloc_r+0x1c>
 8004c1c:	42a9      	cmp	r1, r5
 8004c1e:	d904      	bls.n	8004c2a <_malloc_r+0x26>
 8004c20:	230c      	movs	r3, #12
 8004c22:	6033      	str	r3, [r6, #0]
 8004c24:	2000      	movs	r0, #0
 8004c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d00 <_malloc_r+0xfc>
 8004c2e:	f000 fb7f 	bl	8005330 <__malloc_lock>
 8004c32:	f8d8 3000 	ldr.w	r3, [r8]
 8004c36:	461c      	mov	r4, r3
 8004c38:	bb44      	cbnz	r4, 8004c8c <_malloc_r+0x88>
 8004c3a:	4629      	mov	r1, r5
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f7ff ffbf 	bl	8004bc0 <sbrk_aligned>
 8004c42:	1c43      	adds	r3, r0, #1
 8004c44:	4604      	mov	r4, r0
 8004c46:	d158      	bne.n	8004cfa <_malloc_r+0xf6>
 8004c48:	f8d8 4000 	ldr.w	r4, [r8]
 8004c4c:	4627      	mov	r7, r4
 8004c4e:	2f00      	cmp	r7, #0
 8004c50:	d143      	bne.n	8004cda <_malloc_r+0xd6>
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	d04b      	beq.n	8004cee <_malloc_r+0xea>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	4639      	mov	r1, r7
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	eb04 0903 	add.w	r9, r4, r3
 8004c60:	f000 fce0 	bl	8005624 <_sbrk_r>
 8004c64:	4581      	cmp	r9, r0
 8004c66:	d142      	bne.n	8004cee <_malloc_r+0xea>
 8004c68:	6821      	ldr	r1, [r4, #0]
 8004c6a:	1a6d      	subs	r5, r5, r1
 8004c6c:	4629      	mov	r1, r5
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f7ff ffa6 	bl	8004bc0 <sbrk_aligned>
 8004c74:	3001      	adds	r0, #1
 8004c76:	d03a      	beq.n	8004cee <_malloc_r+0xea>
 8004c78:	6823      	ldr	r3, [r4, #0]
 8004c7a:	442b      	add	r3, r5
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	bb62      	cbnz	r2, 8004ce0 <_malloc_r+0xdc>
 8004c86:	f8c8 7000 	str.w	r7, [r8]
 8004c8a:	e00f      	b.n	8004cac <_malloc_r+0xa8>
 8004c8c:	6822      	ldr	r2, [r4, #0]
 8004c8e:	1b52      	subs	r2, r2, r5
 8004c90:	d420      	bmi.n	8004cd4 <_malloc_r+0xd0>
 8004c92:	2a0b      	cmp	r2, #11
 8004c94:	d917      	bls.n	8004cc6 <_malloc_r+0xc2>
 8004c96:	1961      	adds	r1, r4, r5
 8004c98:	42a3      	cmp	r3, r4
 8004c9a:	6025      	str	r5, [r4, #0]
 8004c9c:	bf18      	it	ne
 8004c9e:	6059      	strne	r1, [r3, #4]
 8004ca0:	6863      	ldr	r3, [r4, #4]
 8004ca2:	bf08      	it	eq
 8004ca4:	f8c8 1000 	streq.w	r1, [r8]
 8004ca8:	5162      	str	r2, [r4, r5]
 8004caa:	604b      	str	r3, [r1, #4]
 8004cac:	4630      	mov	r0, r6
 8004cae:	f000 fb45 	bl	800533c <__malloc_unlock>
 8004cb2:	f104 000b 	add.w	r0, r4, #11
 8004cb6:	1d23      	adds	r3, r4, #4
 8004cb8:	f020 0007 	bic.w	r0, r0, #7
 8004cbc:	1ac2      	subs	r2, r0, r3
 8004cbe:	bf1c      	itt	ne
 8004cc0:	1a1b      	subne	r3, r3, r0
 8004cc2:	50a3      	strne	r3, [r4, r2]
 8004cc4:	e7af      	b.n	8004c26 <_malloc_r+0x22>
 8004cc6:	6862      	ldr	r2, [r4, #4]
 8004cc8:	42a3      	cmp	r3, r4
 8004cca:	bf0c      	ite	eq
 8004ccc:	f8c8 2000 	streq.w	r2, [r8]
 8004cd0:	605a      	strne	r2, [r3, #4]
 8004cd2:	e7eb      	b.n	8004cac <_malloc_r+0xa8>
 8004cd4:	4623      	mov	r3, r4
 8004cd6:	6864      	ldr	r4, [r4, #4]
 8004cd8:	e7ae      	b.n	8004c38 <_malloc_r+0x34>
 8004cda:	463c      	mov	r4, r7
 8004cdc:	687f      	ldr	r7, [r7, #4]
 8004cde:	e7b6      	b.n	8004c4e <_malloc_r+0x4a>
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	d1fb      	bne.n	8004ce0 <_malloc_r+0xdc>
 8004ce8:	2300      	movs	r3, #0
 8004cea:	6053      	str	r3, [r2, #4]
 8004cec:	e7de      	b.n	8004cac <_malloc_r+0xa8>
 8004cee:	230c      	movs	r3, #12
 8004cf0:	6033      	str	r3, [r6, #0]
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f000 fb22 	bl	800533c <__malloc_unlock>
 8004cf8:	e794      	b.n	8004c24 <_malloc_r+0x20>
 8004cfa:	6005      	str	r5, [r0, #0]
 8004cfc:	e7d6      	b.n	8004cac <_malloc_r+0xa8>
 8004cfe:	bf00      	nop
 8004d00:	20000420 	.word	0x20000420

08004d04 <_printf_common>:
 8004d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	4616      	mov	r6, r2
 8004d0a:	4698      	mov	r8, r3
 8004d0c:	688a      	ldr	r2, [r1, #8]
 8004d0e:	690b      	ldr	r3, [r1, #16]
 8004d10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d14:	4293      	cmp	r3, r2
 8004d16:	bfb8      	it	lt
 8004d18:	4613      	movlt	r3, r2
 8004d1a:	6033      	str	r3, [r6, #0]
 8004d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d20:	4607      	mov	r7, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	b10a      	cbz	r2, 8004d2a <_printf_common+0x26>
 8004d26:	3301      	adds	r3, #1
 8004d28:	6033      	str	r3, [r6, #0]
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	0699      	lsls	r1, r3, #26
 8004d2e:	bf42      	ittt	mi
 8004d30:	6833      	ldrmi	r3, [r6, #0]
 8004d32:	3302      	addmi	r3, #2
 8004d34:	6033      	strmi	r3, [r6, #0]
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	f015 0506 	ands.w	r5, r5, #6
 8004d3c:	d106      	bne.n	8004d4c <_printf_common+0x48>
 8004d3e:	f104 0a19 	add.w	sl, r4, #25
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	6832      	ldr	r2, [r6, #0]
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	dc26      	bgt.n	8004d9a <_printf_common+0x96>
 8004d4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	3b00      	subs	r3, #0
 8004d54:	bf18      	it	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	0692      	lsls	r2, r2, #26
 8004d5a:	d42b      	bmi.n	8004db4 <_printf_common+0xb0>
 8004d5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d60:	4641      	mov	r1, r8
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c8      	blx	r9
 8004d66:	3001      	adds	r0, #1
 8004d68:	d01e      	beq.n	8004da8 <_printf_common+0xa4>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	6922      	ldr	r2, [r4, #16]
 8004d6e:	f003 0306 	and.w	r3, r3, #6
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	bf02      	ittt	eq
 8004d76:	68e5      	ldreq	r5, [r4, #12]
 8004d78:	6833      	ldreq	r3, [r6, #0]
 8004d7a:	1aed      	subeq	r5, r5, r3
 8004d7c:	68a3      	ldr	r3, [r4, #8]
 8004d7e:	bf0c      	ite	eq
 8004d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d84:	2500      	movne	r5, #0
 8004d86:	4293      	cmp	r3, r2
 8004d88:	bfc4      	itt	gt
 8004d8a:	1a9b      	subgt	r3, r3, r2
 8004d8c:	18ed      	addgt	r5, r5, r3
 8004d8e:	2600      	movs	r6, #0
 8004d90:	341a      	adds	r4, #26
 8004d92:	42b5      	cmp	r5, r6
 8004d94:	d11a      	bne.n	8004dcc <_printf_common+0xc8>
 8004d96:	2000      	movs	r0, #0
 8004d98:	e008      	b.n	8004dac <_printf_common+0xa8>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4652      	mov	r2, sl
 8004d9e:	4641      	mov	r1, r8
 8004da0:	4638      	mov	r0, r7
 8004da2:	47c8      	blx	r9
 8004da4:	3001      	adds	r0, #1
 8004da6:	d103      	bne.n	8004db0 <_printf_common+0xac>
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db0:	3501      	adds	r5, #1
 8004db2:	e7c6      	b.n	8004d42 <_printf_common+0x3e>
 8004db4:	18e1      	adds	r1, r4, r3
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	2030      	movs	r0, #48	@ 0x30
 8004dba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004dbe:	4422      	add	r2, r4
 8004dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004dc8:	3302      	adds	r3, #2
 8004dca:	e7c7      	b.n	8004d5c <_printf_common+0x58>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	4622      	mov	r2, r4
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	47c8      	blx	r9
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d0e6      	beq.n	8004da8 <_printf_common+0xa4>
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7d9      	b.n	8004d92 <_printf_common+0x8e>
	...

08004de0 <_printf_i>:
 8004de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	7e0f      	ldrb	r7, [r1, #24]
 8004de6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004de8:	2f78      	cmp	r7, #120	@ 0x78
 8004dea:	4691      	mov	r9, r2
 8004dec:	4680      	mov	r8, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	469a      	mov	sl, r3
 8004df2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004df6:	d807      	bhi.n	8004e08 <_printf_i+0x28>
 8004df8:	2f62      	cmp	r7, #98	@ 0x62
 8004dfa:	d80a      	bhi.n	8004e12 <_printf_i+0x32>
 8004dfc:	2f00      	cmp	r7, #0
 8004dfe:	f000 80d2 	beq.w	8004fa6 <_printf_i+0x1c6>
 8004e02:	2f58      	cmp	r7, #88	@ 0x58
 8004e04:	f000 80b9 	beq.w	8004f7a <_printf_i+0x19a>
 8004e08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e10:	e03a      	b.n	8004e88 <_printf_i+0xa8>
 8004e12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e16:	2b15      	cmp	r3, #21
 8004e18:	d8f6      	bhi.n	8004e08 <_printf_i+0x28>
 8004e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e20 <_printf_i+0x40>)
 8004e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e20:	08004e79 	.word	0x08004e79
 8004e24:	08004e8d 	.word	0x08004e8d
 8004e28:	08004e09 	.word	0x08004e09
 8004e2c:	08004e09 	.word	0x08004e09
 8004e30:	08004e09 	.word	0x08004e09
 8004e34:	08004e09 	.word	0x08004e09
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004e09 	.word	0x08004e09
 8004e40:	08004e09 	.word	0x08004e09
 8004e44:	08004e09 	.word	0x08004e09
 8004e48:	08004e09 	.word	0x08004e09
 8004e4c:	08004f8d 	.word	0x08004f8d
 8004e50:	08004eb7 	.word	0x08004eb7
 8004e54:	08004f47 	.word	0x08004f47
 8004e58:	08004e09 	.word	0x08004e09
 8004e5c:	08004e09 	.word	0x08004e09
 8004e60:	08004faf 	.word	0x08004faf
 8004e64:	08004e09 	.word	0x08004e09
 8004e68:	08004eb7 	.word	0x08004eb7
 8004e6c:	08004e09 	.word	0x08004e09
 8004e70:	08004e09 	.word	0x08004e09
 8004e74:	08004f4f 	.word	0x08004f4f
 8004e78:	6833      	ldr	r3, [r6, #0]
 8004e7a:	1d1a      	adds	r2, r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6032      	str	r2, [r6, #0]
 8004e80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e09d      	b.n	8004fc8 <_printf_i+0x1e8>
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	6820      	ldr	r0, [r4, #0]
 8004e90:	1d19      	adds	r1, r3, #4
 8004e92:	6031      	str	r1, [r6, #0]
 8004e94:	0606      	lsls	r6, r0, #24
 8004e96:	d501      	bpl.n	8004e9c <_printf_i+0xbc>
 8004e98:	681d      	ldr	r5, [r3, #0]
 8004e9a:	e003      	b.n	8004ea4 <_printf_i+0xc4>
 8004e9c:	0645      	lsls	r5, r0, #25
 8004e9e:	d5fb      	bpl.n	8004e98 <_printf_i+0xb8>
 8004ea0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ea4:	2d00      	cmp	r5, #0
 8004ea6:	da03      	bge.n	8004eb0 <_printf_i+0xd0>
 8004ea8:	232d      	movs	r3, #45	@ 0x2d
 8004eaa:	426d      	negs	r5, r5
 8004eac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004eb0:	4859      	ldr	r0, [pc, #356]	@ (8005018 <_printf_i+0x238>)
 8004eb2:	230a      	movs	r3, #10
 8004eb4:	e011      	b.n	8004eda <_printf_i+0xfa>
 8004eb6:	6821      	ldr	r1, [r4, #0]
 8004eb8:	6833      	ldr	r3, [r6, #0]
 8004eba:	0608      	lsls	r0, r1, #24
 8004ebc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ec0:	d402      	bmi.n	8004ec8 <_printf_i+0xe8>
 8004ec2:	0649      	lsls	r1, r1, #25
 8004ec4:	bf48      	it	mi
 8004ec6:	b2ad      	uxthmi	r5, r5
 8004ec8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eca:	4853      	ldr	r0, [pc, #332]	@ (8005018 <_printf_i+0x238>)
 8004ecc:	6033      	str	r3, [r6, #0]
 8004ece:	bf14      	ite	ne
 8004ed0:	230a      	movne	r3, #10
 8004ed2:	2308      	moveq	r3, #8
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004eda:	6866      	ldr	r6, [r4, #4]
 8004edc:	60a6      	str	r6, [r4, #8]
 8004ede:	2e00      	cmp	r6, #0
 8004ee0:	bfa2      	ittt	ge
 8004ee2:	6821      	ldrge	r1, [r4, #0]
 8004ee4:	f021 0104 	bicge.w	r1, r1, #4
 8004ee8:	6021      	strge	r1, [r4, #0]
 8004eea:	b90d      	cbnz	r5, 8004ef0 <_printf_i+0x110>
 8004eec:	2e00      	cmp	r6, #0
 8004eee:	d04b      	beq.n	8004f88 <_printf_i+0x1a8>
 8004ef0:	4616      	mov	r6, r2
 8004ef2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004ef6:	fb03 5711 	mls	r7, r3, r1, r5
 8004efa:	5dc7      	ldrb	r7, [r0, r7]
 8004efc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f00:	462f      	mov	r7, r5
 8004f02:	42bb      	cmp	r3, r7
 8004f04:	460d      	mov	r5, r1
 8004f06:	d9f4      	bls.n	8004ef2 <_printf_i+0x112>
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d10b      	bne.n	8004f24 <_printf_i+0x144>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	07df      	lsls	r7, r3, #31
 8004f10:	d508      	bpl.n	8004f24 <_printf_i+0x144>
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	6861      	ldr	r1, [r4, #4]
 8004f16:	4299      	cmp	r1, r3
 8004f18:	bfde      	ittt	le
 8004f1a:	2330      	movle	r3, #48	@ 0x30
 8004f1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f20:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f24:	1b92      	subs	r2, r2, r6
 8004f26:	6122      	str	r2, [r4, #16]
 8004f28:	f8cd a000 	str.w	sl, [sp]
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	aa03      	add	r2, sp, #12
 8004f30:	4621      	mov	r1, r4
 8004f32:	4640      	mov	r0, r8
 8004f34:	f7ff fee6 	bl	8004d04 <_printf_common>
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d14a      	bne.n	8004fd2 <_printf_i+0x1f2>
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f40:	b004      	add	sp, #16
 8004f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	f043 0320 	orr.w	r3, r3, #32
 8004f4c:	6023      	str	r3, [r4, #0]
 8004f4e:	4833      	ldr	r0, [pc, #204]	@ (800501c <_printf_i+0x23c>)
 8004f50:	2778      	movs	r7, #120	@ 0x78
 8004f52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	6831      	ldr	r1, [r6, #0]
 8004f5a:	061f      	lsls	r7, r3, #24
 8004f5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f60:	d402      	bmi.n	8004f68 <_printf_i+0x188>
 8004f62:	065f      	lsls	r7, r3, #25
 8004f64:	bf48      	it	mi
 8004f66:	b2ad      	uxthmi	r5, r5
 8004f68:	6031      	str	r1, [r6, #0]
 8004f6a:	07d9      	lsls	r1, r3, #31
 8004f6c:	bf44      	itt	mi
 8004f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004f72:	6023      	strmi	r3, [r4, #0]
 8004f74:	b11d      	cbz	r5, 8004f7e <_printf_i+0x19e>
 8004f76:	2310      	movs	r3, #16
 8004f78:	e7ac      	b.n	8004ed4 <_printf_i+0xf4>
 8004f7a:	4827      	ldr	r0, [pc, #156]	@ (8005018 <_printf_i+0x238>)
 8004f7c:	e7e9      	b.n	8004f52 <_printf_i+0x172>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	f023 0320 	bic.w	r3, r3, #32
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	e7f6      	b.n	8004f76 <_printf_i+0x196>
 8004f88:	4616      	mov	r6, r2
 8004f8a:	e7bd      	b.n	8004f08 <_printf_i+0x128>
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	6825      	ldr	r5, [r4, #0]
 8004f90:	6961      	ldr	r1, [r4, #20]
 8004f92:	1d18      	adds	r0, r3, #4
 8004f94:	6030      	str	r0, [r6, #0]
 8004f96:	062e      	lsls	r6, r5, #24
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	d501      	bpl.n	8004fa0 <_printf_i+0x1c0>
 8004f9c:	6019      	str	r1, [r3, #0]
 8004f9e:	e002      	b.n	8004fa6 <_printf_i+0x1c6>
 8004fa0:	0668      	lsls	r0, r5, #25
 8004fa2:	d5fb      	bpl.n	8004f9c <_printf_i+0x1bc>
 8004fa4:	8019      	strh	r1, [r3, #0]
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	6123      	str	r3, [r4, #16]
 8004faa:	4616      	mov	r6, r2
 8004fac:	e7bc      	b.n	8004f28 <_printf_i+0x148>
 8004fae:	6833      	ldr	r3, [r6, #0]
 8004fb0:	1d1a      	adds	r2, r3, #4
 8004fb2:	6032      	str	r2, [r6, #0]
 8004fb4:	681e      	ldr	r6, [r3, #0]
 8004fb6:	6862      	ldr	r2, [r4, #4]
 8004fb8:	2100      	movs	r1, #0
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f7fb f930 	bl	8000220 <memchr>
 8004fc0:	b108      	cbz	r0, 8004fc6 <_printf_i+0x1e6>
 8004fc2:	1b80      	subs	r0, r0, r6
 8004fc4:	6060      	str	r0, [r4, #4]
 8004fc6:	6863      	ldr	r3, [r4, #4]
 8004fc8:	6123      	str	r3, [r4, #16]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fd0:	e7aa      	b.n	8004f28 <_printf_i+0x148>
 8004fd2:	6923      	ldr	r3, [r4, #16]
 8004fd4:	4632      	mov	r2, r6
 8004fd6:	4649      	mov	r1, r9
 8004fd8:	4640      	mov	r0, r8
 8004fda:	47d0      	blx	sl
 8004fdc:	3001      	adds	r0, #1
 8004fde:	d0ad      	beq.n	8004f3c <_printf_i+0x15c>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	079b      	lsls	r3, r3, #30
 8004fe4:	d413      	bmi.n	800500e <_printf_i+0x22e>
 8004fe6:	68e0      	ldr	r0, [r4, #12]
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	4298      	cmp	r0, r3
 8004fec:	bfb8      	it	lt
 8004fee:	4618      	movlt	r0, r3
 8004ff0:	e7a6      	b.n	8004f40 <_printf_i+0x160>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4632      	mov	r2, r6
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	4640      	mov	r0, r8
 8004ffa:	47d0      	blx	sl
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d09d      	beq.n	8004f3c <_printf_i+0x15c>
 8005000:	3501      	adds	r5, #1
 8005002:	68e3      	ldr	r3, [r4, #12]
 8005004:	9903      	ldr	r1, [sp, #12]
 8005006:	1a5b      	subs	r3, r3, r1
 8005008:	42ab      	cmp	r3, r5
 800500a:	dcf2      	bgt.n	8004ff2 <_printf_i+0x212>
 800500c:	e7eb      	b.n	8004fe6 <_printf_i+0x206>
 800500e:	2500      	movs	r5, #0
 8005010:	f104 0619 	add.w	r6, r4, #25
 8005014:	e7f5      	b.n	8005002 <_printf_i+0x222>
 8005016:	bf00      	nop
 8005018:	080061bd 	.word	0x080061bd
 800501c:	080061ce 	.word	0x080061ce

08005020 <_scanf_chars>:
 8005020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005024:	4615      	mov	r5, r2
 8005026:	688a      	ldr	r2, [r1, #8]
 8005028:	4680      	mov	r8, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b932      	cbnz	r2, 800503c <_scanf_chars+0x1c>
 800502e:	698a      	ldr	r2, [r1, #24]
 8005030:	2a00      	cmp	r2, #0
 8005032:	bf14      	ite	ne
 8005034:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8005038:	2201      	moveq	r2, #1
 800503a:	608a      	str	r2, [r1, #8]
 800503c:	6822      	ldr	r2, [r4, #0]
 800503e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80050d0 <_scanf_chars+0xb0>
 8005042:	06d1      	lsls	r1, r2, #27
 8005044:	bf5f      	itttt	pl
 8005046:	681a      	ldrpl	r2, [r3, #0]
 8005048:	1d11      	addpl	r1, r2, #4
 800504a:	6019      	strpl	r1, [r3, #0]
 800504c:	6816      	ldrpl	r6, [r2, #0]
 800504e:	2700      	movs	r7, #0
 8005050:	69a0      	ldr	r0, [r4, #24]
 8005052:	b188      	cbz	r0, 8005078 <_scanf_chars+0x58>
 8005054:	2801      	cmp	r0, #1
 8005056:	d107      	bne.n	8005068 <_scanf_chars+0x48>
 8005058:	682b      	ldr	r3, [r5, #0]
 800505a:	781a      	ldrb	r2, [r3, #0]
 800505c:	6963      	ldr	r3, [r4, #20]
 800505e:	5c9b      	ldrb	r3, [r3, r2]
 8005060:	b953      	cbnz	r3, 8005078 <_scanf_chars+0x58>
 8005062:	2f00      	cmp	r7, #0
 8005064:	d031      	beq.n	80050ca <_scanf_chars+0xaa>
 8005066:	e022      	b.n	80050ae <_scanf_chars+0x8e>
 8005068:	2802      	cmp	r0, #2
 800506a:	d120      	bne.n	80050ae <_scanf_chars+0x8e>
 800506c:	682b      	ldr	r3, [r5, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005074:	071b      	lsls	r3, r3, #28
 8005076:	d41a      	bmi.n	80050ae <_scanf_chars+0x8e>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	06da      	lsls	r2, r3, #27
 800507c:	bf5e      	ittt	pl
 800507e:	682b      	ldrpl	r3, [r5, #0]
 8005080:	781b      	ldrbpl	r3, [r3, #0]
 8005082:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005086:	682a      	ldr	r2, [r5, #0]
 8005088:	686b      	ldr	r3, [r5, #4]
 800508a:	3201      	adds	r2, #1
 800508c:	602a      	str	r2, [r5, #0]
 800508e:	68a2      	ldr	r2, [r4, #8]
 8005090:	3b01      	subs	r3, #1
 8005092:	3a01      	subs	r2, #1
 8005094:	606b      	str	r3, [r5, #4]
 8005096:	3701      	adds	r7, #1
 8005098:	60a2      	str	r2, [r4, #8]
 800509a:	b142      	cbz	r2, 80050ae <_scanf_chars+0x8e>
 800509c:	2b00      	cmp	r3, #0
 800509e:	dcd7      	bgt.n	8005050 <_scanf_chars+0x30>
 80050a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80050a4:	4629      	mov	r1, r5
 80050a6:	4640      	mov	r0, r8
 80050a8:	4798      	blx	r3
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d0d0      	beq.n	8005050 <_scanf_chars+0x30>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	f013 0310 	ands.w	r3, r3, #16
 80050b4:	d105      	bne.n	80050c2 <_scanf_chars+0xa2>
 80050b6:	68e2      	ldr	r2, [r4, #12]
 80050b8:	3201      	adds	r2, #1
 80050ba:	60e2      	str	r2, [r4, #12]
 80050bc:	69a2      	ldr	r2, [r4, #24]
 80050be:	b102      	cbz	r2, 80050c2 <_scanf_chars+0xa2>
 80050c0:	7033      	strb	r3, [r6, #0]
 80050c2:	6923      	ldr	r3, [r4, #16]
 80050c4:	443b      	add	r3, r7
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	2000      	movs	r0, #0
 80050ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ce:	bf00      	nop
 80050d0:	080061fb 	.word	0x080061fb

080050d4 <_scanf_i>:
 80050d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d8:	4698      	mov	r8, r3
 80050da:	4b74      	ldr	r3, [pc, #464]	@ (80052ac <_scanf_i+0x1d8>)
 80050dc:	460c      	mov	r4, r1
 80050de:	4682      	mov	sl, r0
 80050e0:	4616      	mov	r6, r2
 80050e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80050e6:	b087      	sub	sp, #28
 80050e8:	ab03      	add	r3, sp, #12
 80050ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80050ee:	4b70      	ldr	r3, [pc, #448]	@ (80052b0 <_scanf_i+0x1dc>)
 80050f0:	69a1      	ldr	r1, [r4, #24]
 80050f2:	4a70      	ldr	r2, [pc, #448]	@ (80052b4 <_scanf_i+0x1e0>)
 80050f4:	2903      	cmp	r1, #3
 80050f6:	bf08      	it	eq
 80050f8:	461a      	moveq	r2, r3
 80050fa:	68a3      	ldr	r3, [r4, #8]
 80050fc:	9201      	str	r2, [sp, #4]
 80050fe:	1e5a      	subs	r2, r3, #1
 8005100:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005104:	bf88      	it	hi
 8005106:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800510a:	4627      	mov	r7, r4
 800510c:	bf82      	ittt	hi
 800510e:	eb03 0905 	addhi.w	r9, r3, r5
 8005112:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005116:	60a3      	strhi	r3, [r4, #8]
 8005118:	f857 3b1c 	ldr.w	r3, [r7], #28
 800511c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005120:	bf98      	it	ls
 8005122:	f04f 0900 	movls.w	r9, #0
 8005126:	6023      	str	r3, [r4, #0]
 8005128:	463d      	mov	r5, r7
 800512a:	f04f 0b00 	mov.w	fp, #0
 800512e:	6831      	ldr	r1, [r6, #0]
 8005130:	ab03      	add	r3, sp, #12
 8005132:	7809      	ldrb	r1, [r1, #0]
 8005134:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005138:	2202      	movs	r2, #2
 800513a:	f7fb f871 	bl	8000220 <memchr>
 800513e:	b328      	cbz	r0, 800518c <_scanf_i+0xb8>
 8005140:	f1bb 0f01 	cmp.w	fp, #1
 8005144:	d159      	bne.n	80051fa <_scanf_i+0x126>
 8005146:	6862      	ldr	r2, [r4, #4]
 8005148:	b92a      	cbnz	r2, 8005156 <_scanf_i+0x82>
 800514a:	6822      	ldr	r2, [r4, #0]
 800514c:	2108      	movs	r1, #8
 800514e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005152:	6061      	str	r1, [r4, #4]
 8005154:	6022      	str	r2, [r4, #0]
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800515c:	6022      	str	r2, [r4, #0]
 800515e:	68a2      	ldr	r2, [r4, #8]
 8005160:	1e51      	subs	r1, r2, #1
 8005162:	60a1      	str	r1, [r4, #8]
 8005164:	b192      	cbz	r2, 800518c <_scanf_i+0xb8>
 8005166:	6832      	ldr	r2, [r6, #0]
 8005168:	1c51      	adds	r1, r2, #1
 800516a:	6031      	str	r1, [r6, #0]
 800516c:	7812      	ldrb	r2, [r2, #0]
 800516e:	f805 2b01 	strb.w	r2, [r5], #1
 8005172:	6872      	ldr	r2, [r6, #4]
 8005174:	3a01      	subs	r2, #1
 8005176:	2a00      	cmp	r2, #0
 8005178:	6072      	str	r2, [r6, #4]
 800517a:	dc07      	bgt.n	800518c <_scanf_i+0xb8>
 800517c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005180:	4631      	mov	r1, r6
 8005182:	4650      	mov	r0, sl
 8005184:	4790      	blx	r2
 8005186:	2800      	cmp	r0, #0
 8005188:	f040 8085 	bne.w	8005296 <_scanf_i+0x1c2>
 800518c:	f10b 0b01 	add.w	fp, fp, #1
 8005190:	f1bb 0f03 	cmp.w	fp, #3
 8005194:	d1cb      	bne.n	800512e <_scanf_i+0x5a>
 8005196:	6863      	ldr	r3, [r4, #4]
 8005198:	b90b      	cbnz	r3, 800519e <_scanf_i+0xca>
 800519a:	230a      	movs	r3, #10
 800519c:	6063      	str	r3, [r4, #4]
 800519e:	6863      	ldr	r3, [r4, #4]
 80051a0:	4945      	ldr	r1, [pc, #276]	@ (80052b8 <_scanf_i+0x1e4>)
 80051a2:	6960      	ldr	r0, [r4, #20]
 80051a4:	1ac9      	subs	r1, r1, r3
 80051a6:	f000 f889 	bl	80052bc <__sccl>
 80051aa:	f04f 0b00 	mov.w	fp, #0
 80051ae:	68a3      	ldr	r3, [r4, #8]
 80051b0:	6822      	ldr	r2, [r4, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d03d      	beq.n	8005232 <_scanf_i+0x15e>
 80051b6:	6831      	ldr	r1, [r6, #0]
 80051b8:	6960      	ldr	r0, [r4, #20]
 80051ba:	f891 c000 	ldrb.w	ip, [r1]
 80051be:	f810 000c 	ldrb.w	r0, [r0, ip]
 80051c2:	2800      	cmp	r0, #0
 80051c4:	d035      	beq.n	8005232 <_scanf_i+0x15e>
 80051c6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80051ca:	d124      	bne.n	8005216 <_scanf_i+0x142>
 80051cc:	0510      	lsls	r0, r2, #20
 80051ce:	d522      	bpl.n	8005216 <_scanf_i+0x142>
 80051d0:	f10b 0b01 	add.w	fp, fp, #1
 80051d4:	f1b9 0f00 	cmp.w	r9, #0
 80051d8:	d003      	beq.n	80051e2 <_scanf_i+0x10e>
 80051da:	3301      	adds	r3, #1
 80051dc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80051e0:	60a3      	str	r3, [r4, #8]
 80051e2:	6873      	ldr	r3, [r6, #4]
 80051e4:	3b01      	subs	r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	6073      	str	r3, [r6, #4]
 80051ea:	dd1b      	ble.n	8005224 <_scanf_i+0x150>
 80051ec:	6833      	ldr	r3, [r6, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	68a3      	ldr	r3, [r4, #8]
 80051f4:	3b01      	subs	r3, #1
 80051f6:	60a3      	str	r3, [r4, #8]
 80051f8:	e7d9      	b.n	80051ae <_scanf_i+0xda>
 80051fa:	f1bb 0f02 	cmp.w	fp, #2
 80051fe:	d1ae      	bne.n	800515e <_scanf_i+0x8a>
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005206:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800520a:	d1bf      	bne.n	800518c <_scanf_i+0xb8>
 800520c:	2110      	movs	r1, #16
 800520e:	6061      	str	r1, [r4, #4]
 8005210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005214:	e7a2      	b.n	800515c <_scanf_i+0x88>
 8005216:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800521a:	6022      	str	r2, [r4, #0]
 800521c:	780b      	ldrb	r3, [r1, #0]
 800521e:	f805 3b01 	strb.w	r3, [r5], #1
 8005222:	e7de      	b.n	80051e2 <_scanf_i+0x10e>
 8005224:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005228:	4631      	mov	r1, r6
 800522a:	4650      	mov	r0, sl
 800522c:	4798      	blx	r3
 800522e:	2800      	cmp	r0, #0
 8005230:	d0df      	beq.n	80051f2 <_scanf_i+0x11e>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	05d9      	lsls	r1, r3, #23
 8005236:	d50d      	bpl.n	8005254 <_scanf_i+0x180>
 8005238:	42bd      	cmp	r5, r7
 800523a:	d909      	bls.n	8005250 <_scanf_i+0x17c>
 800523c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005240:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005244:	4632      	mov	r2, r6
 8005246:	4650      	mov	r0, sl
 8005248:	4798      	blx	r3
 800524a:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800524e:	464d      	mov	r5, r9
 8005250:	42bd      	cmp	r5, r7
 8005252:	d028      	beq.n	80052a6 <_scanf_i+0x1d2>
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	f012 0210 	ands.w	r2, r2, #16
 800525a:	d113      	bne.n	8005284 <_scanf_i+0x1b0>
 800525c:	702a      	strb	r2, [r5, #0]
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	9e01      	ldr	r6, [sp, #4]
 8005262:	4639      	mov	r1, r7
 8005264:	4650      	mov	r0, sl
 8005266:	47b0      	blx	r6
 8005268:	f8d8 3000 	ldr.w	r3, [r8]
 800526c:	6821      	ldr	r1, [r4, #0]
 800526e:	1d1a      	adds	r2, r3, #4
 8005270:	f8c8 2000 	str.w	r2, [r8]
 8005274:	f011 0f20 	tst.w	r1, #32
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	d00f      	beq.n	800529c <_scanf_i+0x1c8>
 800527c:	6018      	str	r0, [r3, #0]
 800527e:	68e3      	ldr	r3, [r4, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60e3      	str	r3, [r4, #12]
 8005284:	6923      	ldr	r3, [r4, #16]
 8005286:	1bed      	subs	r5, r5, r7
 8005288:	445d      	add	r5, fp
 800528a:	442b      	add	r3, r5
 800528c:	6123      	str	r3, [r4, #16]
 800528e:	2000      	movs	r0, #0
 8005290:	b007      	add	sp, #28
 8005292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005296:	f04f 0b00 	mov.w	fp, #0
 800529a:	e7ca      	b.n	8005232 <_scanf_i+0x15e>
 800529c:	07ca      	lsls	r2, r1, #31
 800529e:	bf4c      	ite	mi
 80052a0:	8018      	strhmi	r0, [r3, #0]
 80052a2:	6018      	strpl	r0, [r3, #0]
 80052a4:	e7eb      	b.n	800527e <_scanf_i+0x1aa>
 80052a6:	2001      	movs	r0, #1
 80052a8:	e7f2      	b.n	8005290 <_scanf_i+0x1bc>
 80052aa:	bf00      	nop
 80052ac:	08006188 	.word	0x08006188
 80052b0:	0800550d 	.word	0x0800550d
 80052b4:	080055ed 	.word	0x080055ed
 80052b8:	080061ef 	.word	0x080061ef

080052bc <__sccl>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	780b      	ldrb	r3, [r1, #0]
 80052c0:	4604      	mov	r4, r0
 80052c2:	2b5e      	cmp	r3, #94	@ 0x5e
 80052c4:	bf0b      	itete	eq
 80052c6:	784b      	ldrbeq	r3, [r1, #1]
 80052c8:	1c4a      	addne	r2, r1, #1
 80052ca:	1c8a      	addeq	r2, r1, #2
 80052cc:	2100      	movne	r1, #0
 80052ce:	bf08      	it	eq
 80052d0:	2101      	moveq	r1, #1
 80052d2:	3801      	subs	r0, #1
 80052d4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80052d8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80052dc:	42a8      	cmp	r0, r5
 80052de:	d1fb      	bne.n	80052d8 <__sccl+0x1c>
 80052e0:	b90b      	cbnz	r3, 80052e6 <__sccl+0x2a>
 80052e2:	1e50      	subs	r0, r2, #1
 80052e4:	bd70      	pop	{r4, r5, r6, pc}
 80052e6:	f081 0101 	eor.w	r1, r1, #1
 80052ea:	54e1      	strb	r1, [r4, r3]
 80052ec:	4610      	mov	r0, r2
 80052ee:	4602      	mov	r2, r0
 80052f0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80052f4:	2d2d      	cmp	r5, #45	@ 0x2d
 80052f6:	d005      	beq.n	8005304 <__sccl+0x48>
 80052f8:	2d5d      	cmp	r5, #93	@ 0x5d
 80052fa:	d016      	beq.n	800532a <__sccl+0x6e>
 80052fc:	2d00      	cmp	r5, #0
 80052fe:	d0f1      	beq.n	80052e4 <__sccl+0x28>
 8005300:	462b      	mov	r3, r5
 8005302:	e7f2      	b.n	80052ea <__sccl+0x2e>
 8005304:	7846      	ldrb	r6, [r0, #1]
 8005306:	2e5d      	cmp	r6, #93	@ 0x5d
 8005308:	d0fa      	beq.n	8005300 <__sccl+0x44>
 800530a:	42b3      	cmp	r3, r6
 800530c:	dcf8      	bgt.n	8005300 <__sccl+0x44>
 800530e:	3002      	adds	r0, #2
 8005310:	461a      	mov	r2, r3
 8005312:	3201      	adds	r2, #1
 8005314:	4296      	cmp	r6, r2
 8005316:	54a1      	strb	r1, [r4, r2]
 8005318:	dcfb      	bgt.n	8005312 <__sccl+0x56>
 800531a:	1af2      	subs	r2, r6, r3
 800531c:	3a01      	subs	r2, #1
 800531e:	1c5d      	adds	r5, r3, #1
 8005320:	42b3      	cmp	r3, r6
 8005322:	bfa8      	it	ge
 8005324:	2200      	movge	r2, #0
 8005326:	18ab      	adds	r3, r5, r2
 8005328:	e7e1      	b.n	80052ee <__sccl+0x32>
 800532a:	4610      	mov	r0, r2
 800532c:	e7da      	b.n	80052e4 <__sccl+0x28>
	...

08005330 <__malloc_lock>:
 8005330:	4801      	ldr	r0, [pc, #4]	@ (8005338 <__malloc_lock+0x8>)
 8005332:	f7ff b8d5 	b.w	80044e0 <__retarget_lock_acquire_recursive>
 8005336:	bf00      	nop
 8005338:	20000418 	.word	0x20000418

0800533c <__malloc_unlock>:
 800533c:	4801      	ldr	r0, [pc, #4]	@ (8005344 <__malloc_unlock+0x8>)
 800533e:	f7ff b8d0 	b.w	80044e2 <__retarget_lock_release_recursive>
 8005342:	bf00      	nop
 8005344:	20000418 	.word	0x20000418

08005348 <__submore>:
 8005348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800534c:	460c      	mov	r4, r1
 800534e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005350:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005354:	4299      	cmp	r1, r3
 8005356:	d11d      	bne.n	8005394 <__submore+0x4c>
 8005358:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800535c:	f7ff fc52 	bl	8004c04 <_malloc_r>
 8005360:	b918      	cbnz	r0, 800536a <__submore+0x22>
 8005362:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005366:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800536a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800536e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005370:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8005374:	6360      	str	r0, [r4, #52]	@ 0x34
 8005376:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800537a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800537e:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005382:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005386:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800538a:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800538e:	6020      	str	r0, [r4, #0]
 8005390:	2000      	movs	r0, #0
 8005392:	e7e8      	b.n	8005366 <__submore+0x1e>
 8005394:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005396:	0077      	lsls	r7, r6, #1
 8005398:	463a      	mov	r2, r7
 800539a:	f000 f80f 	bl	80053bc <_realloc_r>
 800539e:	4605      	mov	r5, r0
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d0de      	beq.n	8005362 <__submore+0x1a>
 80053a4:	eb00 0806 	add.w	r8, r0, r6
 80053a8:	4601      	mov	r1, r0
 80053aa:	4632      	mov	r2, r6
 80053ac:	4640      	mov	r0, r8
 80053ae:	f000 f949 	bl	8005644 <memcpy>
 80053b2:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80053b6:	f8c4 8000 	str.w	r8, [r4]
 80053ba:	e7e9      	b.n	8005390 <__submore+0x48>

080053bc <_realloc_r>:
 80053bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053c0:	4680      	mov	r8, r0
 80053c2:	4615      	mov	r5, r2
 80053c4:	460c      	mov	r4, r1
 80053c6:	b921      	cbnz	r1, 80053d2 <_realloc_r+0x16>
 80053c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053cc:	4611      	mov	r1, r2
 80053ce:	f7ff bc19 	b.w	8004c04 <_malloc_r>
 80053d2:	b92a      	cbnz	r2, 80053e0 <_realloc_r+0x24>
 80053d4:	f7ff f886 	bl	80044e4 <_free_r>
 80053d8:	2400      	movs	r4, #0
 80053da:	4620      	mov	r0, r4
 80053dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053e0:	f000 f93e 	bl	8005660 <_malloc_usable_size_r>
 80053e4:	4285      	cmp	r5, r0
 80053e6:	4606      	mov	r6, r0
 80053e8:	d802      	bhi.n	80053f0 <_realloc_r+0x34>
 80053ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80053ee:	d8f4      	bhi.n	80053da <_realloc_r+0x1e>
 80053f0:	4629      	mov	r1, r5
 80053f2:	4640      	mov	r0, r8
 80053f4:	f7ff fc06 	bl	8004c04 <_malloc_r>
 80053f8:	4607      	mov	r7, r0
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d0ec      	beq.n	80053d8 <_realloc_r+0x1c>
 80053fe:	42b5      	cmp	r5, r6
 8005400:	462a      	mov	r2, r5
 8005402:	4621      	mov	r1, r4
 8005404:	bf28      	it	cs
 8005406:	4632      	movcs	r2, r6
 8005408:	f000 f91c 	bl	8005644 <memcpy>
 800540c:	4621      	mov	r1, r4
 800540e:	4640      	mov	r0, r8
 8005410:	f7ff f868 	bl	80044e4 <_free_r>
 8005414:	463c      	mov	r4, r7
 8005416:	e7e0      	b.n	80053da <_realloc_r+0x1e>

08005418 <_strtol_l.constprop.0>:
 8005418:	2b24      	cmp	r3, #36	@ 0x24
 800541a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800541e:	4686      	mov	lr, r0
 8005420:	4690      	mov	r8, r2
 8005422:	d801      	bhi.n	8005428 <_strtol_l.constprop.0+0x10>
 8005424:	2b01      	cmp	r3, #1
 8005426:	d106      	bne.n	8005436 <_strtol_l.constprop.0+0x1e>
 8005428:	f7ff f830 	bl	800448c <__errno>
 800542c:	2316      	movs	r3, #22
 800542e:	6003      	str	r3, [r0, #0]
 8005430:	2000      	movs	r0, #0
 8005432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005436:	4834      	ldr	r0, [pc, #208]	@ (8005508 <_strtol_l.constprop.0+0xf0>)
 8005438:	460d      	mov	r5, r1
 800543a:	462a      	mov	r2, r5
 800543c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005440:	5d06      	ldrb	r6, [r0, r4]
 8005442:	f016 0608 	ands.w	r6, r6, #8
 8005446:	d1f8      	bne.n	800543a <_strtol_l.constprop.0+0x22>
 8005448:	2c2d      	cmp	r4, #45	@ 0x2d
 800544a:	d12d      	bne.n	80054a8 <_strtol_l.constprop.0+0x90>
 800544c:	782c      	ldrb	r4, [r5, #0]
 800544e:	2601      	movs	r6, #1
 8005450:	1c95      	adds	r5, r2, #2
 8005452:	f033 0210 	bics.w	r2, r3, #16
 8005456:	d109      	bne.n	800546c <_strtol_l.constprop.0+0x54>
 8005458:	2c30      	cmp	r4, #48	@ 0x30
 800545a:	d12a      	bne.n	80054b2 <_strtol_l.constprop.0+0x9a>
 800545c:	782a      	ldrb	r2, [r5, #0]
 800545e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005462:	2a58      	cmp	r2, #88	@ 0x58
 8005464:	d125      	bne.n	80054b2 <_strtol_l.constprop.0+0x9a>
 8005466:	786c      	ldrb	r4, [r5, #1]
 8005468:	2310      	movs	r3, #16
 800546a:	3502      	adds	r5, #2
 800546c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005470:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005474:	2200      	movs	r2, #0
 8005476:	fbbc f9f3 	udiv	r9, ip, r3
 800547a:	4610      	mov	r0, r2
 800547c:	fb03 ca19 	mls	sl, r3, r9, ip
 8005480:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005484:	2f09      	cmp	r7, #9
 8005486:	d81b      	bhi.n	80054c0 <_strtol_l.constprop.0+0xa8>
 8005488:	463c      	mov	r4, r7
 800548a:	42a3      	cmp	r3, r4
 800548c:	dd27      	ble.n	80054de <_strtol_l.constprop.0+0xc6>
 800548e:	1c57      	adds	r7, r2, #1
 8005490:	d007      	beq.n	80054a2 <_strtol_l.constprop.0+0x8a>
 8005492:	4581      	cmp	r9, r0
 8005494:	d320      	bcc.n	80054d8 <_strtol_l.constprop.0+0xc0>
 8005496:	d101      	bne.n	800549c <_strtol_l.constprop.0+0x84>
 8005498:	45a2      	cmp	sl, r4
 800549a:	db1d      	blt.n	80054d8 <_strtol_l.constprop.0+0xc0>
 800549c:	fb00 4003 	mla	r0, r0, r3, r4
 80054a0:	2201      	movs	r2, #1
 80054a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054a6:	e7eb      	b.n	8005480 <_strtol_l.constprop.0+0x68>
 80054a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80054aa:	bf04      	itt	eq
 80054ac:	782c      	ldrbeq	r4, [r5, #0]
 80054ae:	1c95      	addeq	r5, r2, #2
 80054b0:	e7cf      	b.n	8005452 <_strtol_l.constprop.0+0x3a>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1da      	bne.n	800546c <_strtol_l.constprop.0+0x54>
 80054b6:	2c30      	cmp	r4, #48	@ 0x30
 80054b8:	bf0c      	ite	eq
 80054ba:	2308      	moveq	r3, #8
 80054bc:	230a      	movne	r3, #10
 80054be:	e7d5      	b.n	800546c <_strtol_l.constprop.0+0x54>
 80054c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80054c4:	2f19      	cmp	r7, #25
 80054c6:	d801      	bhi.n	80054cc <_strtol_l.constprop.0+0xb4>
 80054c8:	3c37      	subs	r4, #55	@ 0x37
 80054ca:	e7de      	b.n	800548a <_strtol_l.constprop.0+0x72>
 80054cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80054d0:	2f19      	cmp	r7, #25
 80054d2:	d804      	bhi.n	80054de <_strtol_l.constprop.0+0xc6>
 80054d4:	3c57      	subs	r4, #87	@ 0x57
 80054d6:	e7d8      	b.n	800548a <_strtol_l.constprop.0+0x72>
 80054d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054dc:	e7e1      	b.n	80054a2 <_strtol_l.constprop.0+0x8a>
 80054de:	1c53      	adds	r3, r2, #1
 80054e0:	d108      	bne.n	80054f4 <_strtol_l.constprop.0+0xdc>
 80054e2:	2322      	movs	r3, #34	@ 0x22
 80054e4:	f8ce 3000 	str.w	r3, [lr]
 80054e8:	4660      	mov	r0, ip
 80054ea:	f1b8 0f00 	cmp.w	r8, #0
 80054ee:	d0a0      	beq.n	8005432 <_strtol_l.constprop.0+0x1a>
 80054f0:	1e69      	subs	r1, r5, #1
 80054f2:	e006      	b.n	8005502 <_strtol_l.constprop.0+0xea>
 80054f4:	b106      	cbz	r6, 80054f8 <_strtol_l.constprop.0+0xe0>
 80054f6:	4240      	negs	r0, r0
 80054f8:	f1b8 0f00 	cmp.w	r8, #0
 80054fc:	d099      	beq.n	8005432 <_strtol_l.constprop.0+0x1a>
 80054fe:	2a00      	cmp	r2, #0
 8005500:	d1f6      	bne.n	80054f0 <_strtol_l.constprop.0+0xd8>
 8005502:	f8c8 1000 	str.w	r1, [r8]
 8005506:	e794      	b.n	8005432 <_strtol_l.constprop.0+0x1a>
 8005508:	080061fb 	.word	0x080061fb

0800550c <_strtol_r>:
 800550c:	f7ff bf84 	b.w	8005418 <_strtol_l.constprop.0>

08005510 <_strtoul_l.constprop.0>:
 8005510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005514:	4e34      	ldr	r6, [pc, #208]	@ (80055e8 <_strtoul_l.constprop.0+0xd8>)
 8005516:	4686      	mov	lr, r0
 8005518:	460d      	mov	r5, r1
 800551a:	4628      	mov	r0, r5
 800551c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005520:	5d37      	ldrb	r7, [r6, r4]
 8005522:	f017 0708 	ands.w	r7, r7, #8
 8005526:	d1f8      	bne.n	800551a <_strtoul_l.constprop.0+0xa>
 8005528:	2c2d      	cmp	r4, #45	@ 0x2d
 800552a:	d12f      	bne.n	800558c <_strtoul_l.constprop.0+0x7c>
 800552c:	782c      	ldrb	r4, [r5, #0]
 800552e:	2701      	movs	r7, #1
 8005530:	1c85      	adds	r5, r0, #2
 8005532:	f033 0010 	bics.w	r0, r3, #16
 8005536:	d109      	bne.n	800554c <_strtoul_l.constprop.0+0x3c>
 8005538:	2c30      	cmp	r4, #48	@ 0x30
 800553a:	d12c      	bne.n	8005596 <_strtoul_l.constprop.0+0x86>
 800553c:	7828      	ldrb	r0, [r5, #0]
 800553e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005542:	2858      	cmp	r0, #88	@ 0x58
 8005544:	d127      	bne.n	8005596 <_strtoul_l.constprop.0+0x86>
 8005546:	786c      	ldrb	r4, [r5, #1]
 8005548:	2310      	movs	r3, #16
 800554a:	3502      	adds	r5, #2
 800554c:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8005550:	2600      	movs	r6, #0
 8005552:	fbb8 f8f3 	udiv	r8, r8, r3
 8005556:	fb03 f908 	mul.w	r9, r3, r8
 800555a:	ea6f 0909 	mvn.w	r9, r9
 800555e:	4630      	mov	r0, r6
 8005560:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005564:	f1bc 0f09 	cmp.w	ip, #9
 8005568:	d81c      	bhi.n	80055a4 <_strtoul_l.constprop.0+0x94>
 800556a:	4664      	mov	r4, ip
 800556c:	42a3      	cmp	r3, r4
 800556e:	dd2a      	ble.n	80055c6 <_strtoul_l.constprop.0+0xb6>
 8005570:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8005574:	d007      	beq.n	8005586 <_strtoul_l.constprop.0+0x76>
 8005576:	4580      	cmp	r8, r0
 8005578:	d322      	bcc.n	80055c0 <_strtoul_l.constprop.0+0xb0>
 800557a:	d101      	bne.n	8005580 <_strtoul_l.constprop.0+0x70>
 800557c:	45a1      	cmp	r9, r4
 800557e:	db1f      	blt.n	80055c0 <_strtoul_l.constprop.0+0xb0>
 8005580:	fb00 4003 	mla	r0, r0, r3, r4
 8005584:	2601      	movs	r6, #1
 8005586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800558a:	e7e9      	b.n	8005560 <_strtoul_l.constprop.0+0x50>
 800558c:	2c2b      	cmp	r4, #43	@ 0x2b
 800558e:	bf04      	itt	eq
 8005590:	782c      	ldrbeq	r4, [r5, #0]
 8005592:	1c85      	addeq	r5, r0, #2
 8005594:	e7cd      	b.n	8005532 <_strtoul_l.constprop.0+0x22>
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1d8      	bne.n	800554c <_strtoul_l.constprop.0+0x3c>
 800559a:	2c30      	cmp	r4, #48	@ 0x30
 800559c:	bf0c      	ite	eq
 800559e:	2308      	moveq	r3, #8
 80055a0:	230a      	movne	r3, #10
 80055a2:	e7d3      	b.n	800554c <_strtoul_l.constprop.0+0x3c>
 80055a4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80055a8:	f1bc 0f19 	cmp.w	ip, #25
 80055ac:	d801      	bhi.n	80055b2 <_strtoul_l.constprop.0+0xa2>
 80055ae:	3c37      	subs	r4, #55	@ 0x37
 80055b0:	e7dc      	b.n	800556c <_strtoul_l.constprop.0+0x5c>
 80055b2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80055b6:	f1bc 0f19 	cmp.w	ip, #25
 80055ba:	d804      	bhi.n	80055c6 <_strtoul_l.constprop.0+0xb6>
 80055bc:	3c57      	subs	r4, #87	@ 0x57
 80055be:	e7d5      	b.n	800556c <_strtoul_l.constprop.0+0x5c>
 80055c0:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80055c4:	e7df      	b.n	8005586 <_strtoul_l.constprop.0+0x76>
 80055c6:	1c73      	adds	r3, r6, #1
 80055c8:	d106      	bne.n	80055d8 <_strtoul_l.constprop.0+0xc8>
 80055ca:	2322      	movs	r3, #34	@ 0x22
 80055cc:	f8ce 3000 	str.w	r3, [lr]
 80055d0:	4630      	mov	r0, r6
 80055d2:	b932      	cbnz	r2, 80055e2 <_strtoul_l.constprop.0+0xd2>
 80055d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d8:	b107      	cbz	r7, 80055dc <_strtoul_l.constprop.0+0xcc>
 80055da:	4240      	negs	r0, r0
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d0f9      	beq.n	80055d4 <_strtoul_l.constprop.0+0xc4>
 80055e0:	b106      	cbz	r6, 80055e4 <_strtoul_l.constprop.0+0xd4>
 80055e2:	1e69      	subs	r1, r5, #1
 80055e4:	6011      	str	r1, [r2, #0]
 80055e6:	e7f5      	b.n	80055d4 <_strtoul_l.constprop.0+0xc4>
 80055e8:	080061fb 	.word	0x080061fb

080055ec <_strtoul_r>:
 80055ec:	f7ff bf90 	b.w	8005510 <_strtoul_l.constprop.0>

080055f0 <memmove>:
 80055f0:	4288      	cmp	r0, r1
 80055f2:	b510      	push	{r4, lr}
 80055f4:	eb01 0402 	add.w	r4, r1, r2
 80055f8:	d902      	bls.n	8005600 <memmove+0x10>
 80055fa:	4284      	cmp	r4, r0
 80055fc:	4623      	mov	r3, r4
 80055fe:	d807      	bhi.n	8005610 <memmove+0x20>
 8005600:	1e43      	subs	r3, r0, #1
 8005602:	42a1      	cmp	r1, r4
 8005604:	d008      	beq.n	8005618 <memmove+0x28>
 8005606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800560a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800560e:	e7f8      	b.n	8005602 <memmove+0x12>
 8005610:	4402      	add	r2, r0
 8005612:	4601      	mov	r1, r0
 8005614:	428a      	cmp	r2, r1
 8005616:	d100      	bne.n	800561a <memmove+0x2a>
 8005618:	bd10      	pop	{r4, pc}
 800561a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800561e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005622:	e7f7      	b.n	8005614 <memmove+0x24>

08005624 <_sbrk_r>:
 8005624:	b538      	push	{r3, r4, r5, lr}
 8005626:	4d06      	ldr	r5, [pc, #24]	@ (8005640 <_sbrk_r+0x1c>)
 8005628:	2300      	movs	r3, #0
 800562a:	4604      	mov	r4, r0
 800562c:	4608      	mov	r0, r1
 800562e:	602b      	str	r3, [r5, #0]
 8005630:	f7fc f85a 	bl	80016e8 <_sbrk>
 8005634:	1c43      	adds	r3, r0, #1
 8005636:	d102      	bne.n	800563e <_sbrk_r+0x1a>
 8005638:	682b      	ldr	r3, [r5, #0]
 800563a:	b103      	cbz	r3, 800563e <_sbrk_r+0x1a>
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	bd38      	pop	{r3, r4, r5, pc}
 8005640:	20000414 	.word	0x20000414

08005644 <memcpy>:
 8005644:	440a      	add	r2, r1
 8005646:	4291      	cmp	r1, r2
 8005648:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800564c:	d100      	bne.n	8005650 <memcpy+0xc>
 800564e:	4770      	bx	lr
 8005650:	b510      	push	{r4, lr}
 8005652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800565a:	4291      	cmp	r1, r2
 800565c:	d1f9      	bne.n	8005652 <memcpy+0xe>
 800565e:	bd10      	pop	{r4, pc}

08005660 <_malloc_usable_size_r>:
 8005660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005664:	1f18      	subs	r0, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	bfbc      	itt	lt
 800566a:	580b      	ldrlt	r3, [r1, r0]
 800566c:	18c0      	addlt	r0, r0, r3
 800566e:	4770      	bx	lr

08005670 <sinf>:
 8005670:	ee10 3a10 	vmov	r3, s0
 8005674:	b507      	push	{r0, r1, r2, lr}
 8005676:	4a1f      	ldr	r2, [pc, #124]	@ (80056f4 <sinf+0x84>)
 8005678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800567c:	4293      	cmp	r3, r2
 800567e:	d807      	bhi.n	8005690 <sinf+0x20>
 8005680:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80056f8 <sinf+0x88>
 8005684:	2000      	movs	r0, #0
 8005686:	b003      	add	sp, #12
 8005688:	f85d eb04 	ldr.w	lr, [sp], #4
 800568c:	f000 b88e 	b.w	80057ac <__kernel_sinf>
 8005690:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005694:	d304      	bcc.n	80056a0 <sinf+0x30>
 8005696:	ee30 0a40 	vsub.f32	s0, s0, s0
 800569a:	b003      	add	sp, #12
 800569c:	f85d fb04 	ldr.w	pc, [sp], #4
 80056a0:	4668      	mov	r0, sp
 80056a2:	f000 f8cb 	bl	800583c <__ieee754_rem_pio2f>
 80056a6:	f000 0003 	and.w	r0, r0, #3
 80056aa:	2801      	cmp	r0, #1
 80056ac:	d00a      	beq.n	80056c4 <sinf+0x54>
 80056ae:	2802      	cmp	r0, #2
 80056b0:	d00f      	beq.n	80056d2 <sinf+0x62>
 80056b2:	b9c0      	cbnz	r0, 80056e6 <sinf+0x76>
 80056b4:	eddd 0a01 	vldr	s1, [sp, #4]
 80056b8:	ed9d 0a00 	vldr	s0, [sp]
 80056bc:	2001      	movs	r0, #1
 80056be:	f000 f875 	bl	80057ac <__kernel_sinf>
 80056c2:	e7ea      	b.n	800569a <sinf+0x2a>
 80056c4:	eddd 0a01 	vldr	s1, [sp, #4]
 80056c8:	ed9d 0a00 	vldr	s0, [sp]
 80056cc:	f000 f816 	bl	80056fc <__kernel_cosf>
 80056d0:	e7e3      	b.n	800569a <sinf+0x2a>
 80056d2:	eddd 0a01 	vldr	s1, [sp, #4]
 80056d6:	ed9d 0a00 	vldr	s0, [sp]
 80056da:	2001      	movs	r0, #1
 80056dc:	f000 f866 	bl	80057ac <__kernel_sinf>
 80056e0:	eeb1 0a40 	vneg.f32	s0, s0
 80056e4:	e7d9      	b.n	800569a <sinf+0x2a>
 80056e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80056ea:	ed9d 0a00 	vldr	s0, [sp]
 80056ee:	f000 f805 	bl	80056fc <__kernel_cosf>
 80056f2:	e7f5      	b.n	80056e0 <sinf+0x70>
 80056f4:	3f490fd8 	.word	0x3f490fd8
 80056f8:	00000000 	.word	0x00000000

080056fc <__kernel_cosf>:
 80056fc:	ee10 3a10 	vmov	r3, s0
 8005700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005704:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8005708:	eef0 6a40 	vmov.f32	s13, s0
 800570c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005710:	d204      	bcs.n	800571c <__kernel_cosf+0x20>
 8005712:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8005716:	ee17 2a90 	vmov	r2, s15
 800571a:	b342      	cbz	r2, 800576e <__kernel_cosf+0x72>
 800571c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8005720:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800578c <__kernel_cosf+0x90>
 8005724:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8005790 <__kernel_cosf+0x94>
 8005728:	4a1a      	ldr	r2, [pc, #104]	@ (8005794 <__kernel_cosf+0x98>)
 800572a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800572e:	4293      	cmp	r3, r2
 8005730:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8005798 <__kernel_cosf+0x9c>
 8005734:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005738:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800579c <__kernel_cosf+0xa0>
 800573c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005740:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80057a0 <__kernel_cosf+0xa4>
 8005744:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005748:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80057a4 <__kernel_cosf+0xa8>
 800574c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005750:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8005754:	ee26 6a07 	vmul.f32	s12, s12, s14
 8005758:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800575c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8005760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005764:	d804      	bhi.n	8005770 <__kernel_cosf+0x74>
 8005766:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800576a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800576e:	4770      	bx	lr
 8005770:	4a0d      	ldr	r2, [pc, #52]	@ (80057a8 <__kernel_cosf+0xac>)
 8005772:	4293      	cmp	r3, r2
 8005774:	bf9a      	itte	ls
 8005776:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800577a:	ee07 3a10 	vmovls	s14, r3
 800577e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8005782:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800578a:	e7ec      	b.n	8005766 <__kernel_cosf+0x6a>
 800578c:	ad47d74e 	.word	0xad47d74e
 8005790:	310f74f6 	.word	0x310f74f6
 8005794:	3e999999 	.word	0x3e999999
 8005798:	b493f27c 	.word	0xb493f27c
 800579c:	37d00d01 	.word	0x37d00d01
 80057a0:	bab60b61 	.word	0xbab60b61
 80057a4:	3d2aaaab 	.word	0x3d2aaaab
 80057a8:	3f480000 	.word	0x3f480000

080057ac <__kernel_sinf>:
 80057ac:	ee10 3a10 	vmov	r3, s0
 80057b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057b4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80057b8:	d204      	bcs.n	80057c4 <__kernel_sinf+0x18>
 80057ba:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80057be:	ee17 3a90 	vmov	r3, s15
 80057c2:	b35b      	cbz	r3, 800581c <__kernel_sinf+0x70>
 80057c4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80057c8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005820 <__kernel_sinf+0x74>
 80057cc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8005824 <__kernel_sinf+0x78>
 80057d0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80057d4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8005828 <__kernel_sinf+0x7c>
 80057d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80057dc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800582c <__kernel_sinf+0x80>
 80057e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80057e4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8005830 <__kernel_sinf+0x84>
 80057e8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80057ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 80057f0:	b930      	cbnz	r0, 8005800 <__kernel_sinf+0x54>
 80057f2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8005834 <__kernel_sinf+0x88>
 80057f6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80057fa:	eea6 0a26 	vfma.f32	s0, s12, s13
 80057fe:	4770      	bx	lr
 8005800:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005804:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8005808:	eee0 7a86 	vfma.f32	s15, s1, s12
 800580c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005810:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8005838 <__kernel_sinf+0x8c>
 8005814:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005818:	ee30 0a60 	vsub.f32	s0, s0, s1
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	2f2ec9d3 	.word	0x2f2ec9d3
 8005824:	b2d72f34 	.word	0xb2d72f34
 8005828:	3638ef1b 	.word	0x3638ef1b
 800582c:	b9500d01 	.word	0xb9500d01
 8005830:	3c088889 	.word	0x3c088889
 8005834:	be2aaaab 	.word	0xbe2aaaab
 8005838:	3e2aaaab 	.word	0x3e2aaaab

0800583c <__ieee754_rem_pio2f>:
 800583c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800583e:	ee10 6a10 	vmov	r6, s0
 8005842:	4b88      	ldr	r3, [pc, #544]	@ (8005a64 <__ieee754_rem_pio2f+0x228>)
 8005844:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8005848:	429d      	cmp	r5, r3
 800584a:	b087      	sub	sp, #28
 800584c:	4604      	mov	r4, r0
 800584e:	d805      	bhi.n	800585c <__ieee754_rem_pio2f+0x20>
 8005850:	2300      	movs	r3, #0
 8005852:	ed80 0a00 	vstr	s0, [r0]
 8005856:	6043      	str	r3, [r0, #4]
 8005858:	2000      	movs	r0, #0
 800585a:	e022      	b.n	80058a2 <__ieee754_rem_pio2f+0x66>
 800585c:	4b82      	ldr	r3, [pc, #520]	@ (8005a68 <__ieee754_rem_pio2f+0x22c>)
 800585e:	429d      	cmp	r5, r3
 8005860:	d83a      	bhi.n	80058d8 <__ieee754_rem_pio2f+0x9c>
 8005862:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005866:	2e00      	cmp	r6, #0
 8005868:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8005a6c <__ieee754_rem_pio2f+0x230>
 800586c:	4a80      	ldr	r2, [pc, #512]	@ (8005a70 <__ieee754_rem_pio2f+0x234>)
 800586e:	f023 030f 	bic.w	r3, r3, #15
 8005872:	dd18      	ble.n	80058a6 <__ieee754_rem_pio2f+0x6a>
 8005874:	4293      	cmp	r3, r2
 8005876:	ee70 7a47 	vsub.f32	s15, s0, s14
 800587a:	bf09      	itett	eq
 800587c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8005a74 <__ieee754_rem_pio2f+0x238>
 8005880:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8005a78 <__ieee754_rem_pio2f+0x23c>
 8005884:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8005a7c <__ieee754_rem_pio2f+0x240>
 8005888:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800588c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8005890:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005894:	ed80 7a00 	vstr	s14, [r0]
 8005898:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800589c:	edc0 7a01 	vstr	s15, [r0, #4]
 80058a0:	2001      	movs	r0, #1
 80058a2:	b007      	add	sp, #28
 80058a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a6:	4293      	cmp	r3, r2
 80058a8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80058ac:	bf09      	itett	eq
 80058ae:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8005a74 <__ieee754_rem_pio2f+0x238>
 80058b2:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8005a78 <__ieee754_rem_pio2f+0x23c>
 80058b6:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8005a7c <__ieee754_rem_pio2f+0x240>
 80058ba:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80058be:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80058c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058c6:	ed80 7a00 	vstr	s14, [r0]
 80058ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ce:	edc0 7a01 	vstr	s15, [r0, #4]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058d6:	e7e4      	b.n	80058a2 <__ieee754_rem_pio2f+0x66>
 80058d8:	4b69      	ldr	r3, [pc, #420]	@ (8005a80 <__ieee754_rem_pio2f+0x244>)
 80058da:	429d      	cmp	r5, r3
 80058dc:	d873      	bhi.n	80059c6 <__ieee754_rem_pio2f+0x18a>
 80058de:	f000 f8dd 	bl	8005a9c <fabsf>
 80058e2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8005a84 <__ieee754_rem_pio2f+0x248>
 80058e6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80058ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 80058ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058f6:	ee17 0a90 	vmov	r0, s15
 80058fa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005a6c <__ieee754_rem_pio2f+0x230>
 80058fe:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005902:	281f      	cmp	r0, #31
 8005904:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8005a78 <__ieee754_rem_pio2f+0x23c>
 8005908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590c:	eeb1 6a47 	vneg.f32	s12, s14
 8005910:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005914:	ee16 1a90 	vmov	r1, s13
 8005918:	dc09      	bgt.n	800592e <__ieee754_rem_pio2f+0xf2>
 800591a:	4a5b      	ldr	r2, [pc, #364]	@ (8005a88 <__ieee754_rem_pio2f+0x24c>)
 800591c:	1e47      	subs	r7, r0, #1
 800591e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8005922:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8005926:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800592a:	4293      	cmp	r3, r2
 800592c:	d107      	bne.n	800593e <__ieee754_rem_pio2f+0x102>
 800592e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8005932:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8005936:	2a08      	cmp	r2, #8
 8005938:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800593c:	dc14      	bgt.n	8005968 <__ieee754_rem_pio2f+0x12c>
 800593e:	6021      	str	r1, [r4, #0]
 8005940:	ed94 7a00 	vldr	s14, [r4]
 8005944:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005948:	2e00      	cmp	r6, #0
 800594a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800594e:	ed84 0a01 	vstr	s0, [r4, #4]
 8005952:	daa6      	bge.n	80058a2 <__ieee754_rem_pio2f+0x66>
 8005954:	eeb1 7a47 	vneg.f32	s14, s14
 8005958:	eeb1 0a40 	vneg.f32	s0, s0
 800595c:	ed84 7a00 	vstr	s14, [r4]
 8005960:	ed84 0a01 	vstr	s0, [r4, #4]
 8005964:	4240      	negs	r0, r0
 8005966:	e79c      	b.n	80058a2 <__ieee754_rem_pio2f+0x66>
 8005968:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8005a74 <__ieee754_rem_pio2f+0x238>
 800596c:	eef0 6a40 	vmov.f32	s13, s0
 8005970:	eee6 6a25 	vfma.f32	s13, s12, s11
 8005974:	ee70 7a66 	vsub.f32	s15, s0, s13
 8005978:	eee6 7a25 	vfma.f32	s15, s12, s11
 800597c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005a7c <__ieee754_rem_pio2f+0x240>
 8005980:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005984:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005988:	ee15 2a90 	vmov	r2, s11
 800598c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005990:	1a5b      	subs	r3, r3, r1
 8005992:	2b19      	cmp	r3, #25
 8005994:	dc04      	bgt.n	80059a0 <__ieee754_rem_pio2f+0x164>
 8005996:	edc4 5a00 	vstr	s11, [r4]
 800599a:	eeb0 0a66 	vmov.f32	s0, s13
 800599e:	e7cf      	b.n	8005940 <__ieee754_rem_pio2f+0x104>
 80059a0:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8005a8c <__ieee754_rem_pio2f+0x250>
 80059a4:	eeb0 0a66 	vmov.f32	s0, s13
 80059a8:	eea6 0a25 	vfma.f32	s0, s12, s11
 80059ac:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80059b0:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8005a90 <__ieee754_rem_pio2f+0x254>
 80059b4:	eee6 7a25 	vfma.f32	s15, s12, s11
 80059b8:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80059bc:	ee30 7a67 	vsub.f32	s14, s0, s15
 80059c0:	ed84 7a00 	vstr	s14, [r4]
 80059c4:	e7bc      	b.n	8005940 <__ieee754_rem_pio2f+0x104>
 80059c6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80059ca:	d306      	bcc.n	80059da <__ieee754_rem_pio2f+0x19e>
 80059cc:	ee70 7a40 	vsub.f32	s15, s0, s0
 80059d0:	edc0 7a01 	vstr	s15, [r0, #4]
 80059d4:	edc0 7a00 	vstr	s15, [r0]
 80059d8:	e73e      	b.n	8005858 <__ieee754_rem_pio2f+0x1c>
 80059da:	15ea      	asrs	r2, r5, #23
 80059dc:	3a86      	subs	r2, #134	@ 0x86
 80059de:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80059e2:	ee07 3a90 	vmov	s15, r3
 80059e6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80059ea:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8005a94 <__ieee754_rem_pio2f+0x258>
 80059ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80059f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059f6:	ed8d 7a03 	vstr	s14, [sp, #12]
 80059fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80059fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005a02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005a06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a0a:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005a0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005a12:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1a:	edcd 7a05 	vstr	s15, [sp, #20]
 8005a1e:	d11e      	bne.n	8005a5e <__ieee754_rem_pio2f+0x222>
 8005a20:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a28:	bf0c      	ite	eq
 8005a2a:	2301      	moveq	r3, #1
 8005a2c:	2302      	movne	r3, #2
 8005a2e:	491a      	ldr	r1, [pc, #104]	@ (8005a98 <__ieee754_rem_pio2f+0x25c>)
 8005a30:	9101      	str	r1, [sp, #4]
 8005a32:	2102      	movs	r1, #2
 8005a34:	9100      	str	r1, [sp, #0]
 8005a36:	a803      	add	r0, sp, #12
 8005a38:	4621      	mov	r1, r4
 8005a3a:	f000 f837 	bl	8005aac <__kernel_rem_pio2f>
 8005a3e:	2e00      	cmp	r6, #0
 8005a40:	f6bf af2f 	bge.w	80058a2 <__ieee754_rem_pio2f+0x66>
 8005a44:	edd4 7a00 	vldr	s15, [r4]
 8005a48:	eef1 7a67 	vneg.f32	s15, s15
 8005a4c:	edc4 7a00 	vstr	s15, [r4]
 8005a50:	edd4 7a01 	vldr	s15, [r4, #4]
 8005a54:	eef1 7a67 	vneg.f32	s15, s15
 8005a58:	edc4 7a01 	vstr	s15, [r4, #4]
 8005a5c:	e782      	b.n	8005964 <__ieee754_rem_pio2f+0x128>
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e7e5      	b.n	8005a2e <__ieee754_rem_pio2f+0x1f2>
 8005a62:	bf00      	nop
 8005a64:	3f490fd8 	.word	0x3f490fd8
 8005a68:	4016cbe3 	.word	0x4016cbe3
 8005a6c:	3fc90f80 	.word	0x3fc90f80
 8005a70:	3fc90fd0 	.word	0x3fc90fd0
 8005a74:	37354400 	.word	0x37354400
 8005a78:	37354443 	.word	0x37354443
 8005a7c:	2e85a308 	.word	0x2e85a308
 8005a80:	43490f80 	.word	0x43490f80
 8005a84:	3f22f984 	.word	0x3f22f984
 8005a88:	080062fc 	.word	0x080062fc
 8005a8c:	2e85a300 	.word	0x2e85a300
 8005a90:	248d3132 	.word	0x248d3132
 8005a94:	43800000 	.word	0x43800000
 8005a98:	0800637c 	.word	0x0800637c

08005a9c <fabsf>:
 8005a9c:	ee10 3a10 	vmov	r3, s0
 8005aa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005aa4:	ee00 3a10 	vmov	s0, r3
 8005aa8:	4770      	bx	lr
	...

08005aac <__kernel_rem_pio2f>:
 8005aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	ed2d 8b04 	vpush	{d8-d9}
 8005ab4:	b0d9      	sub	sp, #356	@ 0x164
 8005ab6:	4690      	mov	r8, r2
 8005ab8:	9001      	str	r0, [sp, #4]
 8005aba:	4ab9      	ldr	r2, [pc, #740]	@ (8005da0 <__kernel_rem_pio2f+0x2f4>)
 8005abc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8005abe:	f118 0f04 	cmn.w	r8, #4
 8005ac2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8005ac6:	460f      	mov	r7, r1
 8005ac8:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005acc:	db27      	blt.n	8005b1e <__kernel_rem_pio2f+0x72>
 8005ace:	f1b8 0203 	subs.w	r2, r8, #3
 8005ad2:	bf48      	it	mi
 8005ad4:	f108 0204 	addmi.w	r2, r8, #4
 8005ad8:	10d2      	asrs	r2, r2, #3
 8005ada:	1c55      	adds	r5, r2, #1
 8005adc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005ade:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8005db0 <__kernel_rem_pio2f+0x304>
 8005ae2:	00e8      	lsls	r0, r5, #3
 8005ae4:	eba2 060b 	sub.w	r6, r2, fp
 8005ae8:	9002      	str	r0, [sp, #8]
 8005aea:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8005aee:	eb0a 0c0b 	add.w	ip, sl, fp
 8005af2:	ac1c      	add	r4, sp, #112	@ 0x70
 8005af4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8005af8:	2000      	movs	r0, #0
 8005afa:	4560      	cmp	r0, ip
 8005afc:	dd11      	ble.n	8005b22 <__kernel_rem_pio2f+0x76>
 8005afe:	a91c      	add	r1, sp, #112	@ 0x70
 8005b00:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8005b04:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8005b08:	f04f 0c00 	mov.w	ip, #0
 8005b0c:	45d4      	cmp	ip, sl
 8005b0e:	dc27      	bgt.n	8005b60 <__kernel_rem_pio2f+0xb4>
 8005b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005b14:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8005db0 <__kernel_rem_pio2f+0x304>
 8005b18:	4606      	mov	r6, r0
 8005b1a:	2400      	movs	r4, #0
 8005b1c:	e016      	b.n	8005b4c <__kernel_rem_pio2f+0xa0>
 8005b1e:	2200      	movs	r2, #0
 8005b20:	e7db      	b.n	8005ada <__kernel_rem_pio2f+0x2e>
 8005b22:	42c6      	cmn	r6, r0
 8005b24:	bf5d      	ittte	pl
 8005b26:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8005b2a:	ee07 1a90 	vmovpl	s15, r1
 8005b2e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005b32:	eef0 7a47 	vmovmi.f32	s15, s14
 8005b36:	ece4 7a01 	vstmia	r4!, {s15}
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	e7dd      	b.n	8005afa <__kernel_rem_pio2f+0x4e>
 8005b3e:	ecfe 6a01 	vldmia	lr!, {s13}
 8005b42:	ed96 7a00 	vldr	s14, [r6]
 8005b46:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005b4a:	3401      	adds	r4, #1
 8005b4c:	455c      	cmp	r4, fp
 8005b4e:	f1a6 0604 	sub.w	r6, r6, #4
 8005b52:	ddf4      	ble.n	8005b3e <__kernel_rem_pio2f+0x92>
 8005b54:	ece9 7a01 	vstmia	r9!, {s15}
 8005b58:	f10c 0c01 	add.w	ip, ip, #1
 8005b5c:	3004      	adds	r0, #4
 8005b5e:	e7d5      	b.n	8005b0c <__kernel_rem_pio2f+0x60>
 8005b60:	a908      	add	r1, sp, #32
 8005b62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005b66:	9104      	str	r1, [sp, #16]
 8005b68:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8005b6a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8005dac <__kernel_rem_pio2f+0x300>
 8005b6e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8005da8 <__kernel_rem_pio2f+0x2fc>
 8005b72:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005b76:	9203      	str	r2, [sp, #12]
 8005b78:	4654      	mov	r4, sl
 8005b7a:	00a2      	lsls	r2, r4, #2
 8005b7c:	9205      	str	r2, [sp, #20]
 8005b7e:	aa58      	add	r2, sp, #352	@ 0x160
 8005b80:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8005b84:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8005b88:	a944      	add	r1, sp, #272	@ 0x110
 8005b8a:	aa08      	add	r2, sp, #32
 8005b8c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8005b90:	4694      	mov	ip, r2
 8005b92:	4626      	mov	r6, r4
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	f1a0 0004 	sub.w	r0, r0, #4
 8005b9a:	dc4c      	bgt.n	8005c36 <__kernel_rem_pio2f+0x18a>
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005ba2:	f000 fa39 	bl	8006018 <scalbnf>
 8005ba6:	eeb0 8a40 	vmov.f32	s16, s0
 8005baa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8005bae:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005bb2:	f000 f9ed 	bl	8005f90 <floorf>
 8005bb6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8005bba:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005bbe:	2d00      	cmp	r5, #0
 8005bc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005bc4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005bc8:	ee17 9a90 	vmov	r9, s15
 8005bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005bd0:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005bd4:	dd41      	ble.n	8005c5a <__kernel_rem_pio2f+0x1ae>
 8005bd6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8005bda:	a908      	add	r1, sp, #32
 8005bdc:	f1c5 0e08 	rsb	lr, r5, #8
 8005be0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8005be4:	fa46 f00e 	asr.w	r0, r6, lr
 8005be8:	4481      	add	r9, r0
 8005bea:	fa00 f00e 	lsl.w	r0, r0, lr
 8005bee:	1a36      	subs	r6, r6, r0
 8005bf0:	f1c5 0007 	rsb	r0, r5, #7
 8005bf4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8005bf8:	4106      	asrs	r6, r0
 8005bfa:	2e00      	cmp	r6, #0
 8005bfc:	dd3c      	ble.n	8005c78 <__kernel_rem_pio2f+0x1cc>
 8005bfe:	f04f 0e00 	mov.w	lr, #0
 8005c02:	f109 0901 	add.w	r9, r9, #1
 8005c06:	4670      	mov	r0, lr
 8005c08:	4574      	cmp	r4, lr
 8005c0a:	dc68      	bgt.n	8005cde <__kernel_rem_pio2f+0x232>
 8005c0c:	2d00      	cmp	r5, #0
 8005c0e:	dd03      	ble.n	8005c18 <__kernel_rem_pio2f+0x16c>
 8005c10:	2d01      	cmp	r5, #1
 8005c12:	d074      	beq.n	8005cfe <__kernel_rem_pio2f+0x252>
 8005c14:	2d02      	cmp	r5, #2
 8005c16:	d07d      	beq.n	8005d14 <__kernel_rem_pio2f+0x268>
 8005c18:	2e02      	cmp	r6, #2
 8005c1a:	d12d      	bne.n	8005c78 <__kernel_rem_pio2f+0x1cc>
 8005c1c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005c20:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005c24:	b340      	cbz	r0, 8005c78 <__kernel_rem_pio2f+0x1cc>
 8005c26:	4628      	mov	r0, r5
 8005c28:	9306      	str	r3, [sp, #24]
 8005c2a:	f000 f9f5 	bl	8006018 <scalbnf>
 8005c2e:	9b06      	ldr	r3, [sp, #24]
 8005c30:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005c34:	e020      	b.n	8005c78 <__kernel_rem_pio2f+0x1cc>
 8005c36:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005c3a:	3e01      	subs	r6, #1
 8005c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c44:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005c48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005c4c:	ecac 0a01 	vstmia	ip!, {s0}
 8005c50:	ed90 0a00 	vldr	s0, [r0]
 8005c54:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005c58:	e79c      	b.n	8005b94 <__kernel_rem_pio2f+0xe8>
 8005c5a:	d105      	bne.n	8005c68 <__kernel_rem_pio2f+0x1bc>
 8005c5c:	1e60      	subs	r0, r4, #1
 8005c5e:	a908      	add	r1, sp, #32
 8005c60:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8005c64:	11f6      	asrs	r6, r6, #7
 8005c66:	e7c8      	b.n	8005bfa <__kernel_rem_pio2f+0x14e>
 8005c68:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8005c6c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	da31      	bge.n	8005cda <__kernel_rem_pio2f+0x22e>
 8005c76:	2600      	movs	r6, #0
 8005c78:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c80:	f040 8098 	bne.w	8005db4 <__kernel_rem_pio2f+0x308>
 8005c84:	1e60      	subs	r0, r4, #1
 8005c86:	2200      	movs	r2, #0
 8005c88:	4550      	cmp	r0, sl
 8005c8a:	da4b      	bge.n	8005d24 <__kernel_rem_pio2f+0x278>
 8005c8c:	2a00      	cmp	r2, #0
 8005c8e:	d065      	beq.n	8005d5c <__kernel_rem_pio2f+0x2b0>
 8005c90:	3c01      	subs	r4, #1
 8005c92:	ab08      	add	r3, sp, #32
 8005c94:	3d08      	subs	r5, #8
 8005c96:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0f8      	beq.n	8005c90 <__kernel_rem_pio2f+0x1e4>
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8005ca4:	f000 f9b8 	bl	8006018 <scalbnf>
 8005ca8:	1c63      	adds	r3, r4, #1
 8005caa:	aa44      	add	r2, sp, #272	@ 0x110
 8005cac:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8005dac <__kernel_rem_pio2f+0x300>
 8005cb0:	0099      	lsls	r1, r3, #2
 8005cb2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f280 80a9 	bge.w	8005e10 <__kernel_rem_pio2f+0x364>
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	f2c0 80c7 	blt.w	8005e54 <__kernel_rem_pio2f+0x3a8>
 8005cc6:	aa44      	add	r2, sp, #272	@ 0x110
 8005cc8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8005ccc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8005da4 <__kernel_rem_pio2f+0x2f8>
 8005cd0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8005db0 <__kernel_rem_pio2f+0x304>
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	1ae2      	subs	r2, r4, r3
 8005cd8:	e0b1      	b.n	8005e3e <__kernel_rem_pio2f+0x392>
 8005cda:	2602      	movs	r6, #2
 8005cdc:	e78f      	b.n	8005bfe <__kernel_rem_pio2f+0x152>
 8005cde:	f852 1b04 	ldr.w	r1, [r2], #4
 8005ce2:	b948      	cbnz	r0, 8005cf8 <__kernel_rem_pio2f+0x24c>
 8005ce4:	b121      	cbz	r1, 8005cf0 <__kernel_rem_pio2f+0x244>
 8005ce6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8005cea:	f842 1c04 	str.w	r1, [r2, #-4]
 8005cee:	2101      	movs	r1, #1
 8005cf0:	f10e 0e01 	add.w	lr, lr, #1
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	e787      	b.n	8005c08 <__kernel_rem_pio2f+0x15c>
 8005cf8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8005cfc:	e7f5      	b.n	8005cea <__kernel_rem_pio2f+0x23e>
 8005cfe:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8005d02:	aa08      	add	r2, sp, #32
 8005d04:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005d08:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d0c:	a908      	add	r1, sp, #32
 8005d0e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005d12:	e781      	b.n	8005c18 <__kernel_rem_pio2f+0x16c>
 8005d14:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8005d18:	aa08      	add	r2, sp, #32
 8005d1a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8005d1e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8005d22:	e7f3      	b.n	8005d0c <__kernel_rem_pio2f+0x260>
 8005d24:	a908      	add	r1, sp, #32
 8005d26:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005d2a:	3801      	subs	r0, #1
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	e7ab      	b.n	8005c88 <__kernel_rem_pio2f+0x1dc>
 8005d30:	3201      	adds	r2, #1
 8005d32:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8005d36:	2e00      	cmp	r6, #0
 8005d38:	d0fa      	beq.n	8005d30 <__kernel_rem_pio2f+0x284>
 8005d3a:	9905      	ldr	r1, [sp, #20]
 8005d3c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8005d40:	eb0d 0001 	add.w	r0, sp, r1
 8005d44:	18e6      	adds	r6, r4, r3
 8005d46:	a91c      	add	r1, sp, #112	@ 0x70
 8005d48:	f104 0c01 	add.w	ip, r4, #1
 8005d4c:	384c      	subs	r0, #76	@ 0x4c
 8005d4e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8005d52:	4422      	add	r2, r4
 8005d54:	4562      	cmp	r2, ip
 8005d56:	da04      	bge.n	8005d62 <__kernel_rem_pio2f+0x2b6>
 8005d58:	4614      	mov	r4, r2
 8005d5a:	e70e      	b.n	8005b7a <__kernel_rem_pio2f+0xce>
 8005d5c:	9804      	ldr	r0, [sp, #16]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	e7e7      	b.n	8005d32 <__kernel_rem_pio2f+0x286>
 8005d62:	9903      	ldr	r1, [sp, #12]
 8005d64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005d68:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8005d6c:	9105      	str	r1, [sp, #20]
 8005d6e:	ee07 1a90 	vmov	s15, r1
 8005d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d76:	2400      	movs	r4, #0
 8005d78:	ece6 7a01 	vstmia	r6!, {s15}
 8005d7c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8005db0 <__kernel_rem_pio2f+0x304>
 8005d80:	46b1      	mov	r9, r6
 8005d82:	455c      	cmp	r4, fp
 8005d84:	dd04      	ble.n	8005d90 <__kernel_rem_pio2f+0x2e4>
 8005d86:	ece0 7a01 	vstmia	r0!, {s15}
 8005d8a:	f10c 0c01 	add.w	ip, ip, #1
 8005d8e:	e7e1      	b.n	8005d54 <__kernel_rem_pio2f+0x2a8>
 8005d90:	ecfe 6a01 	vldmia	lr!, {s13}
 8005d94:	ed39 7a01 	vldmdb	r9!, {s14}
 8005d98:	3401      	adds	r4, #1
 8005d9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005d9e:	e7f0      	b.n	8005d82 <__kernel_rem_pio2f+0x2d6>
 8005da0:	080066c0 	.word	0x080066c0
 8005da4:	08006694 	.word	0x08006694
 8005da8:	43800000 	.word	0x43800000
 8005dac:	3b800000 	.word	0x3b800000
 8005db0:	00000000 	.word	0x00000000
 8005db4:	9b02      	ldr	r3, [sp, #8]
 8005db6:	eeb0 0a48 	vmov.f32	s0, s16
 8005dba:	eba3 0008 	sub.w	r0, r3, r8
 8005dbe:	f000 f92b 	bl	8006018 <scalbnf>
 8005dc2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8005da8 <__kernel_rem_pio2f+0x2fc>
 8005dc6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dce:	db19      	blt.n	8005e04 <__kernel_rem_pio2f+0x358>
 8005dd0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8005dac <__kernel_rem_pio2f+0x300>
 8005dd4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005dd8:	aa08      	add	r2, sp, #32
 8005dda:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dde:	3508      	adds	r5, #8
 8005de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005df0:	ee10 3a10 	vmov	r3, s0
 8005df4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005df8:	ee17 3a90 	vmov	r3, s15
 8005dfc:	3401      	adds	r4, #1
 8005dfe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8005e02:	e74c      	b.n	8005c9e <__kernel_rem_pio2f+0x1f2>
 8005e04:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005e08:	aa08      	add	r2, sp, #32
 8005e0a:	ee10 3a10 	vmov	r3, s0
 8005e0e:	e7f6      	b.n	8005dfe <__kernel_rem_pio2f+0x352>
 8005e10:	a808      	add	r0, sp, #32
 8005e12:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005e16:	9001      	str	r0, [sp, #4]
 8005e18:	ee07 0a90 	vmov	s15, r0
 8005e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e20:	3b01      	subs	r3, #1
 8005e22:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005e26:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005e2a:	ed62 7a01 	vstmdb	r2!, {s15}
 8005e2e:	e743      	b.n	8005cb8 <__kernel_rem_pio2f+0x20c>
 8005e30:	ecfc 6a01 	vldmia	ip!, {s13}
 8005e34:	ecb5 7a01 	vldmia	r5!, {s14}
 8005e38:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005e3c:	3001      	adds	r0, #1
 8005e3e:	4550      	cmp	r0, sl
 8005e40:	dc01      	bgt.n	8005e46 <__kernel_rem_pio2f+0x39a>
 8005e42:	4282      	cmp	r2, r0
 8005e44:	daf4      	bge.n	8005e30 <__kernel_rem_pio2f+0x384>
 8005e46:	a858      	add	r0, sp, #352	@ 0x160
 8005e48:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005e4c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8005e50:	3b01      	subs	r3, #1
 8005e52:	e735      	b.n	8005cc0 <__kernel_rem_pio2f+0x214>
 8005e54:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	dc09      	bgt.n	8005e6e <__kernel_rem_pio2f+0x3c2>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	dc2b      	bgt.n	8005eb6 <__kernel_rem_pio2f+0x40a>
 8005e5e:	d044      	beq.n	8005eea <__kernel_rem_pio2f+0x43e>
 8005e60:	f009 0007 	and.w	r0, r9, #7
 8005e64:	b059      	add	sp, #356	@ 0x164
 8005e66:	ecbd 8b04 	vpop	{d8-d9}
 8005e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d1f5      	bne.n	8005e60 <__kernel_rem_pio2f+0x3b4>
 8005e74:	aa30      	add	r2, sp, #192	@ 0xc0
 8005e76:	1f0b      	subs	r3, r1, #4
 8005e78:	4413      	add	r3, r2
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	2800      	cmp	r0, #0
 8005e80:	f1a2 0204 	sub.w	r2, r2, #4
 8005e84:	dc52      	bgt.n	8005f2c <__kernel_rem_pio2f+0x480>
 8005e86:	4622      	mov	r2, r4
 8005e88:	2a01      	cmp	r2, #1
 8005e8a:	f1a3 0304 	sub.w	r3, r3, #4
 8005e8e:	dc5d      	bgt.n	8005f4c <__kernel_rem_pio2f+0x4a0>
 8005e90:	ab30      	add	r3, sp, #192	@ 0xc0
 8005e92:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8005db0 <__kernel_rem_pio2f+0x304>
 8005e96:	440b      	add	r3, r1
 8005e98:	2c01      	cmp	r4, #1
 8005e9a:	dc67      	bgt.n	8005f6c <__kernel_rem_pio2f+0x4c0>
 8005e9c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8005ea0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8005ea4:	2e00      	cmp	r6, #0
 8005ea6:	d167      	bne.n	8005f78 <__kernel_rem_pio2f+0x4cc>
 8005ea8:	edc7 6a00 	vstr	s13, [r7]
 8005eac:	ed87 7a01 	vstr	s14, [r7, #4]
 8005eb0:	edc7 7a02 	vstr	s15, [r7, #8]
 8005eb4:	e7d4      	b.n	8005e60 <__kernel_rem_pio2f+0x3b4>
 8005eb6:	ab30      	add	r3, sp, #192	@ 0xc0
 8005eb8:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8005db0 <__kernel_rem_pio2f+0x304>
 8005ebc:	440b      	add	r3, r1
 8005ebe:	4622      	mov	r2, r4
 8005ec0:	2a00      	cmp	r2, #0
 8005ec2:	da24      	bge.n	8005f0e <__kernel_rem_pio2f+0x462>
 8005ec4:	b34e      	cbz	r6, 8005f1a <__kernel_rem_pio2f+0x46e>
 8005ec6:	eef1 7a47 	vneg.f32	s15, s14
 8005eca:	edc7 7a00 	vstr	s15, [r7]
 8005ece:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8005ed2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ed6:	aa31      	add	r2, sp, #196	@ 0xc4
 8005ed8:	2301      	movs	r3, #1
 8005eda:	429c      	cmp	r4, r3
 8005edc:	da20      	bge.n	8005f20 <__kernel_rem_pio2f+0x474>
 8005ede:	b10e      	cbz	r6, 8005ee4 <__kernel_rem_pio2f+0x438>
 8005ee0:	eef1 7a67 	vneg.f32	s15, s15
 8005ee4:	edc7 7a01 	vstr	s15, [r7, #4]
 8005ee8:	e7ba      	b.n	8005e60 <__kernel_rem_pio2f+0x3b4>
 8005eea:	ab30      	add	r3, sp, #192	@ 0xc0
 8005eec:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8005db0 <__kernel_rem_pio2f+0x304>
 8005ef0:	440b      	add	r3, r1
 8005ef2:	2c00      	cmp	r4, #0
 8005ef4:	da05      	bge.n	8005f02 <__kernel_rem_pio2f+0x456>
 8005ef6:	b10e      	cbz	r6, 8005efc <__kernel_rem_pio2f+0x450>
 8005ef8:	eef1 7a67 	vneg.f32	s15, s15
 8005efc:	edc7 7a00 	vstr	s15, [r7]
 8005f00:	e7ae      	b.n	8005e60 <__kernel_rem_pio2f+0x3b4>
 8005f02:	ed33 7a01 	vldmdb	r3!, {s14}
 8005f06:	3c01      	subs	r4, #1
 8005f08:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f0c:	e7f1      	b.n	8005ef2 <__kernel_rem_pio2f+0x446>
 8005f0e:	ed73 7a01 	vldmdb	r3!, {s15}
 8005f12:	3a01      	subs	r2, #1
 8005f14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005f18:	e7d2      	b.n	8005ec0 <__kernel_rem_pio2f+0x414>
 8005f1a:	eef0 7a47 	vmov.f32	s15, s14
 8005f1e:	e7d4      	b.n	8005eca <__kernel_rem_pio2f+0x41e>
 8005f20:	ecb2 7a01 	vldmia	r2!, {s14}
 8005f24:	3301      	adds	r3, #1
 8005f26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f2a:	e7d6      	b.n	8005eda <__kernel_rem_pio2f+0x42e>
 8005f2c:	edd2 7a00 	vldr	s15, [r2]
 8005f30:	edd2 6a01 	vldr	s13, [r2, #4]
 8005f34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005f38:	3801      	subs	r0, #1
 8005f3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f3e:	ed82 7a00 	vstr	s14, [r2]
 8005f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f46:	edc2 7a01 	vstr	s15, [r2, #4]
 8005f4a:	e798      	b.n	8005e7e <__kernel_rem_pio2f+0x3d2>
 8005f4c:	edd3 7a00 	vldr	s15, [r3]
 8005f50:	edd3 6a01 	vldr	s13, [r3, #4]
 8005f54:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005f58:	3a01      	subs	r2, #1
 8005f5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f5e:	ed83 7a00 	vstr	s14, [r3]
 8005f62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f66:	edc3 7a01 	vstr	s15, [r3, #4]
 8005f6a:	e78d      	b.n	8005e88 <__kernel_rem_pio2f+0x3dc>
 8005f6c:	ed33 7a01 	vldmdb	r3!, {s14}
 8005f70:	3c01      	subs	r4, #1
 8005f72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f76:	e78f      	b.n	8005e98 <__kernel_rem_pio2f+0x3ec>
 8005f78:	eef1 6a66 	vneg.f32	s13, s13
 8005f7c:	eeb1 7a47 	vneg.f32	s14, s14
 8005f80:	edc7 6a00 	vstr	s13, [r7]
 8005f84:	ed87 7a01 	vstr	s14, [r7, #4]
 8005f88:	eef1 7a67 	vneg.f32	s15, s15
 8005f8c:	e790      	b.n	8005eb0 <__kernel_rem_pio2f+0x404>
 8005f8e:	bf00      	nop

08005f90 <floorf>:
 8005f90:	ee10 3a10 	vmov	r3, s0
 8005f94:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005f98:	3a7f      	subs	r2, #127	@ 0x7f
 8005f9a:	2a16      	cmp	r2, #22
 8005f9c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005fa0:	dc2b      	bgt.n	8005ffa <floorf+0x6a>
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	da12      	bge.n	8005fcc <floorf+0x3c>
 8005fa6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800600c <floorf+0x7c>
 8005faa:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005fae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb6:	dd06      	ble.n	8005fc6 <floorf+0x36>
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	da24      	bge.n	8006006 <floorf+0x76>
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	4b14      	ldr	r3, [pc, #80]	@ (8006010 <floorf+0x80>)
 8005fc0:	bf08      	it	eq
 8005fc2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8005fc6:	ee00 3a10 	vmov	s0, r3
 8005fca:	4770      	bx	lr
 8005fcc:	4911      	ldr	r1, [pc, #68]	@ (8006014 <floorf+0x84>)
 8005fce:	4111      	asrs	r1, r2
 8005fd0:	420b      	tst	r3, r1
 8005fd2:	d0fa      	beq.n	8005fca <floorf+0x3a>
 8005fd4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800600c <floorf+0x7c>
 8005fd8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005fdc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fe4:	ddef      	ble.n	8005fc6 <floorf+0x36>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfbe      	ittt	lt
 8005fea:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8005fee:	fa40 f202 	asrlt.w	r2, r0, r2
 8005ff2:	189b      	addlt	r3, r3, r2
 8005ff4:	ea23 0301 	bic.w	r3, r3, r1
 8005ff8:	e7e5      	b.n	8005fc6 <floorf+0x36>
 8005ffa:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005ffe:	d3e4      	bcc.n	8005fca <floorf+0x3a>
 8006000:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006004:	4770      	bx	lr
 8006006:	2300      	movs	r3, #0
 8006008:	e7dd      	b.n	8005fc6 <floorf+0x36>
 800600a:	bf00      	nop
 800600c:	7149f2ca 	.word	0x7149f2ca
 8006010:	bf800000 	.word	0xbf800000
 8006014:	007fffff 	.word	0x007fffff

08006018 <scalbnf>:
 8006018:	ee10 3a10 	vmov	r3, s0
 800601c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006020:	d02b      	beq.n	800607a <scalbnf+0x62>
 8006022:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006026:	d302      	bcc.n	800602e <scalbnf+0x16>
 8006028:	ee30 0a00 	vadd.f32	s0, s0, s0
 800602c:	4770      	bx	lr
 800602e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006032:	d123      	bne.n	800607c <scalbnf+0x64>
 8006034:	4b24      	ldr	r3, [pc, #144]	@ (80060c8 <scalbnf+0xb0>)
 8006036:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80060cc <scalbnf+0xb4>
 800603a:	4298      	cmp	r0, r3
 800603c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006040:	db17      	blt.n	8006072 <scalbnf+0x5a>
 8006042:	ee10 3a10 	vmov	r3, s0
 8006046:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800604a:	3a19      	subs	r2, #25
 800604c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006050:	4288      	cmp	r0, r1
 8006052:	dd15      	ble.n	8006080 <scalbnf+0x68>
 8006054:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80060d0 <scalbnf+0xb8>
 8006058:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80060d4 <scalbnf+0xbc>
 800605c:	ee10 3a10 	vmov	r3, s0
 8006060:	eeb0 7a67 	vmov.f32	s14, s15
 8006064:	2b00      	cmp	r3, #0
 8006066:	bfb8      	it	lt
 8006068:	eef0 7a66 	vmovlt.f32	s15, s13
 800606c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006070:	4770      	bx	lr
 8006072:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80060d8 <scalbnf+0xc0>
 8006076:	ee27 0a80 	vmul.f32	s0, s15, s0
 800607a:	4770      	bx	lr
 800607c:	0dd2      	lsrs	r2, r2, #23
 800607e:	e7e5      	b.n	800604c <scalbnf+0x34>
 8006080:	4410      	add	r0, r2
 8006082:	28fe      	cmp	r0, #254	@ 0xfe
 8006084:	dce6      	bgt.n	8006054 <scalbnf+0x3c>
 8006086:	2800      	cmp	r0, #0
 8006088:	dd06      	ble.n	8006098 <scalbnf+0x80>
 800608a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800608e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006092:	ee00 3a10 	vmov	s0, r3
 8006096:	4770      	bx	lr
 8006098:	f110 0f16 	cmn.w	r0, #22
 800609c:	da09      	bge.n	80060b2 <scalbnf+0x9a>
 800609e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80060d8 <scalbnf+0xc0>
 80060a2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80060dc <scalbnf+0xc4>
 80060a6:	ee10 3a10 	vmov	r3, s0
 80060aa:	eeb0 7a67 	vmov.f32	s14, s15
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	e7d9      	b.n	8006066 <scalbnf+0x4e>
 80060b2:	3019      	adds	r0, #25
 80060b4:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80060b8:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80060bc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80060e0 <scalbnf+0xc8>
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	e7d7      	b.n	8006076 <scalbnf+0x5e>
 80060c6:	bf00      	nop
 80060c8:	ffff3cb0 	.word	0xffff3cb0
 80060cc:	4c000000 	.word	0x4c000000
 80060d0:	7149f2ca 	.word	0x7149f2ca
 80060d4:	f149f2ca 	.word	0xf149f2ca
 80060d8:	0da24260 	.word	0x0da24260
 80060dc:	8da24260 	.word	0x8da24260
 80060e0:	33000000 	.word	0x33000000

080060e4 <_init>:
 80060e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e6:	bf00      	nop
 80060e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ea:	bc08      	pop	{r3}
 80060ec:	469e      	mov	lr, r3
 80060ee:	4770      	bx	lr

080060f0 <_fini>:
 80060f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f2:	bf00      	nop
 80060f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f6:	bc08      	pop	{r3}
 80060f8:	469e      	mov	lr, r3
 80060fa:	4770      	bx	lr
