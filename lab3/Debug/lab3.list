
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004618  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  080047e0  080047e0  000057e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc8  08004bc8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  08004bc8  08004bc8  00005bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bd0  08004bd0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd0  08004bd0  00005bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004bd4  08004bd4  00005bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004bd8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08004be4  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004be4  00006264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec60  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ca  00000000  00000000  00014c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00016e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae3  00000000  00000000  00017c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002213f  00000000  00000000  0001873b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104d7  00000000  00000000  0003a87a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d23db  00000000  00000000  0004ad51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011d12c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  0011d170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00120ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080047c8 	.word	0x080047c8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080047c8 	.word	0x080047c8

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a58:	f000 b96a 	b.w	8000d30 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d14e      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a80:	4694      	mov	ip, r2
 8000a82:	458c      	cmp	ip, r1
 8000a84:	4686      	mov	lr, r0
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	d962      	bls.n	8000b52 <__udivmoddi4+0xde>
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	4091      	lsls	r1, r2
 8000a94:	fa20 f303 	lsr.w	r3, r0, r3
 8000a98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa6:	fa1f f68c 	uxth.w	r6, ip
 8000aaa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ab2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb04 f106 	mul.w	r1, r4, r6
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000aca:	f080 8112 	bcs.w	8000cf2 <__udivmoddi4+0x27e>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 810f 	bls.w	8000cf2 <__udivmoddi4+0x27e>
 8000ad4:	3c02      	subs	r4, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a59      	subs	r1, r3, r1
 8000ada:	fa1f f38e 	uxth.w	r3, lr
 8000ade:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ae6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aea:	fb00 f606 	mul.w	r6, r0, r6
 8000aee:	429e      	cmp	r6, r3
 8000af0:	d90a      	bls.n	8000b08 <__udivmoddi4+0x94>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000afa:	f080 80fc 	bcs.w	8000cf6 <__udivmoddi4+0x282>
 8000afe:	429e      	cmp	r6, r3
 8000b00:	f240 80f9 	bls.w	8000cf6 <__udivmoddi4+0x282>
 8000b04:	4463      	add	r3, ip
 8000b06:	3802      	subs	r0, #2
 8000b08:	1b9b      	subs	r3, r3, r6
 8000b0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b0e:	2100      	movs	r1, #0
 8000b10:	b11d      	cbz	r5, 8000b1a <__udivmoddi4+0xa6>
 8000b12:	40d3      	lsrs	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d905      	bls.n	8000b2e <__udivmoddi4+0xba>
 8000b22:	b10d      	cbz	r5, 8000b28 <__udivmoddi4+0xb4>
 8000b24:	e9c5 0100 	strd	r0, r1, [r5]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e7f5      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b2e:	fab3 f183 	clz	r1, r3
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d146      	bne.n	8000bc4 <__udivmoddi4+0x150>
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xcc>
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	f0c0 80f0 	bcc.w	8000d20 <__udivmoddi4+0x2ac>
 8000b40:	1a86      	subs	r6, r0, r2
 8000b42:	eb64 0303 	sbc.w	r3, r4, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d0e6      	beq.n	8000b1a <__udivmoddi4+0xa6>
 8000b4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b50:	e7e3      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	f040 8090 	bne.w	8000c78 <__udivmoddi4+0x204>
 8000b58:	eba1 040c 	sub.w	r4, r1, ip
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	fa1f f78c 	uxth.w	r7, ip
 8000b64:	2101      	movs	r1, #1
 8000b66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b76:	fb07 f006 	mul.w	r0, r7, r6
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0x11c>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x11a>
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	f200 80cd 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b8e:	4626      	mov	r6, r4
 8000b90:	1a1c      	subs	r4, r3, r0
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba2:	fb00 f707 	mul.w	r7, r0, r7
 8000ba6:	429f      	cmp	r7, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x148>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x146>
 8000bb4:	429f      	cmp	r7, r3
 8000bb6:	f200 80b0 	bhi.w	8000d1a <__udivmoddi4+0x2a6>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	1bdb      	subs	r3, r3, r7
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	e7a5      	b.n	8000b10 <__udivmoddi4+0x9c>
 8000bc4:	f1c1 0620 	rsb	r6, r1, #32
 8000bc8:	408b      	lsls	r3, r1
 8000bca:	fa22 f706 	lsr.w	r7, r2, r6
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bd8:	ea43 030c 	orr.w	r3, r3, ip
 8000bdc:	40f4      	lsrs	r4, r6
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	0c38      	lsrs	r0, r7, #16
 8000be4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000be8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bfc:	45a1      	cmp	r9, r4
 8000bfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x1a6>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c0a:	f080 8084 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000c0e:	45a1      	cmp	r9, r4
 8000c10:	f240 8081 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000c14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	eba4 0409 	sub.w	r4, r4, r9
 8000c1e:	fa1f f983 	uxth.w	r9, r3
 8000c22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c26:	fb00 4413 	mls	r4, r0, r3, r4
 8000c2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x1d2>
 8000c36:	193c      	adds	r4, r7, r4
 8000c38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c3c:	d267      	bcs.n	8000d0e <__udivmoddi4+0x29a>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0x29a>
 8000c42:	3b02      	subs	r3, #2
 8000c44:	443c      	add	r4, r7
 8000c46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	429c      	cmp	r4, r3
 8000c54:	46ce      	mov	lr, r9
 8000c56:	469c      	mov	ip, r3
 8000c58:	d351      	bcc.n	8000cfe <__udivmoddi4+0x28a>
 8000c5a:	d04e      	beq.n	8000cfa <__udivmoddi4+0x286>
 8000c5c:	b155      	cbz	r5, 8000c74 <__udivmoddi4+0x200>
 8000c5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c62:	eb64 040c 	sbc.w	r4, r4, ip
 8000c66:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6a:	40cb      	lsrs	r3, r1
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	40cc      	lsrs	r4, r1
 8000c70:	e9c5 6400 	strd	r6, r4, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e750      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000c78:	f1c2 0320 	rsb	r3, r2, #32
 8000c7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c84:	fa24 f303 	lsr.w	r3, r4, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	430c      	orrs	r4, r1
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca0:	0c23      	lsrs	r3, r4, #16
 8000ca2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca6:	fb00 f107 	mul.w	r1, r0, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x24c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cb6:	d22c      	bcs.n	8000d12 <__udivmoddi4+0x29e>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d92a      	bls.n	8000d12 <__udivmoddi4+0x29e>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb01 f307 	mul.w	r3, r1, r7
 8000cd4:	42a3      	cmp	r3, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x276>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ce0:	d213      	bcs.n	8000d0a <__udivmoddi4+0x296>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d911      	bls.n	8000d0a <__udivmoddi4+0x296>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4464      	add	r4, ip
 8000cea:	1ae4      	subs	r4, r4, r3
 8000cec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf0:	e739      	b.n	8000b66 <__udivmoddi4+0xf2>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	e6f0      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e706      	b.n	8000b08 <__udivmoddi4+0x94>
 8000cfa:	45c8      	cmp	r8, r9
 8000cfc:	d2ae      	bcs.n	8000c5c <__udivmoddi4+0x1e8>
 8000cfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7a8      	b.n	8000c5c <__udivmoddi4+0x1e8>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7ed      	b.n	8000cea <__udivmoddi4+0x276>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e799      	b.n	8000c46 <__udivmoddi4+0x1d2>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e7d4      	b.n	8000cc0 <__udivmoddi4+0x24c>
 8000d16:	46d6      	mov	lr, sl
 8000d18:	e77f      	b.n	8000c1a <__udivmoddi4+0x1a6>
 8000d1a:	4463      	add	r3, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	e74d      	b.n	8000bbc <__udivmoddi4+0x148>
 8000d20:	4606      	mov	r6, r0
 8000d22:	4623      	mov	r3, r4
 8000d24:	4608      	mov	r0, r1
 8000d26:	e70f      	b.n	8000b48 <__udivmoddi4+0xd4>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	e730      	b.n	8000b90 <__udivmoddi4+0x11c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	0000      	movs	r0, r0
	...

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f000 fb39 	bl	80013b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f85b 	bl	8000dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 f94f 	bl	8000fe8 <MX_GPIO_Init>
  MX_DAC_Init();
 8000d4a:	f000 f8c3 	bl	8000ed4 <MX_DAC_Init>
  MX_TIM6_Init();
 8000d4e:	f000 f8eb 	bl	8000f28 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000d52:	f000 f91f 	bl	8000f94 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Запуск таймера в режиме прерываний
  HAL_TIM_Base_Start_IT(&htim6); // Убедитесь, что имя htim6 соответствует вашему таймеру
 8000d56:	4824      	ldr	r0, [pc, #144]	@ (8000de8 <main+0xb0>)
 8000d58:	f001 fdee 	bl	8002938 <HAL_TIM_Base_Start_IT>

  // Запуск ЦАП
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1); // Убедитесь, что используете правильный канал
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4823      	ldr	r0, [pc, #140]	@ (8000dec <main+0xb4>)
 8000d60:	f000 fccd 	bl	80016fe <HAL_DAC_Start>
  float amplitude_scale = 0.6667; // Scaling factor to reduce amplitude
 8000d64:	4b22      	ldr	r3, [pc, #136]	@ (8000df0 <main+0xb8>)
 8000d66:	603b      	str	r3, [r7, #0]
  for(int i = 0; i < SAMPLES; i++)
 8000d68:	2300      	movs	r3, #0
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	e032      	b.n	8000dd4 <main+0x9c>
  {
      sine_wave[i] = (sinf(2 * M_PI * i / SAMPLES) * amplitude_scale + 1) / 2;
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff fb9c 	bl	80004ac <__aeabi_i2d>
 8000d74:	a31a      	add	r3, pc, #104	@ (adr r3, 8000de0 <main+0xa8>)
 8000d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7a:	f7ff fc01 	bl	8000580 <__aeabi_dmul>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f04f 0200 	mov.w	r2, #0
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <main+0xbc>)
 8000d8c:	f7ff fd22 	bl	80007d4 <__aeabi_ddiv>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f7ff fe04 	bl	80009a4 <__aeabi_d2f>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	ee00 3a10 	vmov	s0, r3
 8000da2:	f002 ffd7 	bl	8003d54 <sinf>
 8000da6:	eeb0 7a40 	vmov.f32	s14, s0
 8000daa:	edd7 7a00 	vldr	s15, [r7]
 8000dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000db2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000dba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000dbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <main+0xc0>)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	edc3 7a00 	vstr	s15, [r3]
  for(int i = 0; i < SAMPLES; i++)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b63      	cmp	r3, #99	@ 0x63
 8000dd8:	ddc9      	ble.n	8000d6e <main+0x36>
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dda:	bf00      	nop
 8000ddc:	e7fd      	b.n	8000dda <main+0xa2>
 8000dde:	bf00      	nop
 8000de0:	54442d18 	.word	0x54442d18
 8000de4:	401921fb 	.word	0x401921fb
 8000de8:	200001cc 	.word	0x200001cc
 8000dec:	200001b8 	.word	0x200001b8
 8000df0:	3f2aacda 	.word	0x3f2aacda
 8000df4:	40590000 	.word	0x40590000
 8000df8:	20000028 	.word	0x20000028

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b094      	sub	sp, #80	@ 0x50
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2234      	movs	r2, #52	@ 0x34
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f002 ff76 	bl	8003cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	f107 0308 	add.w	r3, r7, #8
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	607b      	str	r3, [r7, #4]
 8000e24:	4b29      	ldr	r3, [pc, #164]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e28:	4a28      	ldr	r2, [pc, #160]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e30:	4b26      	ldr	r3, [pc, #152]	@ (8000ecc <SystemClock_Config+0xd0>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a22      	ldr	r2, [pc, #136]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e4a:	6013      	str	r3, [r2, #0]
 8000e4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <SystemClock_Config+0xd4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e60:	2310      	movs	r3, #16
 8000e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e64:	2302      	movs	r3, #2
 8000e66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e6c:	2308      	movs	r3, #8
 8000e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000e70:	23a0      	movs	r3, #160	@ 0xa0
 8000e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e74:	2302      	movs	r3, #2
 8000e76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e80:	f107 031c 	add.w	r3, r7, #28
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fa69 	bl	800235c <HAL_RCC_OscConfig>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e90:	f000 f91a 	bl	80010c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e94:	230f      	movs	r3, #15
 8000e96:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ea0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ea4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eaa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000eac:	f107 0308 	add.w	r3, r7, #8
 8000eb0:	2105      	movs	r1, #5
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 ff8e 	bl	8001dd4 <HAL_RCC_ClockConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000ebe:	f000 f903 	bl	80010c8 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3750      	adds	r7, #80	@ 0x50
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40007000 	.word	0x40007000

08000ed4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <MX_DAC_Init+0x4c>)
 8000ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8000f24 <MX_DAC_Init+0x50>)
 8000ee6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ee8:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <MX_DAC_Init+0x4c>)
 8000eea:	f000 fbe6 	bl	80016ba <HAL_DAC_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ef4:	f000 f8e8 	bl	80010c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	2200      	movs	r2, #0
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	@ (8000f20 <MX_DAC_Init+0x4c>)
 8000f08:	f000 fcda 	bl	80018c0 <HAL_DAC_ConfigChannel>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f12:	f000 f8d9 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001b8 	.word	0x200001b8
 8000f24:	40007400 	.word	0x40007400

08000f28 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]

  htim6.Instance = TIM6;
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <MX_TIM6_Init+0x64>)
 8000f38:	4a15      	ldr	r2, [pc, #84]	@ (8000f90 <MX_TIM6_Init+0x68>)
 8000f3a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	@ (8000f8c <MX_TIM6_Init+0x64>)
 8000f3e:	2227      	movs	r2, #39	@ 0x27
 8000f40:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <MX_TIM6_Init+0x64>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000f48:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MX_TIM6_Init+0x64>)
 8000f4a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f4e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f50:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_TIM6_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f56:	480d      	ldr	r0, [pc, #52]	@ (8000f8c <MX_TIM6_Init+0x64>)
 8000f58:	f001 fc9e 	bl	8002898 <HAL_TIM_Base_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000f62:	f000 f8b1 	bl	80010c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	@ (8000f8c <MX_TIM6_Init+0x64>)
 8000f74:	f001 ff14 	bl	8002da0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000f7e:	f000 f8a3 	bl	80010c8 <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001cc 	.word	0x200001cc
 8000f90:	40001000 	.word	0x40001000

08000f94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f98:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	@ (8000fe4 <MX_USART2_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	@ (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f001 ff78 	bl	8002ec0 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd6:	f000 f877 	bl	80010c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000214 	.word	0x20000214
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <MX_GPIO_Init+0x68>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a16      	ldr	r2, [pc, #88]	@ (8001050 <MX_GPIO_Init+0x68>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <MX_GPIO_Init+0x68>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <MX_GPIO_Init+0x68>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a0f      	ldr	r2, [pc, #60]	@ (8001050 <MX_GPIO_Init+0x68>)
 8001014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <MX_GPIO_Init+0x68>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_GPIO_Init+0x68>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a08      	ldr	r2, [pc, #32]	@ (8001050 <MX_GPIO_Init+0x68>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_GPIO_Init+0x68>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
static uint32_t sample_index = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a14      	ldr	r2, [pc, #80]	@ (80010b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d121      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x56>
    {
        // Преобразуем значение из массива в значение для ЦАП
        uint32_t dac_value = (uint32_t)(sine_wave[sample_index] * 4095); // Приводим к диапазону 0-4095
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a14      	ldr	r2, [pc, #80]	@ (80010bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010c0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001078:	ee67 7a87 	vmul.f32	s15, s15, s14
 800107c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001080:	ee17 3a90 	vmov	r3, s15
 8001084:	60fb      	str	r3, [r7, #12]

        // Устанавливаем значение на ЦАП
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800108e:	f000 fbe3 	bl	8001858 <HAL_DAC_SetValue>

        // Увеличиваем индекс и проверяем на переполнение
        sample_index++;
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	3301      	adds	r3, #1
 8001098:	4a07      	ldr	r2, [pc, #28]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800109a:	6013      	str	r3, [r2, #0]
        if(sample_index >= SAMPLES)
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	2b63      	cmp	r3, #99	@ 0x63
 80010a2:	d902      	bls.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x56>
        {
            sample_index = 0;
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
        }
    }
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40001000 	.word	0x40001000
 80010b8:	2000025c 	.word	0x2000025c
 80010bc:	20000028 	.word	0x20000028
 80010c0:	457ff000 	.word	0x457ff000
 80010c4:	200001b8 	.word	0x200001b8

080010c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010cc:	b672      	cpsid	i
}
 80010ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <Error_Handler+0x8>

080010d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	4b10      	ldr	r3, [pc, #64]	@ (8001120 <HAL_MspInit+0x4c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <HAL_MspInit+0x4c>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001120 <HAL_MspInit+0x4c>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <HAL_MspInit+0x4c>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	4a08      	ldr	r2, [pc, #32]	@ (8001120 <HAL_MspInit+0x4c>)
 8001100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001104:	6413      	str	r3, [r2, #64]	@ 0x40
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <HAL_MspInit+0x4c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800

08001124 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a1b      	ldr	r2, [pc, #108]	@ (80011b0 <HAL_DAC_MspInit+0x8c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d12f      	bne.n	80011a6 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	613b      	str	r3, [r7, #16]
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <HAL_DAC_MspInit+0x90>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	4a19      	ldr	r2, [pc, #100]	@ (80011b4 <HAL_DAC_MspInit+0x90>)
 8001150:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001154:	6413      	str	r3, [r2, #64]	@ 0x40
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_DAC_MspInit+0x90>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800115e:	613b      	str	r3, [r7, #16]
 8001160:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b13      	ldr	r3, [pc, #76]	@ (80011b4 <HAL_DAC_MspInit+0x90>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <HAL_DAC_MspInit+0x90>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6313      	str	r3, [r2, #48]	@ 0x30
 8001172:	4b10      	ldr	r3, [pc, #64]	@ (80011b4 <HAL_DAC_MspInit+0x90>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800117e:	2310      	movs	r3, #16
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4809      	ldr	r0, [pc, #36]	@ (80011b8 <HAL_DAC_MspInit+0x94>)
 8001192:	f000 fc8b 	bl	8001aac <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2036      	movs	r0, #54	@ 0x36
 800119c:	f000 fa57 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011a0:	2036      	movs	r0, #54	@ 0x36
 80011a2:	f000 fa70 	bl	8001686 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40007400 	.word	0x40007400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000

080011bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_TIM_Base_MspInit+0x48>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d115      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <HAL_TIM_Base_MspInit+0x4c>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2036      	movs	r0, #54	@ 0x36
 80011f0:	f000 fa2d 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011f4:	2036      	movs	r0, #54	@ 0x36
 80011f6:	f000 fa46 	bl	8001686 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40001000 	.word	0x40001000
 8001208:	40023800 	.word	0x40023800

0800120c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a1d      	ldr	r2, [pc, #116]	@ (80012a0 <HAL_UART_MspInit+0x94>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d133      	bne.n	8001296 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	4b1c      	ldr	r3, [pc, #112]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a1b      	ldr	r2, [pc, #108]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001252:	4a14      	ldr	r2, [pc, #80]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	@ 0x30
 800125a:	4b12      	ldr	r3, [pc, #72]	@ (80012a4 <HAL_UART_MspInit+0x98>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001266:	230c      	movs	r3, #12
 8001268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001276:	2307      	movs	r3, #7
 8001278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0314 	add.w	r3, r7, #20
 800127e:	4619      	mov	r1, r3
 8001280:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <HAL_UART_MspInit+0x9c>)
 8001282:	f000 fc13 	bl	8001aac <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2026      	movs	r0, #38	@ 0x26
 800128c:	f000 f9df 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001290:	2026      	movs	r0, #38	@ 0x26
 8001292:	f000 f9f8 	bl	8001686 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001296:	bf00      	nop
 8001298:	3728      	adds	r7, #40	@ 0x28
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40004400 	.word	0x40004400
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020000 	.word	0x40020000

080012ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <NMI_Handler+0x4>

080012b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <MemManage_Handler+0x4>

080012c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <BusFault_Handler+0x4>

080012cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <UsageFault_Handler+0x4>

080012d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001302:	f000 f8a9 	bl	8001458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <USART2_IRQHandler+0x10>)
 8001312:	f001 fe25 	bl	8002f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000214 	.word	0x20000214

08001320 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001324:	4803      	ldr	r0, [pc, #12]	@ (8001334 <TIM6_DAC_IRQHandler+0x14>)
 8001326:	f000 fa41 	bl	80017ac <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 800132a:	4803      	ldr	r0, [pc, #12]	@ (8001338 <TIM6_DAC_IRQHandler+0x18>)
 800132c:	f001 fb74 	bl	8002a18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200001b8 	.word	0x200001b8
 8001338:	200001cc 	.word	0x200001cc

0800133c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <SystemInit+0x20>)
 8001342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <SystemInit+0x20>)
 8001348:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800134c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001360:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001398 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001364:	f7ff ffea 	bl	800133c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480c      	ldr	r0, [pc, #48]	@ (800139c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136a:	490d      	ldr	r1, [pc, #52]	@ (80013a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800136c:	4a0d      	ldr	r2, [pc, #52]	@ (80013a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0a      	ldr	r2, [pc, #40]	@ (80013a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001380:	4c0a      	ldr	r4, [pc, #40]	@ (80013ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800138e:	f002 fcbd 	bl	8003d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001392:	f7ff fcd1 	bl	8000d38 <main>
  bx  lr    
 8001396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800139c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013a4:	08004bd8 	.word	0x08004bd8
  ldr r2, =_sbss
 80013a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013ac:	20000264 	.word	0x20000264

080013b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b0:	e7fe      	b.n	80013b0 <ADC_IRQHandler>
	...

080013b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013b8:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0d      	ldr	r2, [pc, #52]	@ (80013f4 <HAL_Init+0x40>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c4:	4b0b      	ldr	r3, [pc, #44]	@ (80013f4 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <HAL_Init+0x40>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d0:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a07      	ldr	r2, [pc, #28]	@ (80013f4 <HAL_Init+0x40>)
 80013d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013dc:	2003      	movs	r0, #3
 80013de:	f000 f92b 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e2:	200f      	movs	r0, #15
 80013e4:	f000 f808 	bl	80013f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013e8:	f7ff fe74 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023c00 	.word	0x40023c00

080013f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001400:	4b12      	ldr	r3, [pc, #72]	@ (800144c <HAL_InitTick+0x54>)
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	4b12      	ldr	r3, [pc, #72]	@ (8001450 <HAL_InitTick+0x58>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800140e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001412:	fbb2 f3f3 	udiv	r3, r2, r3
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f943 	bl	80016a2 <HAL_SYSTICK_Config>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e00e      	b.n	8001444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d80a      	bhi.n	8001442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001434:	f000 f90b 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001438:	4a06      	ldr	r2, [pc, #24]	@ (8001454 <HAL_InitTick+0x5c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	e000      	b.n	8001444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000
 8001450:	20000008 	.word	0x20000008
 8001454:	20000004 	.word	0x20000004

08001458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800145c:	4b06      	ldr	r3, [pc, #24]	@ (8001478 <HAL_IncTick+0x20>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	461a      	mov	r2, r3
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x24>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4413      	add	r3, r2
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_IncTick+0x24>)
 800146a:	6013      	str	r3, [r2, #0]
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008
 800147c:	20000260 	.word	0x20000260

08001480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return uwTick;
 8001484:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <HAL_GetTick+0x14>)
 8001486:	681b      	ldr	r3, [r3, #0]
}
 8001488:	4618      	mov	r0, r3
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	20000260 	.word	0x20000260

08001498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a8:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014b4:	4013      	ands	r3, r2
 80014b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <__NVIC_SetPriorityGrouping+0x44>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <__NVIC_GetPriorityGrouping+0x18>)
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	f003 0307 	and.w	r3, r3, #7
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	2b00      	cmp	r3, #0
 800150c:	db0b      	blt.n	8001526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	f003 021f 	and.w	r2, r3, #31
 8001514:	4907      	ldr	r1, [pc, #28]	@ (8001534 <__NVIC_EnableIRQ+0x38>)
 8001516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151a:	095b      	lsrs	r3, r3, #5
 800151c:	2001      	movs	r0, #1
 800151e:	fa00 f202 	lsl.w	r2, r0, r2
 8001522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000e100 	.word	0xe000e100

08001538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4603      	mov	r3, r0
 8001540:	6039      	str	r1, [r7, #0]
 8001542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	2b00      	cmp	r3, #0
 800154a:	db0a      	blt.n	8001562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	b2da      	uxtb	r2, r3
 8001550:	490c      	ldr	r1, [pc, #48]	@ (8001584 <__NVIC_SetPriority+0x4c>)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	0112      	lsls	r2, r2, #4
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	440b      	add	r3, r1
 800155c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001560:	e00a      	b.n	8001578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	4908      	ldr	r1, [pc, #32]	@ (8001588 <__NVIC_SetPriority+0x50>)
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	f003 030f 	and.w	r3, r3, #15
 800156e:	3b04      	subs	r3, #4
 8001570:	0112      	lsls	r2, r2, #4
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	440b      	add	r3, r1
 8001576:	761a      	strb	r2, [r3, #24]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000e100 	.word	0xe000e100
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800158c:	b480      	push	{r7}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af00      	add	r7, sp, #0
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	f1c3 0307 	rsb	r3, r3, #7
 80015a6:	2b04      	cmp	r3, #4
 80015a8:	bf28      	it	cs
 80015aa:	2304      	movcs	r3, #4
 80015ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	3304      	adds	r3, #4
 80015b2:	2b06      	cmp	r3, #6
 80015b4:	d902      	bls.n	80015bc <NVIC_EncodePriority+0x30>
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3b03      	subs	r3, #3
 80015ba:	e000      	b.n	80015be <NVIC_EncodePriority+0x32>
 80015bc:	2300      	movs	r3, #0
 80015be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43da      	mvns	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	401a      	ands	r2, r3
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	fa01 f303 	lsl.w	r3, r1, r3
 80015de:	43d9      	mvns	r1, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e4:	4313      	orrs	r3, r2
         );
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3724      	adds	r7, #36	@ 0x24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
	...

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001618:	f7ff ff8e 	bl	8001538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff29 	bl	8001498 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff3e 	bl	80014e0 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff8e 	bl	800158c <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5d 	bl	8001538 <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff31 	bl	80014fc <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b082      	sub	sp, #8
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e014      	b.n	80016f6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d105      	bne.n	80016e2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff fd21 	bl	8001124 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2202      	movs	r2, #2
 80016e6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d101      	bne.n	8001712 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e046      	b.n	80017a0 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	795b      	ldrb	r3, [r3, #5]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_DAC_Start+0x20>
 800171a:	2302      	movs	r3, #2
 800171c:	e040      	b.n	80017a0 <HAL_DAC_Start+0xa2>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2201      	movs	r2, #1
 8001738:	409a      	lsls	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d10f      	bne.n	8001768 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001752:	2b3c      	cmp	r3, #60	@ 0x3c
 8001754:	d11d      	bne.n	8001792 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	e014      	b.n	8001792 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	f003 0310 	and.w	r3, r3, #16
 8001778:	213c      	movs	r1, #60	@ 0x3c
 800177a:	fa01 f303 	lsl.w	r3, r1, r3
 800177e:	429a      	cmp	r2, r3
 8001780:	d107      	bne.n	8001792 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f042 0202 	orr.w	r2, r2, #2
 8001790:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c2:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01d      	beq.n	800180a <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d018      	beq.n	800180a <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2204      	movs	r2, #4
 80017dc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	f043 0201 	orr.w	r2, r3, #1
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001802:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f851 	bl	80018ac <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01d      	beq.n	8001850 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d018      	beq.n	8001850 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2204      	movs	r2, #4
 8001822:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f043 0202 	orr.w	r2, r3, #2
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001838:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001848:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f891 	bl	8001972 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001850:	bf00      	nop
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001858:	b480      	push	{r7}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e015      	b.n	80018a0 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d105      	bne.n	800188c <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	3308      	adds	r3, #8
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	e004      	b.n	8001896 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	3314      	adds	r3, #20
 8001894:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	461a      	mov	r2, r3
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018cc:	2300      	movs	r3, #0
 80018ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_DAC_ConfigChannel+0x1c>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e042      	b.n	8001966 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	795b      	ldrb	r3, [r3, #5]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_DAC_ConfigChannel+0x2c>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e03c      	b.n	8001966 <HAL_DAC_ConfigChannel+0xa6>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2201      	movs	r2, #1
 80018f0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2202      	movs	r2, #2
 80018f6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0310 	and.w	r3, r3, #16
 8001906:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	4313      	orrs	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	4313      	orrs	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6819      	ldr	r1, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f003 0310 	and.w	r3, r3, #16
 8001948:	22c0      	movs	r2, #192	@ 0xc0
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	400a      	ands	r2, r1
 8001956:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001964:	7ffb      	ldrb	r3, [r7, #31]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001972:	b480      	push	{r7}
 8001974:	b083      	sub	sp, #12
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001994:	f7ff fd74 	bl	8001480 <HAL_GetTick>
 8001998:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d008      	beq.n	80019b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2280      	movs	r2, #128	@ 0x80
 80019aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e052      	b.n	8001a5e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0216 	bic.w	r2, r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695a      	ldr	r2, [r3, #20]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80019d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d103      	bne.n	80019e8 <HAL_DMA_Abort+0x62>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d007      	beq.n	80019f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0208 	bic.w	r2, r2, #8
 80019f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f022 0201 	bic.w	r2, r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a08:	e013      	b.n	8001a32 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a0a:	f7ff fd39 	bl	8001480 <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b05      	cmp	r3, #5
 8001a16:	d90c      	bls.n	8001a32 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2203      	movs	r2, #3
 8001a22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e015      	b.n	8001a5e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1e4      	bne.n	8001a0a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a44:	223f      	movs	r2, #63	@ 0x3f
 8001a46:	409a      	lsls	r2, r3
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d004      	beq.n	8001a84 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2280      	movs	r2, #128	@ 0x80
 8001a7e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e00c      	b.n	8001a9e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2205      	movs	r2, #5
 8001a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	@ 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61fb      	str	r3, [r7, #28]
 8001ac6:	e165      	b.n	8001d94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac8:	2201      	movs	r2, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8154 	bne.w	8001d8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d005      	beq.n	8001afe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d130      	bne.n	8001b60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	2203      	movs	r2, #3
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 0201 	and.w	r2, r3, #1
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	2b03      	cmp	r3, #3
 8001b6a:	d017      	beq.n	8001b9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d123      	bne.n	8001bf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0307 	and.w	r3, r3, #7
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	220f      	movs	r2, #15
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	08da      	lsrs	r2, r3, #3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3208      	adds	r2, #8
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0203 	and.w	r2, r3, #3
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80ae 	beq.w	8001d8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b5d      	ldr	r3, [pc, #372]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3a:	4a5c      	ldr	r2, [pc, #368]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c42:	4b5a      	ldr	r3, [pc, #360]	@ (8001dac <HAL_GPIO_Init+0x300>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4e:	4a58      	ldr	r2, [pc, #352]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	220f      	movs	r2, #15
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4f      	ldr	r2, [pc, #316]	@ (8001db4 <HAL_GPIO_Init+0x308>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d025      	beq.n	8001cc6 <HAL_GPIO_Init+0x21a>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001db8 <HAL_GPIO_Init+0x30c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01f      	beq.n	8001cc2 <HAL_GPIO_Init+0x216>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4d      	ldr	r2, [pc, #308]	@ (8001dbc <HAL_GPIO_Init+0x310>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d019      	beq.n	8001cbe <HAL_GPIO_Init+0x212>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001dc0 <HAL_GPIO_Init+0x314>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x20e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc4 <HAL_GPIO_Init+0x318>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x20a>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc8 <HAL_GPIO_Init+0x31c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x206>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a49      	ldr	r2, [pc, #292]	@ (8001dcc <HAL_GPIO_Init+0x320>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x202>
 8001caa:	2306      	movs	r3, #6
 8001cac:	e00c      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cae:	2307      	movs	r3, #7
 8001cb0:	e00a      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	e008      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e004      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e002      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x21c>
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	f002 0203 	and.w	r2, r2, #3
 8001cce:	0092      	lsls	r2, r2, #2
 8001cd0:	4093      	lsls	r3, r2
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cd8:	4935      	ldr	r1, [pc, #212]	@ (8001db0 <HAL_GPIO_Init+0x304>)
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	089b      	lsrs	r3, r3, #2
 8001cde:	3302      	adds	r3, #2
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d02:	69ba      	ldr	r2, [r7, #24]
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0a:	4a31      	ldr	r2, [pc, #196]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d10:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d34:	4a26      	ldr	r2, [pc, #152]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d88:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_GPIO_Init+0x324>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3301      	adds	r3, #1
 8001d92:	61fb      	str	r3, [r7, #28]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	2b0f      	cmp	r3, #15
 8001d98:	f67f ae96 	bls.w	8001ac8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3724      	adds	r7, #36	@ 0x24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40013800 	.word	0x40013800
 8001db4:	40020000 	.word	0x40020000
 8001db8:	40020400 	.word	0x40020400
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020c00 	.word	0x40020c00
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40021400 	.word	0x40021400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40013c00 	.word	0x40013c00

08001dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0cc      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b68      	ldr	r3, [pc, #416]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d90c      	bls.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b65      	ldr	r3, [pc, #404]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b63      	ldr	r3, [pc, #396]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0b8      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d020      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	4b59      	ldr	r3, [pc, #356]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a58      	ldr	r2, [pc, #352]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e40:	4b53      	ldr	r3, [pc, #332]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	4a52      	ldr	r2, [pc, #328]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b50      	ldr	r3, [pc, #320]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	494d      	ldr	r1, [pc, #308]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d044      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d119      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e07f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e8e:	2b03      	cmp	r3, #3
 8001e90:	d107      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e92:	4b3f      	ldr	r3, [pc, #252]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d109      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e06f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e067      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eb2:	4b37      	ldr	r3, [pc, #220]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	f023 0203 	bic.w	r2, r3, #3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	4934      	ldr	r1, [pc, #208]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ec4:	f7ff fadc 	bl	8001480 <HAL_GetTick>
 8001ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	e00a      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ecc:	f7ff fad8 	bl	8001480 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e04f      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 020c 	and.w	r2, r3, #12
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d1eb      	bne.n	8001ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b25      	ldr	r3, [pc, #148]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d20c      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b22      	ldr	r3, [pc, #136]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	@ (8001f8c <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d001      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e032      	b.n	8001f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d008      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f28:	4b19      	ldr	r3, [pc, #100]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4916      	ldr	r1, [pc, #88]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f46:	4b12      	ldr	r3, [pc, #72]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	490e      	ldr	r1, [pc, #56]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f5a:	f000 f855 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	4b0b      	ldr	r3, [pc, #44]	@ (8001f90 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	091b      	lsrs	r3, r3, #4
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	490a      	ldr	r1, [pc, #40]	@ (8001f94 <HAL_RCC_ClockConfig+0x1c0>)
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f72:	4a09      	ldr	r2, [pc, #36]	@ (8001f98 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f76:	4b09      	ldr	r3, [pc, #36]	@ (8001f9c <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fa3c 	bl	80013f8 <HAL_InitTick>

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3710      	adds	r7, #16
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00
 8001f90:	40023800 	.word	0x40023800
 8001f94:	080047e0 	.word	0x080047e0
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	20000004 	.word	0x20000004

08001fa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	@ (8001fb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000000 	.word	0x20000000

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fbc:	f7ff fff0 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0a9b      	lsrs	r3, r3, #10
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	@ (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	080047f0 	.word	0x080047f0

08001fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fe4:	f7ff ffdc 	bl	8001fa0 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0b5b      	lsrs	r3, r3, #13
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	@ (8002004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	080047f0 	.word	0x080047f0

08002008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800200c:	b0a6      	sub	sp, #152	@ 0x98
 800200e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002016:	2300      	movs	r3, #0
 8002018:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800202e:	4bc8      	ldr	r3, [pc, #800]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b0c      	cmp	r3, #12
 8002038:	f200 817e 	bhi.w	8002338 <HAL_RCC_GetSysClockFreq+0x330>
 800203c:	a201      	add	r2, pc, #4	@ (adr r2, 8002044 <HAL_RCC_GetSysClockFreq+0x3c>)
 800203e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002042:	bf00      	nop
 8002044:	08002079 	.word	0x08002079
 8002048:	08002339 	.word	0x08002339
 800204c:	08002339 	.word	0x08002339
 8002050:	08002339 	.word	0x08002339
 8002054:	08002081 	.word	0x08002081
 8002058:	08002339 	.word	0x08002339
 800205c:	08002339 	.word	0x08002339
 8002060:	08002339 	.word	0x08002339
 8002064:	08002089 	.word	0x08002089
 8002068:	08002339 	.word	0x08002339
 800206c:	08002339 	.word	0x08002339
 8002070:	08002339 	.word	0x08002339
 8002074:	080021f3 	.word	0x080021f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4bb6      	ldr	r3, [pc, #728]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x34c>)
 800207a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800207e:	e15f      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002080:	4bb5      	ldr	r3, [pc, #724]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x350>)
 8002082:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002086:	e15b      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002088:	4bb1      	ldr	r3, [pc, #708]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002090:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002094:	4bae      	ldr	r3, [pc, #696]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d031      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020a0:	4bab      	ldr	r3, [pc, #684]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	099b      	lsrs	r3, r3, #6
 80020a6:	2200      	movs	r2, #0
 80020a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80020aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80020ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80020b4:	2300      	movs	r3, #0
 80020b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80020b8:	4ba7      	ldr	r3, [pc, #668]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x350>)
 80020ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80020be:	462a      	mov	r2, r5
 80020c0:	fb03 f202 	mul.w	r2, r3, r2
 80020c4:	2300      	movs	r3, #0
 80020c6:	4621      	mov	r1, r4
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	4413      	add	r3, r2
 80020ce:	4aa2      	ldr	r2, [pc, #648]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x350>)
 80020d0:	4621      	mov	r1, r4
 80020d2:	fba1 1202 	umull	r1, r2, r1, r2
 80020d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80020d8:	460a      	mov	r2, r1
 80020da:	67ba      	str	r2, [r7, #120]	@ 0x78
 80020dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80020de:	4413      	add	r3, r2
 80020e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80020e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80020e6:	2200      	movs	r2, #0
 80020e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80020ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80020ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80020f4:	f7fe fca6 	bl	8000a44 <__aeabi_uldivmod>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4613      	mov	r3, r2
 80020fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002102:	e064      	b.n	80021ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002104:	4b92      	ldr	r3, [pc, #584]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	099b      	lsrs	r3, r3, #6
 800210a:	2200      	movs	r2, #0
 800210c:	653b      	str	r3, [r7, #80]	@ 0x50
 800210e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002118:	2300      	movs	r3, #0
 800211a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800211c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002120:	4622      	mov	r2, r4
 8002122:	462b      	mov	r3, r5
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	f04f 0100 	mov.w	r1, #0
 800212c:	0159      	lsls	r1, r3, #5
 800212e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002132:	0150      	lsls	r0, r2, #5
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	4621      	mov	r1, r4
 800213a:	1a51      	subs	r1, r2, r1
 800213c:	6139      	str	r1, [r7, #16]
 800213e:	4629      	mov	r1, r5
 8002140:	eb63 0301 	sbc.w	r3, r3, r1
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	f04f 0300 	mov.w	r3, #0
 800214e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002152:	4659      	mov	r1, fp
 8002154:	018b      	lsls	r3, r1, #6
 8002156:	4651      	mov	r1, sl
 8002158:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800215c:	4651      	mov	r1, sl
 800215e:	018a      	lsls	r2, r1, #6
 8002160:	4651      	mov	r1, sl
 8002162:	ebb2 0801 	subs.w	r8, r2, r1
 8002166:	4659      	mov	r1, fp
 8002168:	eb63 0901 	sbc.w	r9, r3, r1
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002178:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800217c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002180:	4690      	mov	r8, r2
 8002182:	4699      	mov	r9, r3
 8002184:	4623      	mov	r3, r4
 8002186:	eb18 0303 	adds.w	r3, r8, r3
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	462b      	mov	r3, r5
 800218e:	eb49 0303 	adc.w	r3, r9, r3
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80021a0:	4629      	mov	r1, r5
 80021a2:	028b      	lsls	r3, r1, #10
 80021a4:	4621      	mov	r1, r4
 80021a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021aa:	4621      	mov	r1, r4
 80021ac:	028a      	lsls	r2, r1, #10
 80021ae:	4610      	mov	r0, r2
 80021b0:	4619      	mov	r1, r3
 80021b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80021b6:	2200      	movs	r2, #0
 80021b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80021ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80021bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021c0:	f7fe fc40 	bl	8000a44 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021ce:	4b60      	ldr	r3, [pc, #384]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	3301      	adds	r3, #1
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80021e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80021e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80021f0:	e0a6      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f2:	4b57      	ldr	r3, [pc, #348]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021fe:	4b54      	ldr	r3, [pc, #336]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d02a      	beq.n	8002260 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800220a:	4b51      	ldr	r3, [pc, #324]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	099b      	lsrs	r3, r3, #6
 8002210:	2200      	movs	r2, #0
 8002212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002214:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002218:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800221c:	2100      	movs	r1, #0
 800221e:	4b4e      	ldr	r3, [pc, #312]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x350>)
 8002220:	fb03 f201 	mul.w	r2, r3, r1
 8002224:	2300      	movs	r3, #0
 8002226:	fb00 f303 	mul.w	r3, r0, r3
 800222a:	4413      	add	r3, r2
 800222c:	4a4a      	ldr	r2, [pc, #296]	@ (8002358 <HAL_RCC_GetSysClockFreq+0x350>)
 800222e:	fba0 1202 	umull	r1, r2, r0, r2
 8002232:	677a      	str	r2, [r7, #116]	@ 0x74
 8002234:	460a      	mov	r2, r1
 8002236:	673a      	str	r2, [r7, #112]	@ 0x70
 8002238:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800223a:	4413      	add	r3, r2
 800223c:	677b      	str	r3, [r7, #116]	@ 0x74
 800223e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002242:	2200      	movs	r2, #0
 8002244:	633b      	str	r3, [r7, #48]	@ 0x30
 8002246:	637a      	str	r2, [r7, #52]	@ 0x34
 8002248:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800224c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002250:	f7fe fbf8 	bl	8000a44 <__aeabi_uldivmod>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4613      	mov	r3, r2
 800225a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800225e:	e05b      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002260:	4b3b      	ldr	r3, [pc, #236]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	099b      	lsrs	r3, r3, #6
 8002266:	2200      	movs	r2, #0
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800226a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800226c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800226e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002272:	623b      	str	r3, [r7, #32]
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
 8002278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800227c:	4642      	mov	r2, r8
 800227e:	464b      	mov	r3, r9
 8002280:	f04f 0000 	mov.w	r0, #0
 8002284:	f04f 0100 	mov.w	r1, #0
 8002288:	0159      	lsls	r1, r3, #5
 800228a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800228e:	0150      	lsls	r0, r2, #5
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4641      	mov	r1, r8
 8002296:	ebb2 0a01 	subs.w	sl, r2, r1
 800229a:	4649      	mov	r1, r9
 800229c:	eb63 0b01 	sbc.w	fp, r3, r1
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022b4:	ebb2 040a 	subs.w	r4, r2, sl
 80022b8:	eb63 050b 	sbc.w	r5, r3, fp
 80022bc:	f04f 0200 	mov.w	r2, #0
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	00eb      	lsls	r3, r5, #3
 80022c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ca:	00e2      	lsls	r2, r4, #3
 80022cc:	4614      	mov	r4, r2
 80022ce:	461d      	mov	r5, r3
 80022d0:	4643      	mov	r3, r8
 80022d2:	18e3      	adds	r3, r4, r3
 80022d4:	603b      	str	r3, [r7, #0]
 80022d6:	464b      	mov	r3, r9
 80022d8:	eb45 0303 	adc.w	r3, r5, r3
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022ea:	4629      	mov	r1, r5
 80022ec:	028b      	lsls	r3, r1, #10
 80022ee:	4621      	mov	r1, r4
 80022f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022f4:	4621      	mov	r1, r4
 80022f6:	028a      	lsls	r2, r1, #10
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002300:	2200      	movs	r2, #0
 8002302:	61bb      	str	r3, [r7, #24]
 8002304:	61fa      	str	r2, [r7, #28]
 8002306:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800230a:	f7fe fb9b 	bl	8000a44 <__aeabi_uldivmod>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4613      	mov	r3, r2
 8002314:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002318:	4b0d      	ldr	r3, [pc, #52]	@ (8002350 <HAL_RCC_GetSysClockFreq+0x348>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	0f1b      	lsrs	r3, r3, #28
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002326:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800232a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800232e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002332:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002336:	e003      	b.n	8002340 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002338:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_RCC_GetSysClockFreq+0x34c>)
 800233a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800233e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002340:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002344:	4618      	mov	r0, r3
 8002346:	3798      	adds	r7, #152	@ 0x98
 8002348:	46bd      	mov	sp, r7
 800234a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	00f42400 	.word	0x00f42400
 8002358:	006ddd00 	.word	0x006ddd00

0800235c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e28d      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8083 	beq.w	8002482 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800237c:	4b94      	ldr	r3, [pc, #592]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b04      	cmp	r3, #4
 8002386:	d019      	beq.n	80023bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002388:	4b91      	ldr	r3, [pc, #580]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002390:	2b08      	cmp	r3, #8
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002394:	4b8e      	ldr	r3, [pc, #568]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800239c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023a0:	d00c      	beq.n	80023bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b8b      	ldr	r3, [pc, #556]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d112      	bne.n	80023d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ae:	4b88      	ldr	r3, [pc, #544]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023bc:	4b84      	ldr	r3, [pc, #528]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d05b      	beq.n	8002480 <HAL_RCC_OscConfig+0x124>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d157      	bne.n	8002480 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e25a      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023dc:	d106      	bne.n	80023ec <HAL_RCC_OscConfig+0x90>
 80023de:	4b7c      	ldr	r3, [pc, #496]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a7b      	ldr	r2, [pc, #492]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e01d      	b.n	8002428 <HAL_RCC_OscConfig+0xcc>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023f4:	d10c      	bne.n	8002410 <HAL_RCC_OscConfig+0xb4>
 80023f6:	4b76      	ldr	r3, [pc, #472]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a75      	ldr	r2, [pc, #468]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80023fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b73      	ldr	r3, [pc, #460]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a72      	ldr	r2, [pc, #456]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	e00b      	b.n	8002428 <HAL_RCC_OscConfig+0xcc>
 8002410:	4b6f      	ldr	r3, [pc, #444]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a6e      	ldr	r2, [pc, #440]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	4b6c      	ldr	r3, [pc, #432]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6b      	ldr	r2, [pc, #428]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d013      	beq.n	8002458 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff f826 	bl	8001480 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002438:	f7ff f822 	bl	8001480 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	@ 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e21f      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244a:	4b61      	ldr	r3, [pc, #388]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0xdc>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7ff f812 	bl	8001480 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff f80e 	bl	8001480 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	@ 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e20b      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002472:	4b57      	ldr	r3, [pc, #348]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x104>
 800247e:	e000      	b.n	8002482 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d06f      	beq.n	800256e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800248e:	4b50      	ldr	r3, [pc, #320]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
 8002496:	2b00      	cmp	r3, #0
 8002498:	d017      	beq.n	80024ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800249a:	4b4d      	ldr	r3, [pc, #308]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
        || \
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d105      	bne.n	80024b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024a6:	4b4a      	ldr	r3, [pc, #296]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00b      	beq.n	80024ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024b2:	4b47      	ldr	r3, [pc, #284]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d11c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024be:	4b44      	ldr	r3, [pc, #272]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d116      	bne.n	80024f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ca:	4b41      	ldr	r3, [pc, #260]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d005      	beq.n	80024e2 <HAL_RCC_OscConfig+0x186>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d001      	beq.n	80024e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e1d3      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e2:	4b3b      	ldr	r3, [pc, #236]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	4937      	ldr	r1, [pc, #220]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f6:	e03a      	b.n	800256e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d020      	beq.n	8002542 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002500:	4b34      	ldr	r3, [pc, #208]	@ (80025d4 <HAL_RCC_OscConfig+0x278>)
 8002502:	2201      	movs	r2, #1
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002506:	f7fe ffbb 	bl	8001480 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250e:	f7fe ffb7 	bl	8001480 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e1b4      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	4b2b      	ldr	r3, [pc, #172]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f0      	beq.n	800250e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252c:	4b28      	ldr	r3, [pc, #160]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	4925      	ldr	r1, [pc, #148]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 800253c:	4313      	orrs	r3, r2
 800253e:	600b      	str	r3, [r1, #0]
 8002540:	e015      	b.n	800256e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002542:	4b24      	ldr	r3, [pc, #144]	@ (80025d4 <HAL_RCC_OscConfig+0x278>)
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002548:	f7fe ff9a 	bl	8001480 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe ff96 	bl	8001480 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e193      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	4b1b      	ldr	r3, [pc, #108]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b00      	cmp	r3, #0
 8002578:	d036      	beq.n	80025e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002582:	4b15      	ldr	r3, [pc, #84]	@ (80025d8 <HAL_RCC_OscConfig+0x27c>)
 8002584:	2201      	movs	r2, #1
 8002586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe ff7a 	bl	8001480 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002590:	f7fe ff76 	bl	8001480 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e173      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	4b0b      	ldr	r3, [pc, #44]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80025a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x234>
 80025ae:	e01b      	b.n	80025e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025b0:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <HAL_RCC_OscConfig+0x27c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b6:	f7fe ff63 	bl	8001480 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025bc:	e00e      	b.n	80025dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025be:	f7fe ff5f 	bl	8001480 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d907      	bls.n	80025dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e15c      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
 80025d0:	40023800 	.word	0x40023800
 80025d4:	42470000 	.word	0x42470000
 80025d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 80025de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1ea      	bne.n	80025be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 8097 	beq.w	8002724 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fa:	4b83      	ldr	r3, [pc, #524]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10f      	bne.n	8002626 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002606:	2300      	movs	r3, #0
 8002608:	60bb      	str	r3, [r7, #8]
 800260a:	4b7f      	ldr	r3, [pc, #508]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260e:	4a7e      	ldr	r2, [pc, #504]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002614:	6413      	str	r3, [r2, #64]	@ 0x40
 8002616:	4b7c      	ldr	r3, [pc, #496]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002622:	2301      	movs	r3, #1
 8002624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	4b79      	ldr	r3, [pc, #484]	@ (800280c <HAL_RCC_OscConfig+0x4b0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d118      	bne.n	8002664 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002632:	4b76      	ldr	r3, [pc, #472]	@ (800280c <HAL_RCC_OscConfig+0x4b0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a75      	ldr	r2, [pc, #468]	@ (800280c <HAL_RCC_OscConfig+0x4b0>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263e:	f7fe ff1f 	bl	8001480 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002644:	e008      	b.n	8002658 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f7fe ff1b 	bl	8001480 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e118      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	4b6c      	ldr	r3, [pc, #432]	@ (800280c <HAL_RCC_OscConfig+0x4b0>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0f0      	beq.n	8002646 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x31e>
 800266c:	4b66      	ldr	r3, [pc, #408]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002670:	4a65      	ldr	r2, [pc, #404]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	6713      	str	r3, [r2, #112]	@ 0x70
 8002678:	e01c      	b.n	80026b4 <HAL_RCC_OscConfig+0x358>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b05      	cmp	r3, #5
 8002680:	d10c      	bne.n	800269c <HAL_RCC_OscConfig+0x340>
 8002682:	4b61      	ldr	r3, [pc, #388]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002686:	4a60      	ldr	r2, [pc, #384]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002688:	f043 0304 	orr.w	r3, r3, #4
 800268c:	6713      	str	r3, [r2, #112]	@ 0x70
 800268e:	4b5e      	ldr	r3, [pc, #376]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002692:	4a5d      	ldr	r2, [pc, #372]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002694:	f043 0301 	orr.w	r3, r3, #1
 8002698:	6713      	str	r3, [r2, #112]	@ 0x70
 800269a:	e00b      	b.n	80026b4 <HAL_RCC_OscConfig+0x358>
 800269c:	4b5a      	ldr	r3, [pc, #360]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026a0:	4a59      	ldr	r2, [pc, #356]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 80026a2:	f023 0301 	bic.w	r3, r3, #1
 80026a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80026a8:	4b57      	ldr	r3, [pc, #348]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	4a56      	ldr	r2, [pc, #344]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 80026ae:	f023 0304 	bic.w	r3, r3, #4
 80026b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d015      	beq.n	80026e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7fe fee0 	bl	8001480 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7fe fedc 	bl	8001480 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0d7      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026da:	4b4b      	ldr	r3, [pc, #300]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0ee      	beq.n	80026c4 <HAL_RCC_OscConfig+0x368>
 80026e6:	e014      	b.n	8002712 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e8:	f7fe feca 	bl	8001480 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f0:	f7fe fec6 	bl	8001480 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e0c1      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002706:	4b40      	ldr	r3, [pc, #256]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ee      	bne.n	80026f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002712:	7dfb      	ldrb	r3, [r7, #23]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d105      	bne.n	8002724 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002718:	4b3b      	ldr	r3, [pc, #236]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	4a3a      	ldr	r2, [pc, #232]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 800271e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002722:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 80ad 	beq.w	8002888 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800272e:	4b36      	ldr	r3, [pc, #216]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f003 030c 	and.w	r3, r3, #12
 8002736:	2b08      	cmp	r3, #8
 8002738:	d060      	beq.n	80027fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d145      	bne.n	80027ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	4b33      	ldr	r3, [pc, #204]	@ (8002810 <HAL_RCC_OscConfig+0x4b4>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fe9a 	bl	8001480 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002750:	f7fe fe96 	bl	8001480 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e093      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	4b29      	ldr	r3, [pc, #164]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	019b      	lsls	r3, r3, #6
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
 8002788:	041b      	lsls	r3, r3, #16
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	071b      	lsls	r3, r3, #28
 800279a:	491b      	ldr	r1, [pc, #108]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <HAL_RCC_OscConfig+0x4b4>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7fe fe6b 	bl	8001480 <HAL_GetTick>
 80027aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ae:	f7fe fe67 	bl	8001480 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e064      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c0:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x452>
 80027cc:	e05c      	b.n	8002888 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <HAL_RCC_OscConfig+0x4b4>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d4:	f7fe fe54 	bl	8001480 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027dc:	f7fe fe50 	bl	8001480 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e04d      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCC_OscConfig+0x4ac>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1f0      	bne.n	80027dc <HAL_RCC_OscConfig+0x480>
 80027fa:	e045      	b.n	8002888 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d107      	bne.n	8002814 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e040      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
 8002808:	40023800 	.word	0x40023800
 800280c:	40007000 	.word	0x40007000
 8002810:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002814:	4b1f      	ldr	r3, [pc, #124]	@ (8002894 <HAL_RCC_OscConfig+0x538>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d030      	beq.n	8002884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d129      	bne.n	8002884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d122      	bne.n	8002884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002844:	4013      	ands	r3, r2
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800284a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800284c:	4293      	cmp	r3, r2
 800284e:	d119      	bne.n	8002884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285a:	085b      	lsrs	r3, r3, #1
 800285c:	3b01      	subs	r3, #1
 800285e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d10f      	bne.n	8002884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d107      	bne.n	8002884 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40023800 	.word	0x40023800

08002898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e041      	b.n	800292e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fc7c 	bl	80011bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 f9b6 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d001      	beq.n	8002950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e04e      	b.n	80029ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a23      	ldr	r2, [pc, #140]	@ (80029fc <HAL_TIM_Base_Start_IT+0xc4>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d022      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297a:	d01d      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a1f      	ldr	r2, [pc, #124]	@ (8002a00 <HAL_TIM_Base_Start_IT+0xc8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d018      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a04 <HAL_TIM_Base_Start_IT+0xcc>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d013      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d00e      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_TIM_Base_Start_IT+0xd4>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d009      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a19      	ldr	r2, [pc, #100]	@ (8002a10 <HAL_TIM_Base_Start_IT+0xd8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d004      	beq.n	80029b8 <HAL_TIM_Base_Start_IT+0x80>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a18      	ldr	r2, [pc, #96]	@ (8002a14 <HAL_TIM_Base_Start_IT+0xdc>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d111      	bne.n	80029dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d010      	beq.n	80029ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029da:	e007      	b.n	80029ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40010000 	.word	0x40010000
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40010400 	.word	0x40010400
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40001800 	.word	0x40001800

08002a18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d020      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f003 0302 	and.w	r3, r3, #2
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d01b      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f06f 0202 	mvn.w	r2, #2
 8002a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f8d2 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002a68:	e005      	b.n	8002a76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f8c4 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f8d5 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d020      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0204 	mvn.w	r2, #4
 8002a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8ac 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e005      	b.n	8002ac2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f89e 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f8af 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d020      	beq.n	8002b14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01b      	beq.n	8002b14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0208 	mvn.w	r2, #8
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f886 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f878 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f889 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d020      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0210 	mvn.w	r2, #16
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2208      	movs	r2, #8
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f860 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f852 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f863 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00c      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0201 	mvn.w	r2, #1
 8002b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fe fa68 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f982 	bl	8002eac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00c      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f834 	bl	8002c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00c      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0220 	mvn.w	r2, #32
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f954 	bl	8002e98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a46      	ldr	r2, [pc, #280]	@ (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d013      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c66:	d00f      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a43      	ldr	r2, [pc, #268]	@ (8002d78 <TIM_Base_SetConfig+0x130>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d00b      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a42      	ldr	r2, [pc, #264]	@ (8002d7c <TIM_Base_SetConfig+0x134>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d007      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a41      	ldr	r2, [pc, #260]	@ (8002d80 <TIM_Base_SetConfig+0x138>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a40      	ldr	r2, [pc, #256]	@ (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d108      	bne.n	8002c9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a35      	ldr	r2, [pc, #212]	@ (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d02b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ca8:	d027      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a32      	ldr	r2, [pc, #200]	@ (8002d78 <TIM_Base_SetConfig+0x130>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d023      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a31      	ldr	r2, [pc, #196]	@ (8002d7c <TIM_Base_SetConfig+0x134>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01f      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a30      	ldr	r2, [pc, #192]	@ (8002d80 <TIM_Base_SetConfig+0x138>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d017      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8002d88 <TIM_Base_SetConfig+0x140>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d013      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	@ (8002d8c <TIM_Base_SetConfig+0x144>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00f      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002d90 <TIM_Base_SetConfig+0x148>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d94 <TIM_Base_SetConfig+0x14c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2a      	ldr	r2, [pc, #168]	@ (8002d98 <TIM_Base_SetConfig+0x150>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d003      	beq.n	8002cfa <TIM_Base_SetConfig+0xb2>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a29      	ldr	r2, [pc, #164]	@ (8002d9c <TIM_Base_SetConfig+0x154>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d108      	bne.n	8002d0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	68fa      	ldr	r2, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a10      	ldr	r2, [pc, #64]	@ (8002d74 <TIM_Base_SetConfig+0x12c>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0xf8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a12      	ldr	r2, [pc, #72]	@ (8002d84 <TIM_Base_SetConfig+0x13c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	611a      	str	r2, [r3, #16]
  }
}
 8002d66:	bf00      	nop
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40000400 	.word	0x40000400
 8002d7c:	40000800 	.word	0x40000800
 8002d80:	40000c00 	.word	0x40000c00
 8002d84:	40010400 	.word	0x40010400
 8002d88:	40014000 	.word	0x40014000
 8002d8c:	40014400 	.word	0x40014400
 8002d90:	40014800 	.word	0x40014800
 8002d94:	40001800 	.word	0x40001800
 8002d98:	40001c00 	.word	0x40001c00
 8002d9c:	40002000 	.word	0x40002000

08002da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e05a      	b.n	8002e6e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a21      	ldr	r2, [pc, #132]	@ (8002e7c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d022      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e04:	d01d      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d018      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a1b      	ldr	r2, [pc, #108]	@ (8002e84 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e88 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d00e      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a18      	ldr	r2, [pc, #96]	@ (8002e8c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d009      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a17      	ldr	r2, [pc, #92]	@ (8002e90 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a15      	ldr	r2, [pc, #84]	@ (8002e94 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10c      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40000400 	.word	0x40000400
 8002e84:	40000800 	.word	0x40000800
 8002e88:	40000c00 	.word	0x40000c00
 8002e8c:	40010400 	.word	0x40010400
 8002e90:	40014000 	.word	0x40014000
 8002e94:	40001800 	.word	0x40001800

08002e98 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e042      	b.n	8002f58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe f990 	bl	800120c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	@ 0x24
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 fc85 	bl	8003814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3708      	adds	r7, #8
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}

08002f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0ba      	sub	sp, #232	@ 0xe8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fb69 	bl	8003696 <UART_Receive_IT>
      return;
 8002fc4:	e25b      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80de 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fe0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80d1 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
 8002ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
 800301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
 800303e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
 8003062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800307e:	f043 0208 	orr.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 81f2 	beq.w	8003474 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
 800309c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 faf4 	bl	8003696 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030b8:	2b40      	cmp	r3, #64	@ 0x40
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_UART_IRQHandler+0x17a>
 80030d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04f      	beq.n	800317a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f9fc 	bl	80034d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ea:	2b40      	cmp	r3, #64	@ 0x40
 80030ec:	d141      	bne.n	8003172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800310c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800311a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003146:	4a7e      	ldr	r2, [pc, #504]	@ (8003340 <HAL_UART_IRQHandler+0x3e0>)
 8003148:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fc89 	bl	8001a66 <HAL_DMA_Abort_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003164:	4610      	mov	r0, r2
 8003166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00e      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f99e 	bl	80034ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e00a      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f99a 	bl	80034ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e006      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f996 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003186:	e175      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	bf00      	nop
    return;
 800318a:	e173      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 814f 	bne.w	8003434 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8148 	beq.w	8003434 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 8141 	beq.w	8003434 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d2:	2b40      	cmp	r3, #64	@ 0x40
 80031d4:	f040 80b6 	bne.w	8003344 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8145 	beq.w	8003478 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f080 813e 	bcs.w	8003478 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003202:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800320e:	f000 8088 	beq.w	8003322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800322c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003230:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800323e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800324a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1d9      	bne.n	8003212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800326e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003282:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003286:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800328a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003294:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e1      	bne.n	800325e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80032aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80032be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80032c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80032cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e3      	bne.n	800329a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80032f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032f2:	f023 0310 	bic.w	r3, r3, #16
 80032f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003304:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003306:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800330a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e3      	bne.n	80032e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331c:	4618      	mov	r0, r3
 800331e:	f7fe fb32 	bl	8001986 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003330:	b29b      	uxth	r3, r3
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	b29b      	uxth	r3, r3
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f8c1 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800333e:	e09b      	b.n	8003478 <HAL_UART_IRQHandler+0x518>
 8003340:	0800359f 	.word	0x0800359f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800334c:	b29b      	uxth	r3, r3
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 808e 	beq.w	800347c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003360:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003364:	2b00      	cmp	r3, #0
 8003366:	f000 8089 	beq.w	800347c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800337a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800337c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800338e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003390:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003394:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800339c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1e3      	bne.n	800336a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3314      	adds	r3, #20
 80033a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ac:	e853 3f00 	ldrex	r3, [r3]
 80033b0:	623b      	str	r3, [r7, #32]
   return(result);
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f023 0301 	bic.w	r3, r3, #1
 80033b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3314      	adds	r3, #20
 80033c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80033c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80033c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e3      	bne.n	80033a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0310 	bic.w	r3, r3, #16
 80033fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	69b9      	ldr	r1, [r7, #24]
 8003412:	69fa      	ldr	r2, [r7, #28]
 8003414:	e841 2300 	strex	r3, r2, [r1]
 8003418:	617b      	str	r3, [r7, #20]
   return(result);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1e3      	bne.n	80033e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800342a:	4619      	mov	r1, r3
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f847 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003432:	e023      	b.n	800347c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003438:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800343c:	2b00      	cmp	r3, #0
 800343e:	d009      	beq.n	8003454 <HAL_UART_IRQHandler+0x4f4>
 8003440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003444:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f8ba 	bl	80035c6 <UART_Transmit_IT>
    return;
 8003452:	e014      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00e      	beq.n	800347e <HAL_UART_IRQHandler+0x51e>
 8003460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003468:	2b00      	cmp	r3, #0
 800346a:	d008      	beq.n	800347e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f8fa 	bl	8003666 <UART_EndTransmit_IT>
    return;
 8003472:	e004      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
    return;
 8003474:	bf00      	nop
 8003476:	e002      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
      return;
 8003478:	bf00      	nop
 800347a:	e000      	b.n	800347e <HAL_UART_IRQHandler+0x51e>
      return;
 800347c:	bf00      	nop
  }
}
 800347e:	37e8      	adds	r7, #232	@ 0xe8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b095      	sub	sp, #84	@ 0x54
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	330c      	adds	r3, #12
 80034e6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	330c      	adds	r3, #12
 80034fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003500:	643a      	str	r2, [r7, #64]	@ 0x40
 8003502:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003506:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800350e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e5      	bne.n	80034e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3314      	adds	r3, #20
 800351a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	61fb      	str	r3, [r7, #28]
   return(result);
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3314      	adds	r3, #20
 8003532:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003534:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800353a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e5      	bne.n	8003514 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	2b01      	cmp	r3, #1
 800354e:	d119      	bne.n	8003584 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	330c      	adds	r3, #12
 8003556:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	e853 3f00 	ldrex	r3, [r3]
 800355e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f023 0310 	bic.w	r3, r3, #16
 8003566:	647b      	str	r3, [r7, #68]	@ 0x44
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	330c      	adds	r3, #12
 800356e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003570:	61ba      	str	r2, [r7, #24]
 8003572:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6979      	ldr	r1, [r7, #20]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	613b      	str	r3, [r7, #16]
   return(result);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e5      	bne.n	8003550 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003592:	bf00      	nop
 8003594:	3754      	adds	r7, #84	@ 0x54
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff ff77 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035be:	bf00      	nop
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b085      	sub	sp, #20
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b21      	cmp	r3, #33	@ 0x21
 80035d8:	d13e      	bne.n	8003658 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e2:	d114      	bne.n	800360e <UART_Transmit_IT+0x48>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d110      	bne.n	800360e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003600:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	1c9a      	adds	r2, r3, #2
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	621a      	str	r2, [r3, #32]
 800360c:	e008      	b.n	8003620 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	1c59      	adds	r1, r3, #1
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6211      	str	r1, [r2, #32]
 8003618:	781a      	ldrb	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4619      	mov	r1, r3
 800362e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10f      	bne.n	8003654 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003642:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003652:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	e000      	b.n	800365a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003658:	2302      	movs	r3, #2
  }
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr

08003666 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68da      	ldr	r2, [r3, #12]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff fefc 	bl	8003484 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b08c      	sub	sp, #48	@ 0x30
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b22      	cmp	r3, #34	@ 0x22
 80036a8:	f040 80ae 	bne.w	8003808 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b4:	d117      	bne.n	80036e6 <UART_Receive_IT+0x50>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d113      	bne.n	80036e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036de:	1c9a      	adds	r2, r3, #2
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e4:	e026      	b.n	8003734 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036f8:	d007      	beq.n	800370a <UART_Receive_IT+0x74>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <UART_Receive_IT+0x82>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	e008      	b.n	800372a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003724:	b2da      	uxtb	r2, r3
 8003726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003728:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4619      	mov	r1, r3
 8003742:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003744:	2b00      	cmp	r3, #0
 8003746:	d15d      	bne.n	8003804 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0220 	bic.w	r2, r2, #32
 8003756:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003766:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0201 	bic.w	r2, r2, #1
 8003776:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	2b01      	cmp	r3, #1
 800378c:	d135      	bne.n	80037fa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	330c      	adds	r3, #12
 800379a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	613b      	str	r3, [r7, #16]
   return(result);
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f023 0310 	bic.w	r3, r3, #16
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	330c      	adds	r3, #12
 80037b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b4:	623a      	str	r2, [r7, #32]
 80037b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	69f9      	ldr	r1, [r7, #28]
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e5      	bne.n	8003794 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0310 	and.w	r3, r3, #16
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d10a      	bne.n	80037ec <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037f0:	4619      	mov	r1, r3
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff fe64 	bl	80034c0 <HAL_UARTEx_RxEventCallback>
 80037f8:	e002      	b.n	8003800 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f7ff fe4c 	bl	8003498 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	e002      	b.n	800380a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	e000      	b.n	800380a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003808:	2302      	movs	r3, #2
  }
}
 800380a:	4618      	mov	r0, r3
 800380c:	3730      	adds	r7, #48	@ 0x30
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003818:	b0c0      	sub	sp, #256	@ 0x100
 800381a:	af00      	add	r7, sp, #0
 800381c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	691b      	ldr	r3, [r3, #16]
 8003828:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	68d9      	ldr	r1, [r3, #12]
 8003832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	ea40 0301 	orr.w	r3, r0, r1
 800383c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800383e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	431a      	orrs	r2, r3
 800384c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	431a      	orrs	r2, r3
 8003854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800386c:	f021 010c 	bic.w	r1, r1, #12
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800387a:	430b      	orrs	r3, r1
 800387c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800387e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800388a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800388e:	6999      	ldr	r1, [r3, #24]
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	ea40 0301 	orr.w	r3, r0, r1
 800389a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800389c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	4b8f      	ldr	r3, [pc, #572]	@ (8003ae0 <UART_SetConfig+0x2cc>)
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d005      	beq.n	80038b4 <UART_SetConfig+0xa0>
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	4b8d      	ldr	r3, [pc, #564]	@ (8003ae4 <UART_SetConfig+0x2d0>)
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d104      	bne.n	80038be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7fe fb94 	bl	8001fe0 <HAL_RCC_GetPCLK2Freq>
 80038b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038bc:	e003      	b.n	80038c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038be:	f7fe fb7b 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80038c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038d0:	f040 810c 	bne.w	8003aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038d8:	2200      	movs	r2, #0
 80038da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038e6:	4622      	mov	r2, r4
 80038e8:	462b      	mov	r3, r5
 80038ea:	1891      	adds	r1, r2, r2
 80038ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038ee:	415b      	adcs	r3, r3
 80038f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038f6:	4621      	mov	r1, r4
 80038f8:	eb12 0801 	adds.w	r8, r2, r1
 80038fc:	4629      	mov	r1, r5
 80038fe:	eb43 0901 	adc.w	r9, r3, r1
 8003902:	f04f 0200 	mov.w	r2, #0
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800390e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003916:	4690      	mov	r8, r2
 8003918:	4699      	mov	r9, r3
 800391a:	4623      	mov	r3, r4
 800391c:	eb18 0303 	adds.w	r3, r8, r3
 8003920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003924:	462b      	mov	r3, r5
 8003926:	eb49 0303 	adc.w	r3, r9, r3
 800392a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800393a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800393e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003942:	460b      	mov	r3, r1
 8003944:	18db      	adds	r3, r3, r3
 8003946:	653b      	str	r3, [r7, #80]	@ 0x50
 8003948:	4613      	mov	r3, r2
 800394a:	eb42 0303 	adc.w	r3, r2, r3
 800394e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003958:	f7fd f874 	bl	8000a44 <__aeabi_uldivmod>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4b61      	ldr	r3, [pc, #388]	@ (8003ae8 <UART_SetConfig+0x2d4>)
 8003962:	fba3 2302 	umull	r2, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	011c      	lsls	r4, r3, #4
 800396a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003974:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	1891      	adds	r1, r2, r2
 8003982:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003984:	415b      	adcs	r3, r3
 8003986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800398c:	4641      	mov	r1, r8
 800398e:	eb12 0a01 	adds.w	sl, r2, r1
 8003992:	4649      	mov	r1, r9
 8003994:	eb43 0b01 	adc.w	fp, r3, r1
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ac:	4692      	mov	sl, r2
 80039ae:	469b      	mov	fp, r3
 80039b0:	4643      	mov	r3, r8
 80039b2:	eb1a 0303 	adds.w	r3, sl, r3
 80039b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039ba:	464b      	mov	r3, r9
 80039bc:	eb4b 0303 	adc.w	r3, fp, r3
 80039c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039d8:	460b      	mov	r3, r1
 80039da:	18db      	adds	r3, r3, r3
 80039dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80039de:	4613      	mov	r3, r2
 80039e0:	eb42 0303 	adc.w	r3, r2, r3
 80039e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039ee:	f7fd f829 	bl	8000a44 <__aeabi_uldivmod>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4611      	mov	r1, r2
 80039f8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ae8 <UART_SetConfig+0x2d4>)
 80039fa:	fba3 2301 	umull	r2, r3, r3, r1
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2264      	movs	r2, #100	@ 0x64
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	1acb      	subs	r3, r1, r3
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a0e:	4b36      	ldr	r3, [pc, #216]	@ (8003ae8 <UART_SetConfig+0x2d4>)
 8003a10:	fba3 2302 	umull	r2, r3, r3, r2
 8003a14:	095b      	lsrs	r3, r3, #5
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a1c:	441c      	add	r4, r3
 8003a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a22:	2200      	movs	r2, #0
 8003a24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a30:	4642      	mov	r2, r8
 8003a32:	464b      	mov	r3, r9
 8003a34:	1891      	adds	r1, r2, r2
 8003a36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a38:	415b      	adcs	r3, r3
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a40:	4641      	mov	r1, r8
 8003a42:	1851      	adds	r1, r2, r1
 8003a44:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a46:	4649      	mov	r1, r9
 8003a48:	414b      	adcs	r3, r1
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a58:	4659      	mov	r1, fp
 8003a5a:	00cb      	lsls	r3, r1, #3
 8003a5c:	4651      	mov	r1, sl
 8003a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a62:	4651      	mov	r1, sl
 8003a64:	00ca      	lsls	r2, r1, #3
 8003a66:	4610      	mov	r0, r2
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4642      	mov	r2, r8
 8003a6e:	189b      	adds	r3, r3, r2
 8003a70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a74:	464b      	mov	r3, r9
 8003a76:	460a      	mov	r2, r1
 8003a78:	eb42 0303 	adc.w	r3, r2, r3
 8003a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a94:	460b      	mov	r3, r1
 8003a96:	18db      	adds	r3, r3, r3
 8003a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003aaa:	f7fc ffcb 	bl	8000a44 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae8 <UART_SetConfig+0x2d4>)
 8003ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	2164      	movs	r1, #100	@ 0x64
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	3332      	adds	r3, #50	@ 0x32
 8003ac6:	4a08      	ldr	r2, [pc, #32]	@ (8003ae8 <UART_SetConfig+0x2d4>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	f003 0207 	and.w	r2, r3, #7
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4422      	add	r2, r4
 8003ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003adc:	e106      	b.n	8003cec <UART_SetConfig+0x4d8>
 8003ade:	bf00      	nop
 8003ae0:	40011000 	.word	0x40011000
 8003ae4:	40011400 	.word	0x40011400
 8003ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003af6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003afe:	4642      	mov	r2, r8
 8003b00:	464b      	mov	r3, r9
 8003b02:	1891      	adds	r1, r2, r2
 8003b04:	6239      	str	r1, [r7, #32]
 8003b06:	415b      	adcs	r3, r3
 8003b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b0e:	4641      	mov	r1, r8
 8003b10:	1854      	adds	r4, r2, r1
 8003b12:	4649      	mov	r1, r9
 8003b14:	eb43 0501 	adc.w	r5, r3, r1
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	00eb      	lsls	r3, r5, #3
 8003b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b26:	00e2      	lsls	r2, r4, #3
 8003b28:	4614      	mov	r4, r2
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	4643      	mov	r3, r8
 8003b2e:	18e3      	adds	r3, r4, r3
 8003b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b34:	464b      	mov	r3, r9
 8003b36:	eb45 0303 	adc.w	r3, r5, r3
 8003b3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	008b      	lsls	r3, r1, #2
 8003b5e:	4621      	mov	r1, r4
 8003b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b64:	4621      	mov	r1, r4
 8003b66:	008a      	lsls	r2, r1, #2
 8003b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b6c:	f7fc ff6a 	bl	8000a44 <__aeabi_uldivmod>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4b60      	ldr	r3, [pc, #384]	@ (8003cf8 <UART_SetConfig+0x4e4>)
 8003b76:	fba3 2302 	umull	r2, r3, r3, r2
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	011c      	lsls	r4, r3, #4
 8003b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	61b9      	str	r1, [r7, #24]
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	61fb      	str	r3, [r7, #28]
 8003b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	1851      	adds	r1, r2, r1
 8003ba4:	6139      	str	r1, [r7, #16]
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	414b      	adcs	r3, r1
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	00cb      	lsls	r3, r1, #3
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	00ca      	lsls	r2, r1, #3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4642      	mov	r2, r8
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bd4:	464b      	mov	r3, r9
 8003bd6:	460a      	mov	r2, r1
 8003bd8:	eb42 0303 	adc.w	r3, r2, r3
 8003bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003bf8:	4649      	mov	r1, r9
 8003bfa:	008b      	lsls	r3, r1, #2
 8003bfc:	4641      	mov	r1, r8
 8003bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c02:	4641      	mov	r1, r8
 8003c04:	008a      	lsls	r2, r1, #2
 8003c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c0a:	f7fc ff1b 	bl	8000a44 <__aeabi_uldivmod>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4611      	mov	r1, r2
 8003c14:	4b38      	ldr	r3, [pc, #224]	@ (8003cf8 <UART_SetConfig+0x4e4>)
 8003c16:	fba3 2301 	umull	r2, r3, r3, r1
 8003c1a:	095b      	lsrs	r3, r3, #5
 8003c1c:	2264      	movs	r2, #100	@ 0x64
 8003c1e:	fb02 f303 	mul.w	r3, r2, r3
 8003c22:	1acb      	subs	r3, r1, r3
 8003c24:	011b      	lsls	r3, r3, #4
 8003c26:	3332      	adds	r3, #50	@ 0x32
 8003c28:	4a33      	ldr	r2, [pc, #204]	@ (8003cf8 <UART_SetConfig+0x4e4>)
 8003c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c34:	441c      	add	r4, r3
 8003c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c44:	4642      	mov	r2, r8
 8003c46:	464b      	mov	r3, r9
 8003c48:	1891      	adds	r1, r2, r2
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	415b      	adcs	r3, r3
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c54:	4641      	mov	r1, r8
 8003c56:	1851      	adds	r1, r2, r1
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	414b      	adcs	r3, r1
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c6c:	4659      	mov	r1, fp
 8003c6e:	00cb      	lsls	r3, r1, #3
 8003c70:	4651      	mov	r1, sl
 8003c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c76:	4651      	mov	r1, sl
 8003c78:	00ca      	lsls	r2, r1, #3
 8003c7a:	4610      	mov	r0, r2
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4642      	mov	r2, r8
 8003c82:	189b      	adds	r3, r3, r2
 8003c84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c86:	464b      	mov	r3, r9
 8003c88:	460a      	mov	r2, r1
 8003c8a:	eb42 0303 	adc.w	r3, r2, r3
 8003c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ca8:	4649      	mov	r1, r9
 8003caa:	008b      	lsls	r3, r1, #2
 8003cac:	4641      	mov	r1, r8
 8003cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	008a      	lsls	r2, r1, #2
 8003cb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003cba:	f7fc fec3 	bl	8000a44 <__aeabi_uldivmod>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf8 <UART_SetConfig+0x4e4>)
 8003cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	2164      	movs	r1, #100	@ 0x64
 8003ccc:	fb01 f303 	mul.w	r3, r1, r3
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	3332      	adds	r3, #50	@ 0x32
 8003cd6:	4a08      	ldr	r2, [pc, #32]	@ (8003cf8 <UART_SetConfig+0x4e4>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	f003 020f 	and.w	r2, r3, #15
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4422      	add	r2, r4
 8003cea:	609a      	str	r2, [r3, #8]
}
 8003cec:	bf00      	nop
 8003cee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cf8:	51eb851f 	.word	0x51eb851f

08003cfc <memset>:
 8003cfc:	4402      	add	r2, r0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d100      	bne.n	8003d06 <memset+0xa>
 8003d04:	4770      	bx	lr
 8003d06:	f803 1b01 	strb.w	r1, [r3], #1
 8003d0a:	e7f9      	b.n	8003d00 <memset+0x4>

08003d0c <__libc_init_array>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003d44 <__libc_init_array+0x38>)
 8003d10:	4c0d      	ldr	r4, [pc, #52]	@ (8003d48 <__libc_init_array+0x3c>)
 8003d12:	1b64      	subs	r4, r4, r5
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	2600      	movs	r6, #0
 8003d18:	42a6      	cmp	r6, r4
 8003d1a:	d109      	bne.n	8003d30 <__libc_init_array+0x24>
 8003d1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003d4c <__libc_init_array+0x40>)
 8003d1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003d50 <__libc_init_array+0x44>)
 8003d20:	f000 fd52 	bl	80047c8 <_init>
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	2600      	movs	r6, #0
 8003d2a:	42a6      	cmp	r6, r4
 8003d2c:	d105      	bne.n	8003d3a <__libc_init_array+0x2e>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d34:	4798      	blx	r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7ee      	b.n	8003d18 <__libc_init_array+0xc>
 8003d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3e:	4798      	blx	r3
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7f2      	b.n	8003d2a <__libc_init_array+0x1e>
 8003d44:	08004bd0 	.word	0x08004bd0
 8003d48:	08004bd0 	.word	0x08004bd0
 8003d4c:	08004bd0 	.word	0x08004bd0
 8003d50:	08004bd4 	.word	0x08004bd4

08003d54 <sinf>:
 8003d54:	ee10 3a10 	vmov	r3, s0
 8003d58:	b507      	push	{r0, r1, r2, lr}
 8003d5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd8 <sinf+0x84>)
 8003d5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d807      	bhi.n	8003d74 <sinf+0x20>
 8003d64:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8003ddc <sinf+0x88>
 8003d68:	2000      	movs	r0, #0
 8003d6a:	b003      	add	sp, #12
 8003d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d70:	f000 b88e 	b.w	8003e90 <__kernel_sinf>
 8003d74:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003d78:	d304      	bcc.n	8003d84 <sinf+0x30>
 8003d7a:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003d7e:	b003      	add	sp, #12
 8003d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d84:	4668      	mov	r0, sp
 8003d86:	f000 f8cb 	bl	8003f20 <__ieee754_rem_pio2f>
 8003d8a:	f000 0003 	and.w	r0, r0, #3
 8003d8e:	2801      	cmp	r0, #1
 8003d90:	d00a      	beq.n	8003da8 <sinf+0x54>
 8003d92:	2802      	cmp	r0, #2
 8003d94:	d00f      	beq.n	8003db6 <sinf+0x62>
 8003d96:	b9c0      	cbnz	r0, 8003dca <sinf+0x76>
 8003d98:	eddd 0a01 	vldr	s1, [sp, #4]
 8003d9c:	ed9d 0a00 	vldr	s0, [sp]
 8003da0:	2001      	movs	r0, #1
 8003da2:	f000 f875 	bl	8003e90 <__kernel_sinf>
 8003da6:	e7ea      	b.n	8003d7e <sinf+0x2a>
 8003da8:	eddd 0a01 	vldr	s1, [sp, #4]
 8003dac:	ed9d 0a00 	vldr	s0, [sp]
 8003db0:	f000 f816 	bl	8003de0 <__kernel_cosf>
 8003db4:	e7e3      	b.n	8003d7e <sinf+0x2a>
 8003db6:	eddd 0a01 	vldr	s1, [sp, #4]
 8003dba:	ed9d 0a00 	vldr	s0, [sp]
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	f000 f866 	bl	8003e90 <__kernel_sinf>
 8003dc4:	eeb1 0a40 	vneg.f32	s0, s0
 8003dc8:	e7d9      	b.n	8003d7e <sinf+0x2a>
 8003dca:	eddd 0a01 	vldr	s1, [sp, #4]
 8003dce:	ed9d 0a00 	vldr	s0, [sp]
 8003dd2:	f000 f805 	bl	8003de0 <__kernel_cosf>
 8003dd6:	e7f5      	b.n	8003dc4 <sinf+0x70>
 8003dd8:	3f490fd8 	.word	0x3f490fd8
 8003ddc:	00000000 	.word	0x00000000

08003de0 <__kernel_cosf>:
 8003de0:	ee10 3a10 	vmov	r3, s0
 8003de4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003de8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003dec:	eef0 6a40 	vmov.f32	s13, s0
 8003df0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8003df4:	d204      	bcs.n	8003e00 <__kernel_cosf+0x20>
 8003df6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8003dfa:	ee17 2a90 	vmov	r2, s15
 8003dfe:	b342      	cbz	r2, 8003e52 <__kernel_cosf+0x72>
 8003e00:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8003e04:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8003e70 <__kernel_cosf+0x90>
 8003e08:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8003e74 <__kernel_cosf+0x94>
 8003e0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003e78 <__kernel_cosf+0x98>)
 8003e0e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003e12:	4293      	cmp	r3, r2
 8003e14:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8003e7c <__kernel_cosf+0x9c>
 8003e18:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003e1c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8003e80 <__kernel_cosf+0xa0>
 8003e20:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003e24:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003e84 <__kernel_cosf+0xa4>
 8003e28:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003e2c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8003e88 <__kernel_cosf+0xa8>
 8003e30:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003e34:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8003e38:	ee26 6a07 	vmul.f32	s12, s12, s14
 8003e3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003e40:	eee7 0a06 	vfma.f32	s1, s14, s12
 8003e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e48:	d804      	bhi.n	8003e54 <__kernel_cosf+0x74>
 8003e4a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8003e4e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8003e52:	4770      	bx	lr
 8003e54:	4a0d      	ldr	r2, [pc, #52]	@ (8003e8c <__kernel_cosf+0xac>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	bf9a      	itte	ls
 8003e5a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8003e5e:	ee07 3a10 	vmovls	s14, r3
 8003e62:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8003e66:	ee30 0a47 	vsub.f32	s0, s0, s14
 8003e6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e6e:	e7ec      	b.n	8003e4a <__kernel_cosf+0x6a>
 8003e70:	ad47d74e 	.word	0xad47d74e
 8003e74:	310f74f6 	.word	0x310f74f6
 8003e78:	3e999999 	.word	0x3e999999
 8003e7c:	b493f27c 	.word	0xb493f27c
 8003e80:	37d00d01 	.word	0x37d00d01
 8003e84:	bab60b61 	.word	0xbab60b61
 8003e88:	3d2aaaab 	.word	0x3d2aaaab
 8003e8c:	3f480000 	.word	0x3f480000

08003e90 <__kernel_sinf>:
 8003e90:	ee10 3a10 	vmov	r3, s0
 8003e94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003e98:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8003e9c:	d204      	bcs.n	8003ea8 <__kernel_sinf+0x18>
 8003e9e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003ea2:	ee17 3a90 	vmov	r3, s15
 8003ea6:	b35b      	cbz	r3, 8003f00 <__kernel_sinf+0x70>
 8003ea8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8003eac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8003f04 <__kernel_sinf+0x74>
 8003eb0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8003f08 <__kernel_sinf+0x78>
 8003eb4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003eb8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8003f0c <__kernel_sinf+0x7c>
 8003ebc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003ec0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8003f10 <__kernel_sinf+0x80>
 8003ec4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8003ec8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8003f14 <__kernel_sinf+0x84>
 8003ecc:	ee60 6a07 	vmul.f32	s13, s0, s14
 8003ed0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8003ed4:	b930      	cbnz	r0, 8003ee4 <__kernel_sinf+0x54>
 8003ed6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8003f18 <__kernel_sinf+0x88>
 8003eda:	eea7 6a27 	vfma.f32	s12, s14, s15
 8003ede:	eea6 0a26 	vfma.f32	s0, s12, s13
 8003ee2:	4770      	bx	lr
 8003ee4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003ee8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8003eec:	eee0 7a86 	vfma.f32	s15, s1, s12
 8003ef0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8003ef4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8003f1c <__kernel_sinf+0x8c>
 8003ef8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8003efc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	2f2ec9d3 	.word	0x2f2ec9d3
 8003f08:	b2d72f34 	.word	0xb2d72f34
 8003f0c:	3638ef1b 	.word	0x3638ef1b
 8003f10:	b9500d01 	.word	0xb9500d01
 8003f14:	3c088889 	.word	0x3c088889
 8003f18:	be2aaaab 	.word	0xbe2aaaab
 8003f1c:	3e2aaaab 	.word	0x3e2aaaab

08003f20 <__ieee754_rem_pio2f>:
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	ee10 6a10 	vmov	r6, s0
 8003f26:	4b88      	ldr	r3, [pc, #544]	@ (8004148 <__ieee754_rem_pio2f+0x228>)
 8003f28:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8003f2c:	429d      	cmp	r5, r3
 8003f2e:	b087      	sub	sp, #28
 8003f30:	4604      	mov	r4, r0
 8003f32:	d805      	bhi.n	8003f40 <__ieee754_rem_pio2f+0x20>
 8003f34:	2300      	movs	r3, #0
 8003f36:	ed80 0a00 	vstr	s0, [r0]
 8003f3a:	6043      	str	r3, [r0, #4]
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	e022      	b.n	8003f86 <__ieee754_rem_pio2f+0x66>
 8003f40:	4b82      	ldr	r3, [pc, #520]	@ (800414c <__ieee754_rem_pio2f+0x22c>)
 8003f42:	429d      	cmp	r5, r3
 8003f44:	d83a      	bhi.n	8003fbc <__ieee754_rem_pio2f+0x9c>
 8003f46:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8003f4a:	2e00      	cmp	r6, #0
 8003f4c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8004150 <__ieee754_rem_pio2f+0x230>
 8003f50:	4a80      	ldr	r2, [pc, #512]	@ (8004154 <__ieee754_rem_pio2f+0x234>)
 8003f52:	f023 030f 	bic.w	r3, r3, #15
 8003f56:	dd18      	ble.n	8003f8a <__ieee754_rem_pio2f+0x6a>
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8003f5e:	bf09      	itett	eq
 8003f60:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8004158 <__ieee754_rem_pio2f+0x238>
 8003f64:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800415c <__ieee754_rem_pio2f+0x23c>
 8003f68:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8004160 <__ieee754_rem_pio2f+0x240>
 8003f6c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8003f70:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8003f74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f78:	ed80 7a00 	vstr	s14, [r0]
 8003f7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f80:	edc0 7a01 	vstr	s15, [r0, #4]
 8003f84:	2001      	movs	r0, #1
 8003f86:	b007      	add	sp, #28
 8003f88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8003f90:	bf09      	itett	eq
 8003f92:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8004158 <__ieee754_rem_pio2f+0x238>
 8003f96:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800415c <__ieee754_rem_pio2f+0x23c>
 8003f9a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8004160 <__ieee754_rem_pio2f+0x240>
 8003f9e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8003fa2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8003fa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003faa:	ed80 7a00 	vstr	s14, [r0]
 8003fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fb2:	edc0 7a01 	vstr	s15, [r0, #4]
 8003fb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003fba:	e7e4      	b.n	8003f86 <__ieee754_rem_pio2f+0x66>
 8003fbc:	4b69      	ldr	r3, [pc, #420]	@ (8004164 <__ieee754_rem_pio2f+0x244>)
 8003fbe:	429d      	cmp	r5, r3
 8003fc0:	d873      	bhi.n	80040aa <__ieee754_rem_pio2f+0x18a>
 8003fc2:	f000 f8dd 	bl	8004180 <fabsf>
 8003fc6:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8004168 <__ieee754_rem_pio2f+0x248>
 8003fca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8003fce:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003fd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fda:	ee17 0a90 	vmov	r0, s15
 8003fde:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8004150 <__ieee754_rem_pio2f+0x230>
 8003fe2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8003fe6:	281f      	cmp	r0, #31
 8003fe8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800415c <__ieee754_rem_pio2f+0x23c>
 8003fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff0:	eeb1 6a47 	vneg.f32	s12, s14
 8003ff4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8003ff8:	ee16 1a90 	vmov	r1, s13
 8003ffc:	dc09      	bgt.n	8004012 <__ieee754_rem_pio2f+0xf2>
 8003ffe:	4a5b      	ldr	r2, [pc, #364]	@ (800416c <__ieee754_rem_pio2f+0x24c>)
 8004000:	1e47      	subs	r7, r0, #1
 8004002:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8004006:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800400a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800400e:	4293      	cmp	r3, r2
 8004010:	d107      	bne.n	8004022 <__ieee754_rem_pio2f+0x102>
 8004012:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8004016:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800401a:	2a08      	cmp	r2, #8
 800401c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8004020:	dc14      	bgt.n	800404c <__ieee754_rem_pio2f+0x12c>
 8004022:	6021      	str	r1, [r4, #0]
 8004024:	ed94 7a00 	vldr	s14, [r4]
 8004028:	ee30 0a47 	vsub.f32	s0, s0, s14
 800402c:	2e00      	cmp	r6, #0
 800402e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004032:	ed84 0a01 	vstr	s0, [r4, #4]
 8004036:	daa6      	bge.n	8003f86 <__ieee754_rem_pio2f+0x66>
 8004038:	eeb1 7a47 	vneg.f32	s14, s14
 800403c:	eeb1 0a40 	vneg.f32	s0, s0
 8004040:	ed84 7a00 	vstr	s14, [r4]
 8004044:	ed84 0a01 	vstr	s0, [r4, #4]
 8004048:	4240      	negs	r0, r0
 800404a:	e79c      	b.n	8003f86 <__ieee754_rem_pio2f+0x66>
 800404c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8004158 <__ieee754_rem_pio2f+0x238>
 8004050:	eef0 6a40 	vmov.f32	s13, s0
 8004054:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004058:	ee70 7a66 	vsub.f32	s15, s0, s13
 800405c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004060:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004160 <__ieee754_rem_pio2f+0x240>
 8004064:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8004068:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800406c:	ee15 2a90 	vmov	r2, s11
 8004070:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004074:	1a5b      	subs	r3, r3, r1
 8004076:	2b19      	cmp	r3, #25
 8004078:	dc04      	bgt.n	8004084 <__ieee754_rem_pio2f+0x164>
 800407a:	edc4 5a00 	vstr	s11, [r4]
 800407e:	eeb0 0a66 	vmov.f32	s0, s13
 8004082:	e7cf      	b.n	8004024 <__ieee754_rem_pio2f+0x104>
 8004084:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8004170 <__ieee754_rem_pio2f+0x250>
 8004088:	eeb0 0a66 	vmov.f32	s0, s13
 800408c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004090:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004094:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8004174 <__ieee754_rem_pio2f+0x254>
 8004098:	eee6 7a25 	vfma.f32	s15, s12, s11
 800409c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80040a0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80040a4:	ed84 7a00 	vstr	s14, [r4]
 80040a8:	e7bc      	b.n	8004024 <__ieee754_rem_pio2f+0x104>
 80040aa:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80040ae:	d306      	bcc.n	80040be <__ieee754_rem_pio2f+0x19e>
 80040b0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80040b4:	edc0 7a01 	vstr	s15, [r0, #4]
 80040b8:	edc0 7a00 	vstr	s15, [r0]
 80040bc:	e73e      	b.n	8003f3c <__ieee754_rem_pio2f+0x1c>
 80040be:	15ea      	asrs	r2, r5, #23
 80040c0:	3a86      	subs	r2, #134	@ 0x86
 80040c2:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80040ce:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8004178 <__ieee754_rem_pio2f+0x258>
 80040d2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040da:	ed8d 7a03 	vstr	s14, [sp, #12]
 80040de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040e2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80040e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80040ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80040ee:	ed8d 7a04 	vstr	s14, [sp, #16]
 80040f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80040f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80040fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040fe:	edcd 7a05 	vstr	s15, [sp, #20]
 8004102:	d11e      	bne.n	8004142 <__ieee754_rem_pio2f+0x222>
 8004104:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2302      	movne	r3, #2
 8004112:	491a      	ldr	r1, [pc, #104]	@ (800417c <__ieee754_rem_pio2f+0x25c>)
 8004114:	9101      	str	r1, [sp, #4]
 8004116:	2102      	movs	r1, #2
 8004118:	9100      	str	r1, [sp, #0]
 800411a:	a803      	add	r0, sp, #12
 800411c:	4621      	mov	r1, r4
 800411e:	f000 f837 	bl	8004190 <__kernel_rem_pio2f>
 8004122:	2e00      	cmp	r6, #0
 8004124:	f6bf af2f 	bge.w	8003f86 <__ieee754_rem_pio2f+0x66>
 8004128:	edd4 7a00 	vldr	s15, [r4]
 800412c:	eef1 7a67 	vneg.f32	s15, s15
 8004130:	edc4 7a00 	vstr	s15, [r4]
 8004134:	edd4 7a01 	vldr	s15, [r4, #4]
 8004138:	eef1 7a67 	vneg.f32	s15, s15
 800413c:	edc4 7a01 	vstr	s15, [r4, #4]
 8004140:	e782      	b.n	8004048 <__ieee754_rem_pio2f+0x128>
 8004142:	2303      	movs	r3, #3
 8004144:	e7e5      	b.n	8004112 <__ieee754_rem_pio2f+0x1f2>
 8004146:	bf00      	nop
 8004148:	3f490fd8 	.word	0x3f490fd8
 800414c:	4016cbe3 	.word	0x4016cbe3
 8004150:	3fc90f80 	.word	0x3fc90f80
 8004154:	3fc90fd0 	.word	0x3fc90fd0
 8004158:	37354400 	.word	0x37354400
 800415c:	37354443 	.word	0x37354443
 8004160:	2e85a308 	.word	0x2e85a308
 8004164:	43490f80 	.word	0x43490f80
 8004168:	3f22f984 	.word	0x3f22f984
 800416c:	080047f8 	.word	0x080047f8
 8004170:	2e85a300 	.word	0x2e85a300
 8004174:	248d3132 	.word	0x248d3132
 8004178:	43800000 	.word	0x43800000
 800417c:	08004878 	.word	0x08004878

08004180 <fabsf>:
 8004180:	ee10 3a10 	vmov	r3, s0
 8004184:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004188:	ee00 3a10 	vmov	s0, r3
 800418c:	4770      	bx	lr
	...

08004190 <__kernel_rem_pio2f>:
 8004190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004194:	ed2d 8b04 	vpush	{d8-d9}
 8004198:	b0d9      	sub	sp, #356	@ 0x164
 800419a:	4690      	mov	r8, r2
 800419c:	9001      	str	r0, [sp, #4]
 800419e:	4ab9      	ldr	r2, [pc, #740]	@ (8004484 <__kernel_rem_pio2f+0x2f4>)
 80041a0:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80041a2:	f118 0f04 	cmn.w	r8, #4
 80041a6:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80041aa:	460f      	mov	r7, r1
 80041ac:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80041b0:	db27      	blt.n	8004202 <__kernel_rem_pio2f+0x72>
 80041b2:	f1b8 0203 	subs.w	r2, r8, #3
 80041b6:	bf48      	it	mi
 80041b8:	f108 0204 	addmi.w	r2, r8, #4
 80041bc:	10d2      	asrs	r2, r2, #3
 80041be:	1c55      	adds	r5, r2, #1
 80041c0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80041c2:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8004494 <__kernel_rem_pio2f+0x304>
 80041c6:	00e8      	lsls	r0, r5, #3
 80041c8:	eba2 060b 	sub.w	r6, r2, fp
 80041cc:	9002      	str	r0, [sp, #8]
 80041ce:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80041d2:	eb0a 0c0b 	add.w	ip, sl, fp
 80041d6:	ac1c      	add	r4, sp, #112	@ 0x70
 80041d8:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80041dc:	2000      	movs	r0, #0
 80041de:	4560      	cmp	r0, ip
 80041e0:	dd11      	ble.n	8004206 <__kernel_rem_pio2f+0x76>
 80041e2:	a91c      	add	r1, sp, #112	@ 0x70
 80041e4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 80041e8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 80041ec:	f04f 0c00 	mov.w	ip, #0
 80041f0:	45d4      	cmp	ip, sl
 80041f2:	dc27      	bgt.n	8004244 <__kernel_rem_pio2f+0xb4>
 80041f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80041f8:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8004494 <__kernel_rem_pio2f+0x304>
 80041fc:	4606      	mov	r6, r0
 80041fe:	2400      	movs	r4, #0
 8004200:	e016      	b.n	8004230 <__kernel_rem_pio2f+0xa0>
 8004202:	2200      	movs	r2, #0
 8004204:	e7db      	b.n	80041be <__kernel_rem_pio2f+0x2e>
 8004206:	42c6      	cmn	r6, r0
 8004208:	bf5d      	ittte	pl
 800420a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800420e:	ee07 1a90 	vmovpl	s15, r1
 8004212:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004216:	eef0 7a47 	vmovmi.f32	s15, s14
 800421a:	ece4 7a01 	vstmia	r4!, {s15}
 800421e:	3001      	adds	r0, #1
 8004220:	e7dd      	b.n	80041de <__kernel_rem_pio2f+0x4e>
 8004222:	ecfe 6a01 	vldmia	lr!, {s13}
 8004226:	ed96 7a00 	vldr	s14, [r6]
 800422a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800422e:	3401      	adds	r4, #1
 8004230:	455c      	cmp	r4, fp
 8004232:	f1a6 0604 	sub.w	r6, r6, #4
 8004236:	ddf4      	ble.n	8004222 <__kernel_rem_pio2f+0x92>
 8004238:	ece9 7a01 	vstmia	r9!, {s15}
 800423c:	f10c 0c01 	add.w	ip, ip, #1
 8004240:	3004      	adds	r0, #4
 8004242:	e7d5      	b.n	80041f0 <__kernel_rem_pio2f+0x60>
 8004244:	a908      	add	r1, sp, #32
 8004246:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800424a:	9104      	str	r1, [sp, #16]
 800424c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800424e:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8004490 <__kernel_rem_pio2f+0x300>
 8004252:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800448c <__kernel_rem_pio2f+0x2fc>
 8004256:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800425a:	9203      	str	r2, [sp, #12]
 800425c:	4654      	mov	r4, sl
 800425e:	00a2      	lsls	r2, r4, #2
 8004260:	9205      	str	r2, [sp, #20]
 8004262:	aa58      	add	r2, sp, #352	@ 0x160
 8004264:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8004268:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800426c:	a944      	add	r1, sp, #272	@ 0x110
 800426e:	aa08      	add	r2, sp, #32
 8004270:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8004274:	4694      	mov	ip, r2
 8004276:	4626      	mov	r6, r4
 8004278:	2e00      	cmp	r6, #0
 800427a:	f1a0 0004 	sub.w	r0, r0, #4
 800427e:	dc4c      	bgt.n	800431a <__kernel_rem_pio2f+0x18a>
 8004280:	4628      	mov	r0, r5
 8004282:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004286:	f000 fa39 	bl	80046fc <scalbnf>
 800428a:	eeb0 8a40 	vmov.f32	s16, s0
 800428e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8004292:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004296:	f000 f9ed 	bl	8004674 <floorf>
 800429a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800429e:	eea0 8a67 	vfms.f32	s16, s0, s15
 80042a2:	2d00      	cmp	r5, #0
 80042a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80042ac:	ee17 9a90 	vmov	r9, s15
 80042b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80042b8:	dd41      	ble.n	800433e <__kernel_rem_pio2f+0x1ae>
 80042ba:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80042be:	a908      	add	r1, sp, #32
 80042c0:	f1c5 0e08 	rsb	lr, r5, #8
 80042c4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80042c8:	fa46 f00e 	asr.w	r0, r6, lr
 80042cc:	4481      	add	r9, r0
 80042ce:	fa00 f00e 	lsl.w	r0, r0, lr
 80042d2:	1a36      	subs	r6, r6, r0
 80042d4:	f1c5 0007 	rsb	r0, r5, #7
 80042d8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80042dc:	4106      	asrs	r6, r0
 80042de:	2e00      	cmp	r6, #0
 80042e0:	dd3c      	ble.n	800435c <__kernel_rem_pio2f+0x1cc>
 80042e2:	f04f 0e00 	mov.w	lr, #0
 80042e6:	f109 0901 	add.w	r9, r9, #1
 80042ea:	4670      	mov	r0, lr
 80042ec:	4574      	cmp	r4, lr
 80042ee:	dc68      	bgt.n	80043c2 <__kernel_rem_pio2f+0x232>
 80042f0:	2d00      	cmp	r5, #0
 80042f2:	dd03      	ble.n	80042fc <__kernel_rem_pio2f+0x16c>
 80042f4:	2d01      	cmp	r5, #1
 80042f6:	d074      	beq.n	80043e2 <__kernel_rem_pio2f+0x252>
 80042f8:	2d02      	cmp	r5, #2
 80042fa:	d07d      	beq.n	80043f8 <__kernel_rem_pio2f+0x268>
 80042fc:	2e02      	cmp	r6, #2
 80042fe:	d12d      	bne.n	800435c <__kernel_rem_pio2f+0x1cc>
 8004300:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004304:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004308:	b340      	cbz	r0, 800435c <__kernel_rem_pio2f+0x1cc>
 800430a:	4628      	mov	r0, r5
 800430c:	9306      	str	r3, [sp, #24]
 800430e:	f000 f9f5 	bl	80046fc <scalbnf>
 8004312:	9b06      	ldr	r3, [sp, #24]
 8004314:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004318:	e020      	b.n	800435c <__kernel_rem_pio2f+0x1cc>
 800431a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800431e:	3e01      	subs	r6, #1
 8004320:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004328:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800432c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004330:	ecac 0a01 	vstmia	ip!, {s0}
 8004334:	ed90 0a00 	vldr	s0, [r0]
 8004338:	ee37 0a80 	vadd.f32	s0, s15, s0
 800433c:	e79c      	b.n	8004278 <__kernel_rem_pio2f+0xe8>
 800433e:	d105      	bne.n	800434c <__kernel_rem_pio2f+0x1bc>
 8004340:	1e60      	subs	r0, r4, #1
 8004342:	a908      	add	r1, sp, #32
 8004344:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8004348:	11f6      	asrs	r6, r6, #7
 800434a:	e7c8      	b.n	80042de <__kernel_rem_pio2f+0x14e>
 800434c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8004350:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004358:	da31      	bge.n	80043be <__kernel_rem_pio2f+0x22e>
 800435a:	2600      	movs	r6, #0
 800435c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004364:	f040 8098 	bne.w	8004498 <__kernel_rem_pio2f+0x308>
 8004368:	1e60      	subs	r0, r4, #1
 800436a:	2200      	movs	r2, #0
 800436c:	4550      	cmp	r0, sl
 800436e:	da4b      	bge.n	8004408 <__kernel_rem_pio2f+0x278>
 8004370:	2a00      	cmp	r2, #0
 8004372:	d065      	beq.n	8004440 <__kernel_rem_pio2f+0x2b0>
 8004374:	3c01      	subs	r4, #1
 8004376:	ab08      	add	r3, sp, #32
 8004378:	3d08      	subs	r5, #8
 800437a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f8      	beq.n	8004374 <__kernel_rem_pio2f+0x1e4>
 8004382:	4628      	mov	r0, r5
 8004384:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8004388:	f000 f9b8 	bl	80046fc <scalbnf>
 800438c:	1c63      	adds	r3, r4, #1
 800438e:	aa44      	add	r2, sp, #272	@ 0x110
 8004390:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004490 <__kernel_rem_pio2f+0x300>
 8004394:	0099      	lsls	r1, r3, #2
 8004396:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800439a:	4623      	mov	r3, r4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f280 80a9 	bge.w	80044f4 <__kernel_rem_pio2f+0x364>
 80043a2:	4623      	mov	r3, r4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f2c0 80c7 	blt.w	8004538 <__kernel_rem_pio2f+0x3a8>
 80043aa:	aa44      	add	r2, sp, #272	@ 0x110
 80043ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80043b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8004488 <__kernel_rem_pio2f+0x2f8>
 80043b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8004494 <__kernel_rem_pio2f+0x304>
 80043b8:	2000      	movs	r0, #0
 80043ba:	1ae2      	subs	r2, r4, r3
 80043bc:	e0b1      	b.n	8004522 <__kernel_rem_pio2f+0x392>
 80043be:	2602      	movs	r6, #2
 80043c0:	e78f      	b.n	80042e2 <__kernel_rem_pio2f+0x152>
 80043c2:	f852 1b04 	ldr.w	r1, [r2], #4
 80043c6:	b948      	cbnz	r0, 80043dc <__kernel_rem_pio2f+0x24c>
 80043c8:	b121      	cbz	r1, 80043d4 <__kernel_rem_pio2f+0x244>
 80043ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80043ce:	f842 1c04 	str.w	r1, [r2, #-4]
 80043d2:	2101      	movs	r1, #1
 80043d4:	f10e 0e01 	add.w	lr, lr, #1
 80043d8:	4608      	mov	r0, r1
 80043da:	e787      	b.n	80042ec <__kernel_rem_pio2f+0x15c>
 80043dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80043e0:	e7f5      	b.n	80043ce <__kernel_rem_pio2f+0x23e>
 80043e2:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80043e6:	aa08      	add	r2, sp, #32
 80043e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80043ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80043f0:	a908      	add	r1, sp, #32
 80043f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80043f6:	e781      	b.n	80042fc <__kernel_rem_pio2f+0x16c>
 80043f8:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 80043fc:	aa08      	add	r2, sp, #32
 80043fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004402:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8004406:	e7f3      	b.n	80043f0 <__kernel_rem_pio2f+0x260>
 8004408:	a908      	add	r1, sp, #32
 800440a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800440e:	3801      	subs	r0, #1
 8004410:	430a      	orrs	r2, r1
 8004412:	e7ab      	b.n	800436c <__kernel_rem_pio2f+0x1dc>
 8004414:	3201      	adds	r2, #1
 8004416:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800441a:	2e00      	cmp	r6, #0
 800441c:	d0fa      	beq.n	8004414 <__kernel_rem_pio2f+0x284>
 800441e:	9905      	ldr	r1, [sp, #20]
 8004420:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8004424:	eb0d 0001 	add.w	r0, sp, r1
 8004428:	18e6      	adds	r6, r4, r3
 800442a:	a91c      	add	r1, sp, #112	@ 0x70
 800442c:	f104 0c01 	add.w	ip, r4, #1
 8004430:	384c      	subs	r0, #76	@ 0x4c
 8004432:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8004436:	4422      	add	r2, r4
 8004438:	4562      	cmp	r2, ip
 800443a:	da04      	bge.n	8004446 <__kernel_rem_pio2f+0x2b6>
 800443c:	4614      	mov	r4, r2
 800443e:	e70e      	b.n	800425e <__kernel_rem_pio2f+0xce>
 8004440:	9804      	ldr	r0, [sp, #16]
 8004442:	2201      	movs	r2, #1
 8004444:	e7e7      	b.n	8004416 <__kernel_rem_pio2f+0x286>
 8004446:	9903      	ldr	r1, [sp, #12]
 8004448:	f8dd e004 	ldr.w	lr, [sp, #4]
 800444c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8004450:	9105      	str	r1, [sp, #20]
 8004452:	ee07 1a90 	vmov	s15, r1
 8004456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800445a:	2400      	movs	r4, #0
 800445c:	ece6 7a01 	vstmia	r6!, {s15}
 8004460:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8004494 <__kernel_rem_pio2f+0x304>
 8004464:	46b1      	mov	r9, r6
 8004466:	455c      	cmp	r4, fp
 8004468:	dd04      	ble.n	8004474 <__kernel_rem_pio2f+0x2e4>
 800446a:	ece0 7a01 	vstmia	r0!, {s15}
 800446e:	f10c 0c01 	add.w	ip, ip, #1
 8004472:	e7e1      	b.n	8004438 <__kernel_rem_pio2f+0x2a8>
 8004474:	ecfe 6a01 	vldmia	lr!, {s13}
 8004478:	ed39 7a01 	vldmdb	r9!, {s14}
 800447c:	3401      	adds	r4, #1
 800447e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004482:	e7f0      	b.n	8004466 <__kernel_rem_pio2f+0x2d6>
 8004484:	08004bbc 	.word	0x08004bbc
 8004488:	08004b90 	.word	0x08004b90
 800448c:	43800000 	.word	0x43800000
 8004490:	3b800000 	.word	0x3b800000
 8004494:	00000000 	.word	0x00000000
 8004498:	9b02      	ldr	r3, [sp, #8]
 800449a:	eeb0 0a48 	vmov.f32	s0, s16
 800449e:	eba3 0008 	sub.w	r0, r3, r8
 80044a2:	f000 f92b 	bl	80046fc <scalbnf>
 80044a6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800448c <__kernel_rem_pio2f+0x2fc>
 80044aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80044ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b2:	db19      	blt.n	80044e8 <__kernel_rem_pio2f+0x358>
 80044b4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8004490 <__kernel_rem_pio2f+0x300>
 80044b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80044bc:	aa08      	add	r2, sp, #32
 80044be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c2:	3508      	adds	r5, #8
 80044c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80044cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80044d4:	ee10 3a10 	vmov	r3, s0
 80044d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80044dc:	ee17 3a90 	vmov	r3, s15
 80044e0:	3401      	adds	r4, #1
 80044e2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80044e6:	e74c      	b.n	8004382 <__kernel_rem_pio2f+0x1f2>
 80044e8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80044ec:	aa08      	add	r2, sp, #32
 80044ee:	ee10 3a10 	vmov	r3, s0
 80044f2:	e7f6      	b.n	80044e2 <__kernel_rem_pio2f+0x352>
 80044f4:	a808      	add	r0, sp, #32
 80044f6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80044fa:	9001      	str	r0, [sp, #4]
 80044fc:	ee07 0a90 	vmov	s15, r0
 8004500:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004504:	3b01      	subs	r3, #1
 8004506:	ee67 7a80 	vmul.f32	s15, s15, s0
 800450a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800450e:	ed62 7a01 	vstmdb	r2!, {s15}
 8004512:	e743      	b.n	800439c <__kernel_rem_pio2f+0x20c>
 8004514:	ecfc 6a01 	vldmia	ip!, {s13}
 8004518:	ecb5 7a01 	vldmia	r5!, {s14}
 800451c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004520:	3001      	adds	r0, #1
 8004522:	4550      	cmp	r0, sl
 8004524:	dc01      	bgt.n	800452a <__kernel_rem_pio2f+0x39a>
 8004526:	4282      	cmp	r2, r0
 8004528:	daf4      	bge.n	8004514 <__kernel_rem_pio2f+0x384>
 800452a:	a858      	add	r0, sp, #352	@ 0x160
 800452c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004530:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8004534:	3b01      	subs	r3, #1
 8004536:	e735      	b.n	80043a4 <__kernel_rem_pio2f+0x214>
 8004538:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800453a:	2b02      	cmp	r3, #2
 800453c:	dc09      	bgt.n	8004552 <__kernel_rem_pio2f+0x3c2>
 800453e:	2b00      	cmp	r3, #0
 8004540:	dc2b      	bgt.n	800459a <__kernel_rem_pio2f+0x40a>
 8004542:	d044      	beq.n	80045ce <__kernel_rem_pio2f+0x43e>
 8004544:	f009 0007 	and.w	r0, r9, #7
 8004548:	b059      	add	sp, #356	@ 0x164
 800454a:	ecbd 8b04 	vpop	{d8-d9}
 800454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004552:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8004554:	2b03      	cmp	r3, #3
 8004556:	d1f5      	bne.n	8004544 <__kernel_rem_pio2f+0x3b4>
 8004558:	aa30      	add	r2, sp, #192	@ 0xc0
 800455a:	1f0b      	subs	r3, r1, #4
 800455c:	4413      	add	r3, r2
 800455e:	461a      	mov	r2, r3
 8004560:	4620      	mov	r0, r4
 8004562:	2800      	cmp	r0, #0
 8004564:	f1a2 0204 	sub.w	r2, r2, #4
 8004568:	dc52      	bgt.n	8004610 <__kernel_rem_pio2f+0x480>
 800456a:	4622      	mov	r2, r4
 800456c:	2a01      	cmp	r2, #1
 800456e:	f1a3 0304 	sub.w	r3, r3, #4
 8004572:	dc5d      	bgt.n	8004630 <__kernel_rem_pio2f+0x4a0>
 8004574:	ab30      	add	r3, sp, #192	@ 0xc0
 8004576:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8004494 <__kernel_rem_pio2f+0x304>
 800457a:	440b      	add	r3, r1
 800457c:	2c01      	cmp	r4, #1
 800457e:	dc67      	bgt.n	8004650 <__kernel_rem_pio2f+0x4c0>
 8004580:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8004584:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8004588:	2e00      	cmp	r6, #0
 800458a:	d167      	bne.n	800465c <__kernel_rem_pio2f+0x4cc>
 800458c:	edc7 6a00 	vstr	s13, [r7]
 8004590:	ed87 7a01 	vstr	s14, [r7, #4]
 8004594:	edc7 7a02 	vstr	s15, [r7, #8]
 8004598:	e7d4      	b.n	8004544 <__kernel_rem_pio2f+0x3b4>
 800459a:	ab30      	add	r3, sp, #192	@ 0xc0
 800459c:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8004494 <__kernel_rem_pio2f+0x304>
 80045a0:	440b      	add	r3, r1
 80045a2:	4622      	mov	r2, r4
 80045a4:	2a00      	cmp	r2, #0
 80045a6:	da24      	bge.n	80045f2 <__kernel_rem_pio2f+0x462>
 80045a8:	b34e      	cbz	r6, 80045fe <__kernel_rem_pio2f+0x46e>
 80045aa:	eef1 7a47 	vneg.f32	s15, s14
 80045ae:	edc7 7a00 	vstr	s15, [r7]
 80045b2:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80045b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045ba:	aa31      	add	r2, sp, #196	@ 0xc4
 80045bc:	2301      	movs	r3, #1
 80045be:	429c      	cmp	r4, r3
 80045c0:	da20      	bge.n	8004604 <__kernel_rem_pio2f+0x474>
 80045c2:	b10e      	cbz	r6, 80045c8 <__kernel_rem_pio2f+0x438>
 80045c4:	eef1 7a67 	vneg.f32	s15, s15
 80045c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80045cc:	e7ba      	b.n	8004544 <__kernel_rem_pio2f+0x3b4>
 80045ce:	ab30      	add	r3, sp, #192	@ 0xc0
 80045d0:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8004494 <__kernel_rem_pio2f+0x304>
 80045d4:	440b      	add	r3, r1
 80045d6:	2c00      	cmp	r4, #0
 80045d8:	da05      	bge.n	80045e6 <__kernel_rem_pio2f+0x456>
 80045da:	b10e      	cbz	r6, 80045e0 <__kernel_rem_pio2f+0x450>
 80045dc:	eef1 7a67 	vneg.f32	s15, s15
 80045e0:	edc7 7a00 	vstr	s15, [r7]
 80045e4:	e7ae      	b.n	8004544 <__kernel_rem_pio2f+0x3b4>
 80045e6:	ed33 7a01 	vldmdb	r3!, {s14}
 80045ea:	3c01      	subs	r4, #1
 80045ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045f0:	e7f1      	b.n	80045d6 <__kernel_rem_pio2f+0x446>
 80045f2:	ed73 7a01 	vldmdb	r3!, {s15}
 80045f6:	3a01      	subs	r2, #1
 80045f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045fc:	e7d2      	b.n	80045a4 <__kernel_rem_pio2f+0x414>
 80045fe:	eef0 7a47 	vmov.f32	s15, s14
 8004602:	e7d4      	b.n	80045ae <__kernel_rem_pio2f+0x41e>
 8004604:	ecb2 7a01 	vldmia	r2!, {s14}
 8004608:	3301      	adds	r3, #1
 800460a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800460e:	e7d6      	b.n	80045be <__kernel_rem_pio2f+0x42e>
 8004610:	edd2 7a00 	vldr	s15, [r2]
 8004614:	edd2 6a01 	vldr	s13, [r2, #4]
 8004618:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800461c:	3801      	subs	r0, #1
 800461e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004622:	ed82 7a00 	vstr	s14, [r2]
 8004626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800462a:	edc2 7a01 	vstr	s15, [r2, #4]
 800462e:	e798      	b.n	8004562 <__kernel_rem_pio2f+0x3d2>
 8004630:	edd3 7a00 	vldr	s15, [r3]
 8004634:	edd3 6a01 	vldr	s13, [r3, #4]
 8004638:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800463c:	3a01      	subs	r2, #1
 800463e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004642:	ed83 7a00 	vstr	s14, [r3]
 8004646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800464a:	edc3 7a01 	vstr	s15, [r3, #4]
 800464e:	e78d      	b.n	800456c <__kernel_rem_pio2f+0x3dc>
 8004650:	ed33 7a01 	vldmdb	r3!, {s14}
 8004654:	3c01      	subs	r4, #1
 8004656:	ee77 7a87 	vadd.f32	s15, s15, s14
 800465a:	e78f      	b.n	800457c <__kernel_rem_pio2f+0x3ec>
 800465c:	eef1 6a66 	vneg.f32	s13, s13
 8004660:	eeb1 7a47 	vneg.f32	s14, s14
 8004664:	edc7 6a00 	vstr	s13, [r7]
 8004668:	ed87 7a01 	vstr	s14, [r7, #4]
 800466c:	eef1 7a67 	vneg.f32	s15, s15
 8004670:	e790      	b.n	8004594 <__kernel_rem_pio2f+0x404>
 8004672:	bf00      	nop

08004674 <floorf>:
 8004674:	ee10 3a10 	vmov	r3, s0
 8004678:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800467c:	3a7f      	subs	r2, #127	@ 0x7f
 800467e:	2a16      	cmp	r2, #22
 8004680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004684:	dc2b      	bgt.n	80046de <floorf+0x6a>
 8004686:	2a00      	cmp	r2, #0
 8004688:	da12      	bge.n	80046b0 <floorf+0x3c>
 800468a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80046f0 <floorf+0x7c>
 800468e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004692:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469a:	dd06      	ble.n	80046aa <floorf+0x36>
 800469c:	2b00      	cmp	r3, #0
 800469e:	da24      	bge.n	80046ea <floorf+0x76>
 80046a0:	2900      	cmp	r1, #0
 80046a2:	4b14      	ldr	r3, [pc, #80]	@ (80046f4 <floorf+0x80>)
 80046a4:	bf08      	it	eq
 80046a6:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80046aa:	ee00 3a10 	vmov	s0, r3
 80046ae:	4770      	bx	lr
 80046b0:	4911      	ldr	r1, [pc, #68]	@ (80046f8 <floorf+0x84>)
 80046b2:	4111      	asrs	r1, r2
 80046b4:	420b      	tst	r3, r1
 80046b6:	d0fa      	beq.n	80046ae <floorf+0x3a>
 80046b8:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80046f0 <floorf+0x7c>
 80046bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80046c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80046c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c8:	ddef      	ble.n	80046aa <floorf+0x36>
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	bfbe      	ittt	lt
 80046ce:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80046d2:	fa40 f202 	asrlt.w	r2, r0, r2
 80046d6:	189b      	addlt	r3, r3, r2
 80046d8:	ea23 0301 	bic.w	r3, r3, r1
 80046dc:	e7e5      	b.n	80046aa <floorf+0x36>
 80046de:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80046e2:	d3e4      	bcc.n	80046ae <floorf+0x3a>
 80046e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80046e8:	4770      	bx	lr
 80046ea:	2300      	movs	r3, #0
 80046ec:	e7dd      	b.n	80046aa <floorf+0x36>
 80046ee:	bf00      	nop
 80046f0:	7149f2ca 	.word	0x7149f2ca
 80046f4:	bf800000 	.word	0xbf800000
 80046f8:	007fffff 	.word	0x007fffff

080046fc <scalbnf>:
 80046fc:	ee10 3a10 	vmov	r3, s0
 8004700:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8004704:	d02b      	beq.n	800475e <scalbnf+0x62>
 8004706:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800470a:	d302      	bcc.n	8004712 <scalbnf+0x16>
 800470c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004710:	4770      	bx	lr
 8004712:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8004716:	d123      	bne.n	8004760 <scalbnf+0x64>
 8004718:	4b24      	ldr	r3, [pc, #144]	@ (80047ac <scalbnf+0xb0>)
 800471a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80047b0 <scalbnf+0xb4>
 800471e:	4298      	cmp	r0, r3
 8004720:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004724:	db17      	blt.n	8004756 <scalbnf+0x5a>
 8004726:	ee10 3a10 	vmov	r3, s0
 800472a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800472e:	3a19      	subs	r2, #25
 8004730:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004734:	4288      	cmp	r0, r1
 8004736:	dd15      	ble.n	8004764 <scalbnf+0x68>
 8004738:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80047b4 <scalbnf+0xb8>
 800473c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80047b8 <scalbnf+0xbc>
 8004740:	ee10 3a10 	vmov	r3, s0
 8004744:	eeb0 7a67 	vmov.f32	s14, s15
 8004748:	2b00      	cmp	r3, #0
 800474a:	bfb8      	it	lt
 800474c:	eef0 7a66 	vmovlt.f32	s15, s13
 8004750:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004754:	4770      	bx	lr
 8004756:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80047bc <scalbnf+0xc0>
 800475a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800475e:	4770      	bx	lr
 8004760:	0dd2      	lsrs	r2, r2, #23
 8004762:	e7e5      	b.n	8004730 <scalbnf+0x34>
 8004764:	4410      	add	r0, r2
 8004766:	28fe      	cmp	r0, #254	@ 0xfe
 8004768:	dce6      	bgt.n	8004738 <scalbnf+0x3c>
 800476a:	2800      	cmp	r0, #0
 800476c:	dd06      	ble.n	800477c <scalbnf+0x80>
 800476e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004772:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004776:	ee00 3a10 	vmov	s0, r3
 800477a:	4770      	bx	lr
 800477c:	f110 0f16 	cmn.w	r0, #22
 8004780:	da09      	bge.n	8004796 <scalbnf+0x9a>
 8004782:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80047bc <scalbnf+0xc0>
 8004786:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80047c0 <scalbnf+0xc4>
 800478a:	ee10 3a10 	vmov	r3, s0
 800478e:	eeb0 7a67 	vmov.f32	s14, s15
 8004792:	2b00      	cmp	r3, #0
 8004794:	e7d9      	b.n	800474a <scalbnf+0x4e>
 8004796:	3019      	adds	r0, #25
 8004798:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800479c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80047a0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80047c4 <scalbnf+0xc8>
 80047a4:	ee07 3a90 	vmov	s15, r3
 80047a8:	e7d7      	b.n	800475a <scalbnf+0x5e>
 80047aa:	bf00      	nop
 80047ac:	ffff3cb0 	.word	0xffff3cb0
 80047b0:	4c000000 	.word	0x4c000000
 80047b4:	7149f2ca 	.word	0x7149f2ca
 80047b8:	f149f2ca 	.word	0xf149f2ca
 80047bc:	0da24260 	.word	0x0da24260
 80047c0:	8da24260 	.word	0x8da24260
 80047c4:	33000000 	.word	0x33000000

080047c8 <_init>:
 80047c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ca:	bf00      	nop
 80047cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ce:	bc08      	pop	{r3}
 80047d0:	469e      	mov	lr, r3
 80047d2:	4770      	bx	lr

080047d4 <_fini>:
 80047d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047d6:	bf00      	nop
 80047d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047da:	bc08      	pop	{r3}
 80047dc:	469e      	mov	lr, r3
 80047de:	4770      	bx	lr
