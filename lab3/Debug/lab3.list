
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080a4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000824  08008278  08008278  00009278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a9c  08008a9c  0000a1e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008a9c  08008a9c  00009a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008aa4  08008aa4  0000a1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008aa4  08008aa4  00009aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008aa8  08008aa8  00009aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08008aac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200001e0  08008c8c  0000a1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  08008c8c  0000a59c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f739  00000000  00000000  0000a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002495  00000000  00000000  00019949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  0001bde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7e  00000000  00000000  0001cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002337d  00000000  00000000  0001d826  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011425  00000000  00000000  00040ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4c4e  00000000  00000000  00051fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126c16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000529c  00000000  00000000  00126c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012bef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800825c 	.word	0x0800825c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800825c 	.word	0x0800825c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c60:	f000 b9a0 	b.w	8000fa4 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f83c 	bl	8000ce8 <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__aeabi_d2lz>:
 8000c7c:	b538      	push	{r3, r4, r5, lr}
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2300      	movs	r3, #0
 8000c82:	4604      	mov	r4, r0
 8000c84:	460d      	mov	r5, r1
 8000c86:	f7ff ff49 	bl	8000b1c <__aeabi_dcmplt>
 8000c8a:	b928      	cbnz	r0, 8000c98 <__aeabi_d2lz+0x1c>
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	4629      	mov	r1, r5
 8000c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c94:	f000 b80a 	b.w	8000cac <__aeabi_d2ulz>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c9e:	f000 f805 	bl	8000cac <__aeabi_d2ulz>
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	bd38      	pop	{r3, r4, r5, pc}
 8000caa:	bf00      	nop

08000cac <__aeabi_d2ulz>:
 8000cac:	b5d0      	push	{r4, r6, r7, lr}
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <__aeabi_d2ulz+0x34>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4606      	mov	r6, r0
 8000cb4:	460f      	mov	r7, r1
 8000cb6:	f7ff fcbf 	bl	8000638 <__aeabi_dmul>
 8000cba:	f7ff ff57 	bl	8000b6c <__aeabi_d2uiz>
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	f7ff fc40 	bl	8000544 <__aeabi_ui2d>
 8000cc4:	4b07      	ldr	r3, [pc, #28]	@ (8000ce4 <__aeabi_d2ulz+0x38>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f7ff fcb6 	bl	8000638 <__aeabi_dmul>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	460b      	mov	r3, r1
 8000cd0:	4630      	mov	r0, r6
 8000cd2:	4639      	mov	r1, r7
 8000cd4:	f7ff faf8 	bl	80002c8 <__aeabi_dsub>
 8000cd8:	f7ff ff48 	bl	8000b6c <__aeabi_d2uiz>
 8000cdc:	4621      	mov	r1, r4
 8000cde:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce0:	3df00000 	.word	0x3df00000
 8000ce4:	41f00000 	.word	0x41f00000

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9d08      	ldr	r5, [sp, #32]
 8000cee:	460c      	mov	r4, r1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14e      	bne.n	8000d92 <__udivmoddi4+0xaa>
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	458c      	cmp	ip, r1
 8000cf8:	4686      	mov	lr, r0
 8000cfa:	fab2 f282 	clz	r2, r2
 8000cfe:	d962      	bls.n	8000dc6 <__udivmoddi4+0xde>
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0320 	rsb	r3, r2, #32
 8000d06:	4091      	lsls	r1, r2
 8000d08:	fa20 f303 	lsr.w	r3, r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	4319      	orrs	r1, r3
 8000d12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f f68c 	uxth.w	r6, ip
 8000d1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb07 1114 	mls	r1, r7, r4, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb04 f106 	mul.w	r1, r4, r6
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x64>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d3e:	f080 8112 	bcs.w	8000f66 <__udivmoddi4+0x27e>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 810f 	bls.w	8000f66 <__udivmoddi4+0x27e>
 8000d48:	3c02      	subs	r4, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1a59      	subs	r1, r3, r1
 8000d4e:	fa1f f38e 	uxth.w	r3, lr
 8000d52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d56:	fb07 1110 	mls	r1, r7, r0, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f606 	mul.w	r6, r0, r6
 8000d62:	429e      	cmp	r6, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x94>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d6e:	f080 80fc 	bcs.w	8000f6a <__udivmoddi4+0x282>
 8000d72:	429e      	cmp	r6, r3
 8000d74:	f240 80f9 	bls.w	8000f6a <__udivmoddi4+0x282>
 8000d78:	4463      	add	r3, ip
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	1b9b      	subs	r3, r3, r6
 8000d7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d82:	2100      	movs	r1, #0
 8000d84:	b11d      	cbz	r5, 8000d8e <__udivmoddi4+0xa6>
 8000d86:	40d3      	lsrs	r3, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d905      	bls.n	8000da2 <__udivmoddi4+0xba>
 8000d96:	b10d      	cbz	r5, 8000d9c <__udivmoddi4+0xb4>
 8000d98:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e7f5      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000da2:	fab3 f183 	clz	r1, r3
 8000da6:	2900      	cmp	r1, #0
 8000da8:	d146      	bne.n	8000e38 <__udivmoddi4+0x150>
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	d302      	bcc.n	8000db4 <__udivmoddi4+0xcc>
 8000dae:	4290      	cmp	r0, r2
 8000db0:	f0c0 80f0 	bcc.w	8000f94 <__udivmoddi4+0x2ac>
 8000db4:	1a86      	subs	r6, r0, r2
 8000db6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dba:	2001      	movs	r0, #1
 8000dbc:	2d00      	cmp	r5, #0
 8000dbe:	d0e6      	beq.n	8000d8e <__udivmoddi4+0xa6>
 8000dc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc4:	e7e3      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000dc6:	2a00      	cmp	r2, #0
 8000dc8:	f040 8090 	bne.w	8000eec <__udivmoddi4+0x204>
 8000dcc:	eba1 040c 	sub.w	r4, r1, ip
 8000dd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dd4:	fa1f f78c 	uxth.w	r7, ip
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de2:	fb08 4416 	mls	r4, r8, r6, r4
 8000de6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dea:	fb07 f006 	mul.w	r0, r7, r6
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x11c>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x11a>
 8000dfc:	4298      	cmp	r0, r3
 8000dfe:	f200 80cd 	bhi.w	8000f9c <__udivmoddi4+0x2b4>
 8000e02:	4626      	mov	r6, r4
 8000e04:	1a1c      	subs	r4, r3, r0
 8000e06:	fa1f f38e 	uxth.w	r3, lr
 8000e0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e16:	fb00 f707 	mul.w	r7, r0, r7
 8000e1a:	429f      	cmp	r7, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x148>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x146>
 8000e28:	429f      	cmp	r7, r3
 8000e2a:	f200 80b0 	bhi.w	8000f8e <__udivmoddi4+0x2a6>
 8000e2e:	4620      	mov	r0, r4
 8000e30:	1bdb      	subs	r3, r3, r7
 8000e32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e36:	e7a5      	b.n	8000d84 <__udivmoddi4+0x9c>
 8000e38:	f1c1 0620 	rsb	r6, r1, #32
 8000e3c:	408b      	lsls	r3, r1
 8000e3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e42:	431f      	orrs	r7, r3
 8000e44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e48:	fa04 f301 	lsl.w	r3, r4, r1
 8000e4c:	ea43 030c 	orr.w	r3, r3, ip
 8000e50:	40f4      	lsrs	r4, r6
 8000e52:	fa00 f801 	lsl.w	r8, r0, r1
 8000e56:	0c38      	lsrs	r0, r7, #16
 8000e58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e60:	fa1f fc87 	uxth.w	ip, r7
 8000e64:	fb00 441e 	mls	r4, r0, lr, r4
 8000e68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e70:	45a1      	cmp	r9, r4
 8000e72:	fa02 f201 	lsl.w	r2, r2, r1
 8000e76:	d90a      	bls.n	8000e8e <__udivmoddi4+0x1a6>
 8000e78:	193c      	adds	r4, r7, r4
 8000e7a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e7e:	f080 8084 	bcs.w	8000f8a <__udivmoddi4+0x2a2>
 8000e82:	45a1      	cmp	r9, r4
 8000e84:	f240 8081 	bls.w	8000f8a <__udivmoddi4+0x2a2>
 8000e88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e8c:	443c      	add	r4, r7
 8000e8e:	eba4 0409 	sub.w	r4, r4, r9
 8000e92:	fa1f f983 	uxth.w	r9, r3
 8000e96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ea6:	45a4      	cmp	ip, r4
 8000ea8:	d907      	bls.n	8000eba <__udivmoddi4+0x1d2>
 8000eaa:	193c      	adds	r4, r7, r4
 8000eac:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000eb0:	d267      	bcs.n	8000f82 <__udivmoddi4+0x29a>
 8000eb2:	45a4      	cmp	ip, r4
 8000eb4:	d965      	bls.n	8000f82 <__udivmoddi4+0x29a>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	443c      	add	r4, r7
 8000eba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ebe:	fba0 9302 	umull	r9, r3, r0, r2
 8000ec2:	eba4 040c 	sub.w	r4, r4, ip
 8000ec6:	429c      	cmp	r4, r3
 8000ec8:	46ce      	mov	lr, r9
 8000eca:	469c      	mov	ip, r3
 8000ecc:	d351      	bcc.n	8000f72 <__udivmoddi4+0x28a>
 8000ece:	d04e      	beq.n	8000f6e <__udivmoddi4+0x286>
 8000ed0:	b155      	cbz	r5, 8000ee8 <__udivmoddi4+0x200>
 8000ed2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ed6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eda:	fa04 f606 	lsl.w	r6, r4, r6
 8000ede:	40cb      	lsrs	r3, r1
 8000ee0:	431e      	orrs	r6, r3
 8000ee2:	40cc      	lsrs	r4, r1
 8000ee4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ee8:	2100      	movs	r1, #0
 8000eea:	e750      	b.n	8000d8e <__udivmoddi4+0xa6>
 8000eec:	f1c2 0320 	rsb	r3, r2, #32
 8000ef0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	fa24 f303 	lsr.w	r3, r4, r3
 8000efc:	4094      	lsls	r4, r2
 8000efe:	430c      	orrs	r4, r1
 8000f00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f08:	fa1f f78c 	uxth.w	r7, ip
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3110 	mls	r1, r8, r0, r3
 8000f14:	0c23      	lsrs	r3, r4, #16
 8000f16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f1a:	fb00 f107 	mul.w	r1, r0, r7
 8000f1e:	4299      	cmp	r1, r3
 8000f20:	d908      	bls.n	8000f34 <__udivmoddi4+0x24c>
 8000f22:	eb1c 0303 	adds.w	r3, ip, r3
 8000f26:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f2a:	d22c      	bcs.n	8000f86 <__udivmoddi4+0x29e>
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	d92a      	bls.n	8000f86 <__udivmoddi4+0x29e>
 8000f30:	3802      	subs	r0, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a5b      	subs	r3, r3, r1
 8000f36:	b2a4      	uxth	r4, r4
 8000f38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f44:	fb01 f307 	mul.w	r3, r1, r7
 8000f48:	42a3      	cmp	r3, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x276>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f54:	d213      	bcs.n	8000f7e <__udivmoddi4+0x296>
 8000f56:	42a3      	cmp	r3, r4
 8000f58:	d911      	bls.n	8000f7e <__udivmoddi4+0x296>
 8000f5a:	3902      	subs	r1, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	1ae4      	subs	r4, r4, r3
 8000f60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f64:	e739      	b.n	8000dda <__udivmoddi4+0xf2>
 8000f66:	4604      	mov	r4, r0
 8000f68:	e6f0      	b.n	8000d4c <__udivmoddi4+0x64>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e706      	b.n	8000d7c <__udivmoddi4+0x94>
 8000f6e:	45c8      	cmp	r8, r9
 8000f70:	d2ae      	bcs.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a8      	b.n	8000ed0 <__udivmoddi4+0x1e8>
 8000f7e:	4631      	mov	r1, r6
 8000f80:	e7ed      	b.n	8000f5e <__udivmoddi4+0x276>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e799      	b.n	8000eba <__udivmoddi4+0x1d2>
 8000f86:	4630      	mov	r0, r6
 8000f88:	e7d4      	b.n	8000f34 <__udivmoddi4+0x24c>
 8000f8a:	46d6      	mov	lr, sl
 8000f8c:	e77f      	b.n	8000e8e <__udivmoddi4+0x1a6>
 8000f8e:	4463      	add	r3, ip
 8000f90:	3802      	subs	r0, #2
 8000f92:	e74d      	b.n	8000e30 <__udivmoddi4+0x148>
 8000f94:	4606      	mov	r6, r0
 8000f96:	4623      	mov	r3, r4
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e70f      	b.n	8000dbc <__udivmoddi4+0xd4>
 8000f9c:	3e02      	subs	r6, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	e730      	b.n	8000e04 <__udivmoddi4+0x11c>
 8000fa2:	bf00      	nop

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <main>:

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
    /* HAL Initialization and system clock setup */
    HAL_Init();
 8000fae:	f000 fde5 	bl	8001b7c <HAL_Init>
    SystemClock_Config();
 8000fb2:	f000 fa7b 	bl	80014ac <SystemClock_Config>

    /* Initialize peripherals */
    MX_GPIO_Init();
 8000fb6:	f000 fb6f 	bl	8001698 <MX_GPIO_Init>
    MX_DAC_Init();
 8000fba:	f000 fae3 	bl	8001584 <MX_DAC_Init>
    MX_TIM6_Init();
 8000fbe:	f000 fb0b 	bl	80015d8 <MX_TIM6_Init>
    MX_USART2_UART_Init();
 8000fc2:	f000 fb3f 	bl	8001644 <MX_USART2_UART_Init>

    /* USER CODE BEGIN 2 */
    // Start UART reception in interrupt mode
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&uart_rx_data, 1);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	4933      	ldr	r1, [pc, #204]	@ (8001098 <main+0xf0>)
 8000fca:	4834      	ldr	r0, [pc, #208]	@ (800109c <main+0xf4>)
 8000fcc:	f002 fcbd 	bl	800394a <HAL_UART_Receive_IT>

    // Start timer in interrupt mode
    HAL_TIM_Base_Start_IT(&htim6);
 8000fd0:	4833      	ldr	r0, [pc, #204]	@ (80010a0 <main+0xf8>)
 8000fd2:	f002 f91b 	bl	800320c <HAL_TIM_Base_Start_IT>

    // Start DAC
    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4832      	ldr	r0, [pc, #200]	@ (80010a4 <main+0xfc>)
 8000fda:	f000 ff74 	bl	8001ec6 <HAL_DAC_Start>

    // Calculate phase increment
    phase_increment = (freq * SAMPLES) / TIMER_FREQUENCY;
 8000fde:	4b32      	ldr	r3, [pc, #200]	@ (80010a8 <main+0x100>)
 8000fe0:	edd3 7a00 	vldr	s15, [r3]
 8000fe4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80010ac <main+0x104>
 8000fe8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fec:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80010b0 <main+0x108>
 8000ff0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	@ (80010b4 <main+0x10c>)
 8000ff6:	edc3 7a00 	vstr	s15, [r3]

    // Generate sine_wave[] array
    for(int i = 0; i < SAMPLES; i++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	e038      	b.n	8001072 <main+0xca>
    {
        sine_wave[i] = (sinf(2 * M_PI * i / SAMPLES) * m * amp + 1) / 2;
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff faaf 	bl	8000564 <__aeabi_i2d>
 8001006:	a322      	add	r3, pc, #136	@ (adr r3, 8001090 <main+0xe8>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff fb14 	bl	8000638 <__aeabi_dmul>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4610      	mov	r0, r2
 8001016:	4619      	mov	r1, r3
 8001018:	f04f 0200 	mov.w	r2, #0
 800101c:	4b26      	ldr	r3, [pc, #152]	@ (80010b8 <main+0x110>)
 800101e:	f7ff fc35 	bl	800088c <__aeabi_ddiv>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4610      	mov	r0, r2
 8001028:	4619      	mov	r1, r3
 800102a:	f7ff fdbf 	bl	8000bac <__aeabi_d2f>
 800102e:	4603      	mov	r3, r0
 8001030:	ee00 3a10 	vmov	s0, r3
 8001034:	f006 fbd8 	bl	80077e8 <sinf>
 8001038:	eeb0 7a40 	vmov.f32	s14, s0
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <main+0x114>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001046:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <main+0x118>)
 8001048:	edd3 7a00 	vldr	s15, [r3]
 800104c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001050:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001054:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001058:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800105c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001060:	4a18      	ldr	r2, [pc, #96]	@ (80010c4 <main+0x11c>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4413      	add	r3, r2
 8001068:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < SAMPLES; i++)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3301      	adds	r3, #1
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b63      	cmp	r3, #99	@ 0x63
 8001076:	ddc3      	ble.n	8001000 <main+0x58>

    /* Infinite loop */
    while (1)
    {
        /* USER CODE BEGIN WHILE */
        if (command_ready)
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <main+0x120>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d0fa      	beq.n	8001078 <main+0xd0>
        {
            command_ready = 0;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <main+0x120>)
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
            Process_UART_Command((char*)uart_rx_buffer);
 8001088:	4810      	ldr	r0, [pc, #64]	@ (80010cc <main+0x124>)
 800108a:	f000 f8c1 	bl	8001210 <Process_UART_Command>
        if (command_ready)
 800108e:	e7f3      	b.n	8001078 <main+0xd0>
 8001090:	54442d18 	.word	0x54442d18
 8001094:	401921fb 	.word	0x401921fb
 8001098:	20000442 	.word	0x20000442
 800109c:	200003e8 	.word	0x200003e8
 80010a0:	200003a0 	.word	0x200003a0
 80010a4:	2000038c 	.word	0x2000038c
 80010a8:	20000000 	.word	0x20000000
 80010ac:	42c80000 	.word	0x42c80000
 80010b0:	44fa0000 	.word	0x44fa0000
 80010b4:	20000434 	.word	0x20000434
 80010b8:	40590000 	.word	0x40590000
 80010bc:	20000004 	.word	0x20000004
 80010c0:	20000008 	.word	0x20000008
 80010c4:	200001fc 	.word	0x200001fc
 80010c8:	20000444 	.word	0x20000444
 80010cc:	20000438 	.word	0x20000438

080010d0 <HAL_TIM_PeriodElapsedCallback>:
        /* USER CODE END WHILE */
    }
}
/* Timer interrupt handler for DAC output */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a21      	ldr	r2, [pc, #132]	@ (8001164 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d13b      	bne.n	800115a <HAL_TIM_PeriodElapsedCallback+0x8a>
    {
        phase += phase_increment;
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	4b20      	ldr	r3, [pc, #128]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010ea:	edd3 7a00 	vldr	s15, [r3]
 80010ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f2:	4b1e      	ldr	r3, [pc, #120]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010f4:	edc3 7a00 	vstr	s15, [r3]
        if(phase >= SAMPLES)
 80010f8:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010fa:	edd3 7a00 	vldr	s15, [r3]
 80010fe:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8001102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	db09      	blt.n	8001120 <HAL_TIM_PeriodElapsedCallback+0x50>
            phase -= SAMPLES;
 800110c:	4b17      	ldr	r3, [pc, #92]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800110e:	edd3 7a00 	vldr	s15, [r3]
 8001112:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001170 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8001116:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800111a:	4b14      	ldr	r3, [pc, #80]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800111c:	edc3 7a00 	vstr	s15, [r3]

        uint32_t sample_index = (uint32_t)phase;
 8001120:	4b12      	ldr	r3, [pc, #72]	@ (800116c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001122:	edd3 7a00 	vldr	s15, [r3]
 8001126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112a:	ee17 3a90 	vmov	r3, s15
 800112e:	60fb      	str	r3, [r7, #12]
        uint32_t dac_value = (uint32_t)(sine_wave[sample_index] * 4095);
 8001130:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	4413      	add	r3, r2
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001178 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001148:	ee17 3a90 	vmov	r3, s15
 800114c:	60bb      	str	r3, [r7, #8]
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	2200      	movs	r2, #0
 8001152:	2100      	movs	r1, #0
 8001154:	4809      	ldr	r0, [pc, #36]	@ (800117c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001156:	f000 ff63 	bl	8002020 <HAL_DAC_SetValue>
    }
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40001000 	.word	0x40001000
 8001168:	20000434 	.word	0x20000434
 800116c:	20000430 	.word	0x20000430
 8001170:	42c80000 	.word	0x42c80000
 8001174:	200001fc 	.word	0x200001fc
 8001178:	457ff000 	.word	0x457ff000
 800117c:	2000038c 	.word	0x2000038c

08001180 <HAL_UART_RxCpltCallback>:


/* UART receive interrupt handler */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a19      	ldr	r2, [pc, #100]	@ (80011f4 <HAL_UART_RxCpltCallback+0x74>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d12c      	bne.n	80011ec <HAL_UART_RxCpltCallback+0x6c>
    {
        if(uart_rx_data != '\r' && uart_rx_data != '\n' && uart_rx_index < UART_BUFFER_SIZE - 1)
 8001192:	4b19      	ldr	r3, [pc, #100]	@ (80011f8 <HAL_UART_RxCpltCallback+0x78>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	2b0d      	cmp	r3, #13
 8001198:	d013      	beq.n	80011c2 <HAL_UART_RxCpltCallback+0x42>
 800119a:	4b17      	ldr	r3, [pc, #92]	@ (80011f8 <HAL_UART_RxCpltCallback+0x78>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	2b0a      	cmp	r3, #10
 80011a0:	d00f      	beq.n	80011c2 <HAL_UART_RxCpltCallback+0x42>
 80011a2:	4b16      	ldr	r3, [pc, #88]	@ (80011fc <HAL_UART_RxCpltCallback+0x7c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b08      	cmp	r3, #8
 80011a8:	d80b      	bhi.n	80011c2 <HAL_UART_RxCpltCallback+0x42>
        {
            uart_rx_buffer[uart_rx_index++] = uart_rx_data;
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <HAL_UART_RxCpltCallback+0x7c>)
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	1c5a      	adds	r2, r3, #1
 80011b0:	b2d1      	uxtb	r1, r2
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <HAL_UART_RxCpltCallback+0x7c>)
 80011b4:	7011      	strb	r1, [r2, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b0f      	ldr	r3, [pc, #60]	@ (80011f8 <HAL_UART_RxCpltCallback+0x78>)
 80011ba:	7819      	ldrb	r1, [r3, #0]
 80011bc:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <HAL_UART_RxCpltCallback+0x80>)
 80011be:	5499      	strb	r1, [r3, r2]
 80011c0:	e00f      	b.n	80011e2 <HAL_UART_RxCpltCallback+0x62>
        }
        else if (uart_rx_index > 0) // If command has content
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <HAL_UART_RxCpltCallback+0x7c>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d00b      	beq.n	80011e2 <HAL_UART_RxCpltCallback+0x62>
        {
            uart_rx_buffer[uart_rx_index] = '\0'; // Null-terminate the string
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_UART_RxCpltCallback+0x7c>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_UART_RxCpltCallback+0x80>)
 80011d2:	2100      	movs	r1, #0
 80011d4:	5499      	strb	r1, [r3, r2]
            command_ready = 1; // Set flag to process command in main loop
 80011d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001204 <HAL_UART_RxCpltCallback+0x84>)
 80011d8:	2201      	movs	r2, #1
 80011da:	701a      	strb	r2, [r3, #0]
            uart_rx_index = 0;
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <HAL_UART_RxCpltCallback+0x7c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
        }
        // If uart_rx_data is '\r' or '\n' and uart_rx_index == 0, ignore it

        // Restart UART reception
        HAL_UART_Receive_IT(&huart2, (uint8_t *)&uart_rx_data, 1);
 80011e2:	2201      	movs	r2, #1
 80011e4:	4904      	ldr	r1, [pc, #16]	@ (80011f8 <HAL_UART_RxCpltCallback+0x78>)
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <HAL_UART_RxCpltCallback+0x88>)
 80011e8:	f002 fbaf 	bl	800394a <HAL_UART_Receive_IT>
    }
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40004400 	.word	0x40004400
 80011f8:	20000442 	.word	0x20000442
 80011fc:	20000443 	.word	0x20000443
 8001200:	20000438 	.word	0x20000438
 8001204:	20000444 	.word	0x20000444
 8001208:	200003e8 	.word	0x200003e8
 800120c:	00000000 	.word	0x00000000

08001210 <Process_UART_Command>:

void Process_UART_Command(char* command)
{
 8001210:	b5b0      	push	{r4, r5, r7, lr}
 8001212:	b09e      	sub	sp, #120	@ 0x78
 8001214:	af02      	add	r7, sp, #8
 8001216:	6078      	str	r0, [r7, #4]
    if(strncmp(command, "FREQ ", 5) == 0)
 8001218:	2205      	movs	r2, #5
 800121a:	4993      	ldr	r1, [pc, #588]	@ (8001468 <Process_UART_Command+0x258>)
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f004 fa19 	bl	8005654 <strncmp>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d162      	bne.n	80012ee <Process_UART_Command+0xde>
    {
        float new_freq = atof(&command[5]);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3305      	adds	r3, #5
 800122c:	4618      	mov	r0, r3
 800122e:	f003 fb07 	bl	8004840 <atof>
 8001232:	ec53 2b10 	vmov	r2, r3, d0
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fcb7 	bl	8000bac <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	667b      	str	r3, [r7, #100]	@ 0x64
        if(new_freq > 0 && new_freq <= MAX_FREQ)
 8001242:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001246:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124e:	dd37      	ble.n	80012c0 <Process_UART_Command+0xb0>
 8001250:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001254:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800146c <Process_UART_Command+0x25c>
 8001258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800125c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001260:	d82e      	bhi.n	80012c0 <Process_UART_Command+0xb0>
        {
            freq = new_freq;
 8001262:	4a83      	ldr	r2, [pc, #524]	@ (8001470 <Process_UART_Command+0x260>)
 8001264:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001266:	6013      	str	r3, [r2, #0]
            phase_increment = (freq * SAMPLES) / TIMER_FREQUENCY;
 8001268:	4b81      	ldr	r3, [pc, #516]	@ (8001470 <Process_UART_Command+0x260>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001474 <Process_UART_Command+0x264>
 8001272:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001276:	eddf 6a80 	vldr	s13, [pc, #512]	@ 8001478 <Process_UART_Command+0x268>
 800127a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800127e:	4b7f      	ldr	r3, [pc, #508]	@ (800147c <Process_UART_Command+0x26c>)
 8001280:	edc3 7a00 	vstr	s15, [r3]
            // Send back confirmation
            char msg[32];
            snprintf(msg, sizeof(msg), "Frequency set to %.2f Hz\r\n", freq);
 8001284:	4b7a      	ldr	r3, [pc, #488]	@ (8001470 <Process_UART_Command+0x260>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f97d 	bl	8000588 <__aeabi_f2d>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	f107 0008 	add.w	r0, r7, #8
 8001296:	e9cd 2300 	strd	r2, r3, [sp]
 800129a:	4a79      	ldr	r2, [pc, #484]	@ (8001480 <Process_UART_Command+0x270>)
 800129c:	2120      	movs	r1, #32
 800129e:	f003 fad3 	bl	8004848 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012a2:	f107 0308 	add.w	r3, r7, #8
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7fe ffb2 	bl	8000210 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	f107 0108 	add.w	r1, r7, #8
 80012b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012b8:	4872      	ldr	r0, [pc, #456]	@ (8001484 <Process_UART_Command+0x274>)
 80012ba:	f002 fabb 	bl	8003834 <HAL_UART_Transmit>
        {
 80012be:	e0ca      	b.n	8001456 <Process_UART_Command+0x246>
        }
        else
        {
            char msg[] = "Invalid frequency\r\n";
 80012c0:	4b71      	ldr	r3, [pc, #452]	@ (8001488 <Process_UART_Command+0x278>)
 80012c2:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80012c6:	461d      	mov	r5, r3
 80012c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012cc:	682b      	ldr	r3, [r5, #0]
 80012ce:	6023      	str	r3, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80012d0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7fe ff9b 	bl	8000210 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012e6:	4867      	ldr	r0, [pc, #412]	@ (8001484 <Process_UART_Command+0x274>)
 80012e8:	f002 faa4 	bl	8003834 <HAL_UART_Transmit>
    {
        // Unknown command
        char msg[] = "Unknown command\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
    }
}
 80012ec:	e0b3      	b.n	8001456 <Process_UART_Command+0x246>
    else if(strncmp(command, "AMP ", 4) == 0)
 80012ee:	2204      	movs	r2, #4
 80012f0:	4966      	ldr	r1, [pc, #408]	@ (800148c <Process_UART_Command+0x27c>)
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f004 f9ae 	bl	8005654 <strncmp>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f040 8094 	bne.w	8001428 <Process_UART_Command+0x218>
        float new_amp = atof(&command[4]);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3304      	adds	r3, #4
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fa9b 	bl	8004840 <atof>
 800130a:	ec53 2b10 	vmov	r2, r3, d0
 800130e:	4610      	mov	r0, r2
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff fc4b 	bl	8000bac <__aeabi_d2f>
 8001316:	4603      	mov	r3, r0
 8001318:	66bb      	str	r3, [r7, #104]	@ 0x68
        if(new_amp >= 0.0f && new_amp <= 6.5f)
 800131a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800131e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	db68      	blt.n	80013fa <Process_UART_Command+0x1ea>
 8001328:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800132c:	eeb1 7a0a 	vmov.f32	s14, #26	@ 0x40d00000  6.5
 8001330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	d85f      	bhi.n	80013fa <Process_UART_Command+0x1ea>
            amp = new_amp;
 800133a:	4a55      	ldr	r2, [pc, #340]	@ (8001490 <Process_UART_Command+0x280>)
 800133c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800133e:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < SAMPLES; i++)
 8001340:	2300      	movs	r3, #0
 8001342:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001344:	e038      	b.n	80013b8 <Process_UART_Command+0x1a8>
                sine_wave[i] = (sinf(2 * M_PI * i / SAMPLES) * amp * m + 1) / 2;
 8001346:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001348:	f7ff f90c 	bl	8000564 <__aeabi_i2d>
 800134c:	a344      	add	r3, pc, #272	@ (adr r3, 8001460 <Process_UART_Command+0x250>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f971 	bl	8000638 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <Process_UART_Command+0x284>)
 8001364:	f7ff fa92 	bl	800088c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc1c 	bl	8000bac <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	ee00 3a10 	vmov	s0, r3
 800137a:	f006 fa35 	bl	80077e8 <sinf>
 800137e:	eeb0 7a40 	vmov.f32	s14, s0
 8001382:	4b43      	ldr	r3, [pc, #268]	@ (8001490 <Process_UART_Command+0x280>)
 8001384:	edd3 7a00 	vldr	s15, [r3]
 8001388:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138c:	4b42      	ldr	r3, [pc, #264]	@ (8001498 <Process_UART_Command+0x288>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001396:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800139a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800139e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80013a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a6:	4a3d      	ldr	r2, [pc, #244]	@ (800149c <Process_UART_Command+0x28c>)
 80013a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	edc3 7a00 	vstr	s15, [r3]
            for(int i = 0; i < SAMPLES; i++)
 80013b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013b4:	3301      	adds	r3, #1
 80013b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80013b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013ba:	2b63      	cmp	r3, #99	@ 0x63
 80013bc:	ddc3      	ble.n	8001346 <Process_UART_Command+0x136>
            snprintf(msg, sizeof(msg), "Amplitude set to %.2f\r\n", amp);
 80013be:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <Process_UART_Command+0x280>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8e0 	bl	8000588 <__aeabi_f2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	f107 0008 	add.w	r0, r7, #8
 80013d0:	e9cd 2300 	strd	r2, r3, [sp]
 80013d4:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <Process_UART_Command+0x290>)
 80013d6:	2120      	movs	r1, #32
 80013d8:	f003 fa36 	bl	8004848 <sniprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7fe ff15 	bl	8000210 <strlen>
 80013e6:	4603      	mov	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	f107 0108 	add.w	r1, r7, #8
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013f2:	4824      	ldr	r0, [pc, #144]	@ (8001484 <Process_UART_Command+0x274>)
 80013f4:	f002 fa1e 	bl	8003834 <HAL_UART_Transmit>
        {
 80013f8:	e02d      	b.n	8001456 <Process_UART_Command+0x246>
            char msg[] = "Invalid amplitude\r\n";
 80013fa:	4b2a      	ldr	r3, [pc, #168]	@ (80014a4 <Process_UART_Command+0x294>)
 80013fc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8001400:	461d      	mov	r5, r3
 8001402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001406:	682b      	ldr	r3, [r5, #0]
 8001408:	6023      	str	r3, [r4, #0]
            HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800140a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fefe 	bl	8000210 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800141c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001420:	4818      	ldr	r0, [pc, #96]	@ (8001484 <Process_UART_Command+0x274>)
 8001422:	f002 fa07 	bl	8003834 <HAL_UART_Transmit>
}
 8001426:	e016      	b.n	8001456 <Process_UART_Command+0x246>
        char msg[] = "Unknown command\r\n";
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <Process_UART_Command+0x298>)
 800142a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800142e:	461d      	mov	r5, r3
 8001430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001434:	682b      	ldr	r3, [r5, #0]
 8001436:	8023      	strh	r3, [r4, #0]
        HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001438:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe fee7 	bl	8000210 <strlen>
 8001442:	4603      	mov	r3, r0
 8001444:	b29a      	uxth	r2, r3
 8001446:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800144a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800144e:	480d      	ldr	r0, [pc, #52]	@ (8001484 <Process_UART_Command+0x274>)
 8001450:	f002 f9f0 	bl	8003834 <HAL_UART_Transmit>
}
 8001454:	e7ff      	b.n	8001456 <Process_UART_Command+0x246>
 8001456:	bf00      	nop
 8001458:	3770      	adds	r7, #112	@ 0x70
 800145a:	46bd      	mov	sp, r7
 800145c:	bdb0      	pop	{r4, r5, r7, pc}
 800145e:	bf00      	nop
 8001460:	54442d18 	.word	0x54442d18
 8001464:	401921fb 	.word	0x401921fb
 8001468:	08008278 	.word	0x08008278
 800146c:	447a0000 	.word	0x447a0000
 8001470:	20000000 	.word	0x20000000
 8001474:	42c80000 	.word	0x42c80000
 8001478:	44fa0000 	.word	0x44fa0000
 800147c:	20000434 	.word	0x20000434
 8001480:	08008280 	.word	0x08008280
 8001484:	200003e8 	.word	0x200003e8
 8001488:	080082bc 	.word	0x080082bc
 800148c:	0800829c 	.word	0x0800829c
 8001490:	20000008 	.word	0x20000008
 8001494:	40590000 	.word	0x40590000
 8001498:	20000004 	.word	0x20000004
 800149c:	200001fc 	.word	0x200001fc
 80014a0:	080082a4 	.word	0x080082a4
 80014a4:	080082d0 	.word	0x080082d0
 80014a8:	080082e4 	.word	0x080082e4

080014ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b094      	sub	sp, #80	@ 0x50
 80014b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014b2:	f107 031c 	add.w	r3, r7, #28
 80014b6:	2234      	movs	r2, #52	@ 0x34
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f004 f8dc 	bl	8005678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	605a      	str	r2, [r3, #4]
 80014ca:	609a      	str	r2, [r3, #8]
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d0:	2300      	movs	r3, #0
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	4b29      	ldr	r3, [pc, #164]	@ (800157c <SystemClock_Config+0xd0>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	4a28      	ldr	r2, [pc, #160]	@ (800157c <SystemClock_Config+0xd0>)
 80014da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e0:	4b26      	ldr	r3, [pc, #152]	@ (800157c <SystemClock_Config+0xd0>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014ec:	2300      	movs	r3, #0
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <SystemClock_Config+0xd4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a22      	ldr	r2, [pc, #136]	@ (8001580 <SystemClock_Config+0xd4>)
 80014f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	4b20      	ldr	r3, [pc, #128]	@ (8001580 <SystemClock_Config+0xd4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001508:	2302      	movs	r3, #2
 800150a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800150c:	2301      	movs	r3, #1
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001510:	2310      	movs	r3, #16
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001514:	2302      	movs	r3, #2
 8001516:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001518:	2300      	movs	r3, #0
 800151a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151c:	2308      	movs	r3, #8
 800151e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 160;
 8001520:	23a0      	movs	r3, #160	@ 0xa0
 8001522:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001524:	2302      	movs	r3, #2
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001528:	2302      	movs	r3, #2
 800152a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800152c:	2302      	movs	r3, #2
 800152e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4618      	mov	r0, r3
 8001536:	f001 fb7b 	bl	8002c30 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001540:	f000 f8e0 	bl	8001704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001544:	230f      	movs	r3, #15
 8001546:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001548:	2302      	movs	r3, #2
 800154a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800154c:	2300      	movs	r3, #0
 800154e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001550:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001554:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800155c:	f107 0308 	add.w	r3, r7, #8
 8001560:	2105      	movs	r1, #5
 8001562:	4618      	mov	r0, r3
 8001564:	f001 f81a 	bl	800259c <HAL_RCC_ClockConfig>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800156e:	f000 f8c9 	bl	8001704 <Error_Handler>
  }
}
 8001572:	bf00      	nop
 8001574:	3750      	adds	r7, #80	@ 0x50
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800
 8001580:	40007000 	.word	0x40007000

08001584 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800158a:	463b      	mov	r3, r7
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001592:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <MX_DAC_Init+0x4c>)
 8001594:	4a0f      	ldr	r2, [pc, #60]	@ (80015d4 <MX_DAC_Init+0x50>)
 8001596:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001598:	480d      	ldr	r0, [pc, #52]	@ (80015d0 <MX_DAC_Init+0x4c>)
 800159a:	f000 fc72 	bl	8001e82 <HAL_DAC_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015a4:	f000 f8ae 	bl	8001704 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015b0:	463b      	mov	r3, r7
 80015b2:	2200      	movs	r2, #0
 80015b4:	4619      	mov	r1, r3
 80015b6:	4806      	ldr	r0, [pc, #24]	@ (80015d0 <MX_DAC_Init+0x4c>)
 80015b8:	f000 fd66 	bl	8002088 <HAL_DAC_ConfigChannel>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015c2:	f000 f89f 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	2000038c 	.word	0x2000038c
 80015d4:	40007400 	.word	0x40007400

080015d8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015de:	463b      	mov	r3, r7
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <MX_TIM6_Init+0x64>)
 80015e8:	4a15      	ldr	r2, [pc, #84]	@ (8001640 <MX_TIM6_Init+0x68>)
 80015ea:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 39;
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <MX_TIM6_Init+0x64>)
 80015ee:	2227      	movs	r2, #39	@ 0x27
 80015f0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <MX_TIM6_Init+0x64>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80015f8:	4b10      	ldr	r3, [pc, #64]	@ (800163c <MX_TIM6_Init+0x64>)
 80015fa:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015fe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <MX_TIM6_Init+0x64>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001606:	480d      	ldr	r0, [pc, #52]	@ (800163c <MX_TIM6_Init+0x64>)
 8001608:	f001 fdb0 	bl	800316c <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001612:	f000 f877 	bl	8001704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	@ (800163c <MX_TIM6_Init+0x64>)
 8001624:	f002 f826 	bl	8003674 <HAL_TIMEx_MasterConfigSynchronization>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800162e:	f000 f869 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200003a0 	.word	0x200003a0
 8001640:	40001000 	.word	0x40001000

08001644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <MX_USART2_UART_Init+0x50>)
 800164c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 8001650:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	@ (8001690 <MX_USART2_UART_Init+0x4c>)
 800167c:	f002 f88a 	bl	8003794 <HAL_UART_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001686:	f000 f83d 	bl	8001704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200003e8 	.word	0x200003e8
 8001694:	40004400 	.word	0x40004400

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a16      	ldr	r2, [pc, #88]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016a8:	f043 0304 	orr.w	r3, r3, #4
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_GPIO_Init+0x68>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]

}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	40023800 	.word	0x40023800

08001704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001708:	b672      	cpsid	i
}
 800170a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800170c:	bf00      	nop
 800170e:	e7fd      	b.n	800170c <Error_Handler+0x8>

08001710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <HAL_MspInit+0x4c>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171e:	4a0f      	ldr	r2, [pc, #60]	@ (800175c <HAL_MspInit+0x4c>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001724:	6453      	str	r3, [r2, #68]	@ 0x44
 8001726:	4b0d      	ldr	r3, [pc, #52]	@ (800175c <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001732:	2300      	movs	r3, #0
 8001734:	603b      	str	r3, [r7, #0]
 8001736:	4b09      	ldr	r3, [pc, #36]	@ (800175c <HAL_MspInit+0x4c>)
 8001738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173a:	4a08      	ldr	r2, [pc, #32]	@ (800175c <HAL_MspInit+0x4c>)
 800173c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001740:	6413      	str	r3, [r2, #64]	@ 0x40
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800174a:	603b      	str	r3, [r7, #0]
 800174c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800

08001760 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a1b      	ldr	r2, [pc, #108]	@ (80017ec <HAL_DAC_MspInit+0x8c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d12f      	bne.n	80017e2 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_DAC_MspInit+0x90>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_DAC_MspInit+0x90>)
 800178c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b17      	ldr	r3, [pc, #92]	@ (80017f0 <HAL_DAC_MspInit+0x90>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <HAL_DAC_MspInit+0x90>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <HAL_DAC_MspInit+0x90>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <HAL_DAC_MspInit+0x90>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017ba:	2310      	movs	r3, #16
 80017bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017be:	2303      	movs	r3, #3
 80017c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4809      	ldr	r0, [pc, #36]	@ (80017f4 <HAL_DAC_MspInit+0x94>)
 80017ce:	f000 fd51 	bl	8002274 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	2036      	movs	r0, #54	@ 0x36
 80017d8:	f000 fb1d 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017dc:	2036      	movs	r0, #54	@ 0x36
 80017de:	f000 fb36 	bl	8001e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40007400 	.word	0x40007400
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020000 	.word	0x40020000

080017f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0e      	ldr	r2, [pc, #56]	@ (8001840 <HAL_TIM_Base_MspInit+0x48>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d115      	bne.n	8001836 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <HAL_TIM_Base_MspInit+0x4c>)
 8001810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001812:	4a0c      	ldr	r2, [pc, #48]	@ (8001844 <HAL_TIM_Base_MspInit+0x4c>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6413      	str	r3, [r2, #64]	@ 0x40
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <HAL_TIM_Base_MspInit+0x4c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2036      	movs	r0, #54	@ 0x36
 800182c:	f000 faf3 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001830:	2036      	movs	r0, #54	@ 0x36
 8001832:	f000 fb0c 	bl	8001e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40001000 	.word	0x40001000
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08a      	sub	sp, #40	@ 0x28
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	605a      	str	r2, [r3, #4]
 800185a:	609a      	str	r2, [r3, #8]
 800185c:	60da      	str	r2, [r3, #12]
 800185e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a1d      	ldr	r2, [pc, #116]	@ (80018dc <HAL_UART_MspInit+0x94>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d133      	bne.n	80018d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	613b      	str	r3, [r7, #16]
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <HAL_UART_MspInit+0x98>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a1b      	ldr	r2, [pc, #108]	@ (80018e0 <HAL_UART_MspInit+0x98>)
 8001874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_UART_MspInit+0x98>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b15      	ldr	r3, [pc, #84]	@ (80018e0 <HAL_UART_MspInit+0x98>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a14      	ldr	r2, [pc, #80]	@ (80018e0 <HAL_UART_MspInit+0x98>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_UART_MspInit+0x98>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018a2:	230c      	movs	r3, #12
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b2:	2307      	movs	r3, #7
 80018b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4619      	mov	r1, r3
 80018bc:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <HAL_UART_MspInit+0x9c>)
 80018be:	f000 fcd9 	bl	8002274 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2100      	movs	r1, #0
 80018c6:	2026      	movs	r0, #38	@ 0x26
 80018c8:	f000 faa5 	bl	8001e16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018cc:	2026      	movs	r0, #38	@ 0x26
 80018ce:	f000 fabe 	bl	8001e4e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80018d2:	bf00      	nop
 80018d4:	3728      	adds	r7, #40	@ 0x28
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40004400 	.word	0x40004400
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020000 	.word	0x40020000

080018e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <NMI_Handler+0x4>

080018f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <MemManage_Handler+0x4>

08001900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001904:	bf00      	nop
 8001906:	e7fd      	b.n	8001904 <BusFault_Handler+0x4>

08001908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800190c:	bf00      	nop
 800190e:	e7fd      	b.n	800190c <UsageFault_Handler+0x4>

08001910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr

0800192c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr

0800193a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800193e:	f000 f96f 	bl	8001c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
	...

08001948 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <USART2_IRQHandler+0x10>)
 800194e:	f002 f821 	bl	8003994 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	200003e8 	.word	0x200003e8

0800195c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001960:	4803      	ldr	r0, [pc, #12]	@ (8001970 <TIM6_DAC_IRQHandler+0x14>)
 8001962:	f000 fb07 	bl	8001f74 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001966:	4803      	ldr	r0, [pc, #12]	@ (8001974 <TIM6_DAC_IRQHandler+0x18>)
 8001968:	f001 fcc0 	bl	80032ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000038c 	.word	0x2000038c
 8001974:	200003a0 	.word	0x200003a0

08001978 <_getpid>:
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
 800197c:	2301      	movs	r3, #1
 800197e:	4618      	mov	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_kill>:
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
 8001992:	f003 fe79 	bl	8005688 <__errno>
 8001996:	4603      	mov	r3, r0
 8001998:	2216      	movs	r2, #22
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <_exit>:
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe7 	bl	8001988 <_kill>
 80019ba:	bf00      	nop
 80019bc:	e7fd      	b.n	80019ba <_exit+0x12>

080019be <_read>:
 80019be:	b580      	push	{r7, lr}
 80019c0:	b086      	sub	sp, #24
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	60f8      	str	r0, [r7, #12]
 80019c6:	60b9      	str	r1, [r7, #8]
 80019c8:	607a      	str	r2, [r7, #4]
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e00a      	b.n	80019e6 <_read+0x28>
 80019d0:	f3af 8000 	nop.w
 80019d4:	4601      	mov	r1, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	60ba      	str	r2, [r7, #8]
 80019dc:	b2ca      	uxtb	r2, r1
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	dbf0      	blt.n	80019d0 <_read+0x12>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <_write>:
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e009      	b.n	8001a1e <_write+0x26>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	1c5a      	adds	r2, r3, #1
 8001a0e:	60ba      	str	r2, [r7, #8]
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f3af 8000 	nop.w
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	dbf1      	blt.n	8001a0a <_write+0x12>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <_close>:
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <_fstat>:
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <_isatty>:
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	2301      	movs	r3, #1
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <_lseek>:
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	60f8      	str	r0, [r7, #12]
 8001a86:	60b9      	str	r1, [r7, #8]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <_sbrk>:
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	4a14      	ldr	r2, [pc, #80]	@ (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	@ (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	@ (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d207      	bcs.n	8001ad8 <_sbrk+0x40>
 8001ac8:	f003 fdde 	bl	8005688 <__errno>
 8001acc:	4603      	mov	r3, r0
 8001ace:	220c      	movs	r2, #12
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ad6:	e009      	b.n	8001aec <_sbrk+0x54>
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b07      	ldr	r3, [pc, #28]	@ (8001afc <_sbrk+0x64>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <_sbrk+0x64>)
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4618      	mov	r0, r3
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20020000 	.word	0x20020000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	20000448 	.word	0x20000448
 8001b00:	200005a0 	.word	0x200005a0

08001b04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b08:	4b06      	ldr	r3, [pc, #24]	@ (8001b24 <SystemInit+0x20>)
 8001b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b0e:	4a05      	ldr	r2, [pc, #20]	@ (8001b24 <SystemInit+0x20>)
 8001b10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <Reset_Handler>:
 8001b28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b60 <LoopFillZerobss+0xe>
 8001b2c:	f7ff ffea 	bl	8001b04 <SystemInit>
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <LoopFillZerobss+0x12>)
 8001b32:	490d      	ldr	r1, [pc, #52]	@ (8001b68 <LoopFillZerobss+0x16>)
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <LoopFillZerobss+0x1a>)
 8001b36:	2300      	movs	r3, #0
 8001b38:	e002      	b.n	8001b40 <LoopCopyDataInit>

08001b3a <CopyDataInit>:
 8001b3a:	58d4      	ldr	r4, [r2, r3]
 8001b3c:	50c4      	str	r4, [r0, r3]
 8001b3e:	3304      	adds	r3, #4

08001b40 <LoopCopyDataInit>:
 8001b40:	18c4      	adds	r4, r0, r3
 8001b42:	428c      	cmp	r4, r1
 8001b44:	d3f9      	bcc.n	8001b3a <CopyDataInit>
 8001b46:	4a0a      	ldr	r2, [pc, #40]	@ (8001b70 <LoopFillZerobss+0x1e>)
 8001b48:	4c0a      	ldr	r4, [pc, #40]	@ (8001b74 <LoopFillZerobss+0x22>)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e001      	b.n	8001b52 <LoopFillZerobss>

08001b4e <FillZerobss>:
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	3204      	adds	r2, #4

08001b52 <LoopFillZerobss>:
 8001b52:	42a2      	cmp	r2, r4
 8001b54:	d3fb      	bcc.n	8001b4e <FillZerobss>
 8001b56:	f003 fd9d 	bl	8005694 <__libc_init_array>
 8001b5a:	f7ff fa25 	bl	8000fa8 <main>
 8001b5e:	4770      	bx	lr
 8001b60:	20020000 	.word	0x20020000
 8001b64:	20000000 	.word	0x20000000
 8001b68:	200001e0 	.word	0x200001e0
 8001b6c:	08008aac 	.word	0x08008aac
 8001b70:	200001e0 	.word	0x200001e0
 8001b74:	2000059c 	.word	0x2000059c

08001b78 <ADC_IRQHandler>:
 8001b78:	e7fe      	b.n	8001b78 <ADC_IRQHandler>
	...

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_Init+0x40>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_Init+0x40>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <HAL_Init+0x40>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f92b 	bl	8001e00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	200f      	movs	r0, #15
 8001bac:	f000 f808 	bl	8001bc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff fdae 	bl	8001710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bc8:	4b12      	ldr	r3, [pc, #72]	@ (8001c14 <HAL_InitTick+0x54>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b12      	ldr	r3, [pc, #72]	@ (8001c18 <HAL_InitTick+0x58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f943 	bl	8001e6a <HAL_SYSTICK_Config>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e00e      	b.n	8001c0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2b0f      	cmp	r3, #15
 8001bf2:	d80a      	bhi.n	8001c0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bfc:	f000 f90b 	bl	8001e16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c00:	4a06      	ldr	r2, [pc, #24]	@ (8001c1c <HAL_InitTick+0x5c>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
 8001c08:	e000      	b.n	8001c0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	2000000c 	.word	0x2000000c
 8001c18:	20000014 	.word	0x20000014
 8001c1c:	20000010 	.word	0x20000010

08001c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c24:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x20>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4413      	add	r3, r2
 8001c30:	4a04      	ldr	r2, [pc, #16]	@ (8001c44 <HAL_IncTick+0x24>)
 8001c32:	6013      	str	r3, [r2, #0]
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000014 	.word	0x20000014
 8001c44:	2000044c 	.word	0x2000044c

08001c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c4c:	4b03      	ldr	r3, [pc, #12]	@ (8001c5c <HAL_GetTick+0x14>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	2000044c 	.word	0x2000044c

08001c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c76:	68ba      	ldr	r2, [r7, #8]
 8001c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c92:	4a04      	ldr	r2, [pc, #16]	@ (8001ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	60d3      	str	r3, [r2, #12]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cac:	4b04      	ldr	r3, [pc, #16]	@ (8001cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	0a1b      	lsrs	r3, r3, #8
 8001cb2:	f003 0307 	and.w	r3, r3, #7
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	db0b      	blt.n	8001cee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd6:	79fb      	ldrb	r3, [r7, #7]
 8001cd8:	f003 021f 	and.w	r2, r3, #31
 8001cdc:	4907      	ldr	r1, [pc, #28]	@ (8001cfc <__NVIC_EnableIRQ+0x38>)
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	095b      	lsrs	r3, r3, #5
 8001ce4:	2001      	movs	r0, #1
 8001ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100

08001d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	db0a      	blt.n	8001d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	490c      	ldr	r1, [pc, #48]	@ (8001d4c <__NVIC_SetPriority+0x4c>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	0112      	lsls	r2, r2, #4
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	440b      	add	r3, r1
 8001d24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d28:	e00a      	b.n	8001d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	b2da      	uxtb	r2, r3
 8001d2e:	4908      	ldr	r1, [pc, #32]	@ (8001d50 <__NVIC_SetPriority+0x50>)
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	3b04      	subs	r3, #4
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	761a      	strb	r2, [r3, #24]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000e100 	.word	0xe000e100
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b089      	sub	sp, #36	@ 0x24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f1c3 0307 	rsb	r3, r3, #7
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	bf28      	it	cs
 8001d72:	2304      	movcs	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	2b06      	cmp	r3, #6
 8001d7c:	d902      	bls.n	8001d84 <NVIC_EncodePriority+0x30>
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	3b03      	subs	r3, #3
 8001d82:	e000      	b.n	8001d86 <NVIC_EncodePriority+0x32>
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	401a      	ands	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	fa01 f303 	lsl.w	r3, r1, r3
 8001da6:	43d9      	mvns	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dac:	4313      	orrs	r3, r2
         );
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3724      	adds	r7, #36	@ 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3b01      	subs	r3, #1
 8001dc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dcc:	d301      	bcc.n	8001dd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00f      	b.n	8001df2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dfc <SysTick_Config+0x40>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dda:	210f      	movs	r1, #15
 8001ddc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001de0:	f7ff ff8e 	bl	8001d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001de4:	4b05      	ldr	r3, [pc, #20]	@ (8001dfc <SysTick_Config+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dea:	4b04      	ldr	r3, [pc, #16]	@ (8001dfc <SysTick_Config+0x40>)
 8001dec:	2207      	movs	r2, #7
 8001dee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000e010 	.word	0xe000e010

08001e00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f7ff ff29 	bl	8001c60 <__NVIC_SetPriorityGrouping>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b086      	sub	sp, #24
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	60b9      	str	r1, [r7, #8]
 8001e20:	607a      	str	r2, [r7, #4]
 8001e22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e28:	f7ff ff3e 	bl	8001ca8 <__NVIC_GetPriorityGrouping>
 8001e2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	68b9      	ldr	r1, [r7, #8]
 8001e32:	6978      	ldr	r0, [r7, #20]
 8001e34:	f7ff ff8e 	bl	8001d54 <NVIC_EncodePriority>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e3e:	4611      	mov	r1, r2
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff5d 	bl	8001d00 <__NVIC_SetPriority>
}
 8001e46:	bf00      	nop
 8001e48:	3718      	adds	r7, #24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff31 	bl	8001cc4 <__NVIC_EnableIRQ>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f7ff ffa2 	bl	8001dbc <SysTick_Config>
 8001e78:	4603      	mov	r3, r0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e014      	b.n	8001ebe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fc5b 	bl	8001760 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2202      	movs	r2, #2
 8001eae:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e046      	b.n	8001f68 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	795b      	ldrb	r3, [r3, #5]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d101      	bne.n	8001ee6 <HAL_DAC_Start+0x20>
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	e040      	b.n	8001f68 <HAL_DAC_Start+0xa2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6819      	ldr	r1, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2201      	movs	r2, #1
 8001f00:	409a      	lsls	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	430a      	orrs	r2, r1
 8001f08:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10f      	bne.n	8001f30 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001f1a:	2b3c      	cmp	r3, #60	@ 0x3c
 8001f1c:	d11d      	bne.n	8001f5a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	e014      	b.n	8001f5a <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	213c      	movs	r1, #60	@ 0x3c
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d107      	bne.n	8001f5a <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0202 	orr.w	r2, r2, #2
 8001f58:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f8a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d01d      	beq.n	8001fd2 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d018      	beq.n	8001fd2 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2204      	movs	r2, #4
 8001fa4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f043 0201 	orr.w	r2, r3, #1
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001fca:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f851 	bl	8002074 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01d      	beq.n	8002018 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d018      	beq.n	8002018 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	f043 0202 	orr.w	r2, r3, #2
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002000:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002010:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f891 	bl	800213a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e015      	b.n	8002068 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d105      	bne.n	8002054 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	3308      	adds	r3, #8
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e004      	b.n	800205e <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	3314      	adds	r3, #20
 800205c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	461a      	mov	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	371c      	adds	r7, #28
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002094:	2300      	movs	r3, #0
 8002096:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <HAL_DAC_ConfigChannel+0x1c>
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e042      	b.n	800212e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	795b      	ldrb	r3, [r3, #5]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_DAC_ConfigChannel+0x2c>
 80020b0:	2302      	movs	r3, #2
 80020b2:	e03c      	b.n	800212e <HAL_DAC_ConfigChannel+0xa6>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2201      	movs	r2, #1
 80020b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2202      	movs	r2, #2
 80020be:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6819      	ldr	r1, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	22c0      	movs	r2, #192	@ 0xc0
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43da      	mvns	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	400a      	ands	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2200      	movs	r2, #0
 800212a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800212c:	7ffb      	ldrb	r3, [r7, #31]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3724      	adds	r7, #36	@ 0x24
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b084      	sub	sp, #16
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800215a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff fd74 	bl	8001c48 <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d008      	beq.n	8002180 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2280      	movs	r2, #128	@ 0x80
 8002172:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e052      	b.n	8002226 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0216 	bic.w	r2, r2, #22
 800218e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	695a      	ldr	r2, [r3, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800219e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d103      	bne.n	80021b0 <HAL_DMA_Abort+0x62>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0208 	bic.w	r2, r2, #8
 80021be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0201 	bic.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d0:	e013      	b.n	80021fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021d2:	f7ff fd39 	bl	8001c48 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b05      	cmp	r3, #5
 80021de:	d90c      	bls.n	80021fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2220      	movs	r2, #32
 80021e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2203      	movs	r2, #3
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e015      	b.n	8002226 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e4      	bne.n	80021d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800220c:	223f      	movs	r2, #63	@ 0x3f
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d004      	beq.n	800224c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2280      	movs	r2, #128	@ 0x80
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e00c      	b.n	8002266 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2205      	movs	r2, #5
 8002250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 0201 	bic.w	r2, r2, #1
 8002262:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
 800228e:	e165      	b.n	800255c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	f040 8154 	bne.w	8002556 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d005      	beq.n	80022c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d130      	bne.n	8002328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	2203      	movs	r2, #3
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	68da      	ldr	r2, [r3, #12]
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022fc:	2201      	movs	r2, #1
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	43db      	mvns	r3, r3
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4013      	ands	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	f003 0201 	and.w	r2, r3, #1
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4313      	orrs	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0303 	and.w	r3, r3, #3
 8002330:	2b03      	cmp	r3, #3
 8002332:	d017      	beq.n	8002364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	2203      	movs	r2, #3
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	43db      	mvns	r3, r3
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4013      	ands	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d123      	bne.n	80023b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	220f      	movs	r2, #15
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	08da      	lsrs	r2, r3, #3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	3208      	adds	r2, #8
 80023b2:	69b9      	ldr	r1, [r7, #24]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	2203      	movs	r2, #3
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 80ae 	beq.w	8002556 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b5d      	ldr	r3, [pc, #372]	@ (8002574 <HAL_GPIO_Init+0x300>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002402:	4a5c      	ldr	r2, [pc, #368]	@ (8002574 <HAL_GPIO_Init+0x300>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002408:	6453      	str	r3, [r2, #68]	@ 0x44
 800240a:	4b5a      	ldr	r3, [pc, #360]	@ (8002574 <HAL_GPIO_Init+0x300>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002416:	4a58      	ldr	r2, [pc, #352]	@ (8002578 <HAL_GPIO_Init+0x304>)
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	089b      	lsrs	r3, r3, #2
 800241c:	3302      	adds	r3, #2
 800241e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a4f      	ldr	r2, [pc, #316]	@ (800257c <HAL_GPIO_Init+0x308>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d025      	beq.n	800248e <HAL_GPIO_Init+0x21a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a4e      	ldr	r2, [pc, #312]	@ (8002580 <HAL_GPIO_Init+0x30c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d01f      	beq.n	800248a <HAL_GPIO_Init+0x216>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4d      	ldr	r2, [pc, #308]	@ (8002584 <HAL_GPIO_Init+0x310>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d019      	beq.n	8002486 <HAL_GPIO_Init+0x212>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4c      	ldr	r2, [pc, #304]	@ (8002588 <HAL_GPIO_Init+0x314>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d013      	beq.n	8002482 <HAL_GPIO_Init+0x20e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4b      	ldr	r2, [pc, #300]	@ (800258c <HAL_GPIO_Init+0x318>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d00d      	beq.n	800247e <HAL_GPIO_Init+0x20a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4a      	ldr	r2, [pc, #296]	@ (8002590 <HAL_GPIO_Init+0x31c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d007      	beq.n	800247a <HAL_GPIO_Init+0x206>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a49      	ldr	r2, [pc, #292]	@ (8002594 <HAL_GPIO_Init+0x320>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d101      	bne.n	8002476 <HAL_GPIO_Init+0x202>
 8002472:	2306      	movs	r3, #6
 8002474:	e00c      	b.n	8002490 <HAL_GPIO_Init+0x21c>
 8002476:	2307      	movs	r3, #7
 8002478:	e00a      	b.n	8002490 <HAL_GPIO_Init+0x21c>
 800247a:	2305      	movs	r3, #5
 800247c:	e008      	b.n	8002490 <HAL_GPIO_Init+0x21c>
 800247e:	2304      	movs	r3, #4
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x21c>
 8002482:	2303      	movs	r3, #3
 8002484:	e004      	b.n	8002490 <HAL_GPIO_Init+0x21c>
 8002486:	2302      	movs	r3, #2
 8002488:	e002      	b.n	8002490 <HAL_GPIO_Init+0x21c>
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <HAL_GPIO_Init+0x21c>
 800248e:	2300      	movs	r3, #0
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	f002 0203 	and.w	r2, r2, #3
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	4093      	lsls	r3, r2
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a0:	4935      	ldr	r1, [pc, #212]	@ (8002578 <HAL_GPIO_Init+0x304>)
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	089b      	lsrs	r3, r3, #2
 80024a6:	3302      	adds	r3, #2
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002598 <HAL_GPIO_Init+0x324>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024d2:	4a31      	ldr	r2, [pc, #196]	@ (8002598 <HAL_GPIO_Init+0x324>)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002598 <HAL_GPIO_Init+0x324>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024fc:	4a26      	ldr	r2, [pc, #152]	@ (8002598 <HAL_GPIO_Init+0x324>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002502:	4b25      	ldr	r3, [pc, #148]	@ (8002598 <HAL_GPIO_Init+0x324>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	43db      	mvns	r3, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4013      	ands	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002526:	4a1c      	ldr	r2, [pc, #112]	@ (8002598 <HAL_GPIO_Init+0x324>)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252c:	4b1a      	ldr	r3, [pc, #104]	@ (8002598 <HAL_GPIO_Init+0x324>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002550:	4a11      	ldr	r2, [pc, #68]	@ (8002598 <HAL_GPIO_Init+0x324>)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	2b0f      	cmp	r3, #15
 8002560:	f67f ae96 	bls.w	8002290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002564:	bf00      	nop
 8002566:	bf00      	nop
 8002568:	3724      	adds	r7, #36	@ 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	40013800 	.word	0x40013800
 800257c:	40020000 	.word	0x40020000
 8002580:	40020400 	.word	0x40020400
 8002584:	40020800 	.word	0x40020800
 8002588:	40020c00 	.word	0x40020c00
 800258c:	40021000 	.word	0x40021000
 8002590:	40021400 	.word	0x40021400
 8002594:	40021800 	.word	0x40021800
 8002598:	40013c00 	.word	0x40013c00

0800259c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e0cc      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b0:	4b68      	ldr	r3, [pc, #416]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 030f 	and.w	r3, r3, #15
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d90c      	bls.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025be:	4b65      	ldr	r3, [pc, #404]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b63      	ldr	r3, [pc, #396]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0b8      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d005      	beq.n	80025fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f0:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	4a58      	ldr	r2, [pc, #352]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80025fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002608:	4b53      	ldr	r3, [pc, #332]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a52      	ldr	r2, [pc, #328]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002612:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002614:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	494d      	ldr	r1, [pc, #308]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	2b00      	cmp	r3, #0
 8002630:	d044      	beq.n	80026bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d107      	bne.n	800264a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b47      	ldr	r3, [pc, #284]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d119      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e07f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002656:	2b03      	cmp	r3, #3
 8002658:	d107      	bne.n	800266a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800265a:	4b3f      	ldr	r3, [pc, #252]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d109      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e06f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	4b3b      	ldr	r3, [pc, #236]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e067      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267a:	4b37      	ldr	r3, [pc, #220]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f023 0203 	bic.w	r2, r3, #3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4934      	ldr	r1, [pc, #208]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800268c:	f7ff fadc 	bl	8001c48 <HAL_GetTick>
 8002690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002692:	e00a      	b.n	80026aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002694:	f7ff fad8 	bl	8001c48 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e04f      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026aa:	4b2b      	ldr	r3, [pc, #172]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 020c 	and.w	r2, r3, #12
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d1eb      	bne.n	8002694 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026bc:	4b25      	ldr	r3, [pc, #148]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d20c      	bcs.n	80026e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b22      	ldr	r3, [pc, #136]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	b2d2      	uxtb	r2, r2
 80026d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b20      	ldr	r3, [pc, #128]	@ (8002754 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 030f 	and.w	r3, r3, #15
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e032      	b.n	800274a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d008      	beq.n	8002702 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f0:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4916      	ldr	r1, [pc, #88]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d009      	beq.n	8002722 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270e:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	490e      	ldr	r1, [pc, #56]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002722:	f000 f855 	bl	80027d0 <HAL_RCC_GetSysClockFreq>
 8002726:	4602      	mov	r2, r0
 8002728:	4b0b      	ldr	r3, [pc, #44]	@ (8002758 <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	091b      	lsrs	r3, r3, #4
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	490a      	ldr	r1, [pc, #40]	@ (800275c <HAL_RCC_ClockConfig+0x1c0>)
 8002734:	5ccb      	ldrb	r3, [r1, r3]
 8002736:	fa22 f303 	lsr.w	r3, r2, r3
 800273a:	4a09      	ldr	r2, [pc, #36]	@ (8002760 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800273e:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCC_ClockConfig+0x1c8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff fa3c 	bl	8001bc0 <HAL_InitTick>

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40023c00 	.word	0x40023c00
 8002758:	40023800 	.word	0x40023800
 800275c:	080082f8 	.word	0x080082f8
 8002760:	2000000c 	.word	0x2000000c
 8002764:	20000010 	.word	0x20000010

08002768 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800276c:	4b03      	ldr	r3, [pc, #12]	@ (800277c <HAL_RCC_GetHCLKFreq+0x14>)
 800276e:	681b      	ldr	r3, [r3, #0]
}
 8002770:	4618      	mov	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	2000000c 	.word	0x2000000c

08002780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002784:	f7ff fff0 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 8002788:	4602      	mov	r2, r0
 800278a:	4b05      	ldr	r3, [pc, #20]	@ (80027a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4903      	ldr	r1, [pc, #12]	@ (80027a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002796:	5ccb      	ldrb	r3, [r1, r3]
 8002798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800279c:	4618      	mov	r0, r3
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	40023800 	.word	0x40023800
 80027a4:	08008308 	.word	0x08008308

080027a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80027ac:	f7ff ffdc 	bl	8002768 <HAL_RCC_GetHCLKFreq>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	0b5b      	lsrs	r3, r3, #13
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	4903      	ldr	r1, [pc, #12]	@ (80027cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80027be:	5ccb      	ldrb	r3, [r1, r3]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40023800 	.word	0x40023800
 80027cc:	08008308 	.word	0x08008308

080027d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027d4:	b0ae      	sub	sp, #184	@ 0xb8
 80027d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027d8:	2300      	movs	r3, #0
 80027da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027f6:	4bcb      	ldr	r3, [pc, #812]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b0c      	cmp	r3, #12
 8002800:	f200 8206 	bhi.w	8002c10 <HAL_RCC_GetSysClockFreq+0x440>
 8002804:	a201      	add	r2, pc, #4	@ (adr r2, 800280c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	08002841 	.word	0x08002841
 8002810:	08002c11 	.word	0x08002c11
 8002814:	08002c11 	.word	0x08002c11
 8002818:	08002c11 	.word	0x08002c11
 800281c:	08002849 	.word	0x08002849
 8002820:	08002c11 	.word	0x08002c11
 8002824:	08002c11 	.word	0x08002c11
 8002828:	08002c11 	.word	0x08002c11
 800282c:	08002851 	.word	0x08002851
 8002830:	08002c11 	.word	0x08002c11
 8002834:	08002c11 	.word	0x08002c11
 8002838:	08002c11 	.word	0x08002c11
 800283c:	08002a41 	.word	0x08002a41
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002840:	4bb9      	ldr	r3, [pc, #740]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x358>)
 8002842:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002846:	e1e7      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002848:	4bb8      	ldr	r3, [pc, #736]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x35c>)
 800284a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800284e:	e1e3      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002850:	4bb4      	ldr	r3, [pc, #720]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285c:	4bb1      	ldr	r3, [pc, #708]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d071      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002868:	4bae      	ldr	r3, [pc, #696]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	099b      	lsrs	r3, r3, #6
 800286e:	2200      	movs	r2, #0
 8002870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002874:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002878:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800287c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002880:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002884:	2300      	movs	r3, #0
 8002886:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800288a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	f04f 0000 	mov.w	r0, #0
 8002896:	f04f 0100 	mov.w	r1, #0
 800289a:	0159      	lsls	r1, r3, #5
 800289c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028a0:	0150      	lsls	r0, r2, #5
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4621      	mov	r1, r4
 80028a8:	1a51      	subs	r1, r2, r1
 80028aa:	6439      	str	r1, [r7, #64]	@ 0x40
 80028ac:	4629      	mov	r1, r5
 80028ae:	eb63 0301 	sbc.w	r3, r3, r1
 80028b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80028c0:	4649      	mov	r1, r9
 80028c2:	018b      	lsls	r3, r1, #6
 80028c4:	4641      	mov	r1, r8
 80028c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ca:	4641      	mov	r1, r8
 80028cc:	018a      	lsls	r2, r1, #6
 80028ce:	4641      	mov	r1, r8
 80028d0:	1a51      	subs	r1, r2, r1
 80028d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028d4:	4649      	mov	r1, r9
 80028d6:	eb63 0301 	sbc.w	r3, r3, r1
 80028da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80028e8:	4649      	mov	r1, r9
 80028ea:	00cb      	lsls	r3, r1, #3
 80028ec:	4641      	mov	r1, r8
 80028ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028f2:	4641      	mov	r1, r8
 80028f4:	00ca      	lsls	r2, r1, #3
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	4603      	mov	r3, r0
 80028fc:	4622      	mov	r2, r4
 80028fe:	189b      	adds	r3, r3, r2
 8002900:	633b      	str	r3, [r7, #48]	@ 0x30
 8002902:	462b      	mov	r3, r5
 8002904:	460a      	mov	r2, r1
 8002906:	eb42 0303 	adc.w	r3, r2, r3
 800290a:	637b      	str	r3, [r7, #52]	@ 0x34
 800290c:	f04f 0200 	mov.w	r2, #0
 8002910:	f04f 0300 	mov.w	r3, #0
 8002914:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002918:	4629      	mov	r1, r5
 800291a:	020b      	lsls	r3, r1, #8
 800291c:	4621      	mov	r1, r4
 800291e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002922:	4621      	mov	r1, r4
 8002924:	020a      	lsls	r2, r1, #8
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800292e:	2200      	movs	r2, #0
 8002930:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002934:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002938:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800293c:	f7fe f986 	bl	8000c4c <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4613      	mov	r3, r2
 8002946:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800294a:	e067      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294c:	4b75      	ldr	r3, [pc, #468]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	2200      	movs	r2, #0
 8002954:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002958:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800295c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002964:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002966:	2300      	movs	r3, #0
 8002968:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800296a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800296e:	4622      	mov	r2, r4
 8002970:	462b      	mov	r3, r5
 8002972:	f04f 0000 	mov.w	r0, #0
 8002976:	f04f 0100 	mov.w	r1, #0
 800297a:	0159      	lsls	r1, r3, #5
 800297c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002980:	0150      	lsls	r0, r2, #5
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4621      	mov	r1, r4
 8002988:	1a51      	subs	r1, r2, r1
 800298a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800298c:	4629      	mov	r1, r5
 800298e:	eb63 0301 	sbc.w	r3, r3, r1
 8002992:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80029a0:	4649      	mov	r1, r9
 80029a2:	018b      	lsls	r3, r1, #6
 80029a4:	4641      	mov	r1, r8
 80029a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029aa:	4641      	mov	r1, r8
 80029ac:	018a      	lsls	r2, r1, #6
 80029ae:	4641      	mov	r1, r8
 80029b0:	ebb2 0a01 	subs.w	sl, r2, r1
 80029b4:	4649      	mov	r1, r9
 80029b6:	eb63 0b01 	sbc.w	fp, r3, r1
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	f04f 0300 	mov.w	r3, #0
 80029c2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029c6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ce:	4692      	mov	sl, r2
 80029d0:	469b      	mov	fp, r3
 80029d2:	4623      	mov	r3, r4
 80029d4:	eb1a 0303 	adds.w	r3, sl, r3
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	462b      	mov	r3, r5
 80029dc:	eb4b 0303 	adc.w	r3, fp, r3
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	f04f 0300 	mov.w	r3, #0
 80029ea:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80029ee:	4629      	mov	r1, r5
 80029f0:	028b      	lsls	r3, r1, #10
 80029f2:	4621      	mov	r1, r4
 80029f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f8:	4621      	mov	r1, r4
 80029fa:	028a      	lsls	r2, r1, #10
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a04:	2200      	movs	r2, #0
 8002a06:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a08:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a0a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002a0e:	f7fe f91d 	bl	8000c4c <__aeabi_uldivmod>
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4613      	mov	r3, r2
 8002a18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a1c:	4b41      	ldr	r3, [pc, #260]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	0c1b      	lsrs	r3, r3, #16
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002a32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a3e:	e0eb      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a40:	4b38      	ldr	r3, [pc, #224]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a4c:	4b35      	ldr	r3, [pc, #212]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d06b      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a58:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	099b      	lsrs	r3, r3, #6
 8002a5e:	2200      	movs	r2, #0
 8002a60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a70:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a74:	4622      	mov	r2, r4
 8002a76:	462b      	mov	r3, r5
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	0159      	lsls	r1, r3, #5
 8002a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a86:	0150      	lsls	r0, r2, #5
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4621      	mov	r1, r4
 8002a8e:	1a51      	subs	r1, r2, r1
 8002a90:	61b9      	str	r1, [r7, #24]
 8002a92:	4629      	mov	r1, r5
 8002a94:	eb63 0301 	sbc.w	r3, r3, r1
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002aa6:	4659      	mov	r1, fp
 8002aa8:	018b      	lsls	r3, r1, #6
 8002aaa:	4651      	mov	r1, sl
 8002aac:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ab0:	4651      	mov	r1, sl
 8002ab2:	018a      	lsls	r2, r1, #6
 8002ab4:	4651      	mov	r1, sl
 8002ab6:	ebb2 0801 	subs.w	r8, r2, r1
 8002aba:	4659      	mov	r1, fp
 8002abc:	eb63 0901 	sbc.w	r9, r3, r1
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002acc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ad0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ad4:	4690      	mov	r8, r2
 8002ad6:	4699      	mov	r9, r3
 8002ad8:	4623      	mov	r3, r4
 8002ada:	eb18 0303 	adds.w	r3, r8, r3
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	462b      	mov	r3, r5
 8002ae2:	eb49 0303 	adc.w	r3, r9, r3
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	f04f 0200 	mov.w	r2, #0
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002af4:	4629      	mov	r1, r5
 8002af6:	020b      	lsls	r3, r1, #8
 8002af8:	4621      	mov	r1, r4
 8002afa:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8002afe:	4621      	mov	r1, r4
 8002b00:	020a      	lsls	r2, r1, #8
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b0e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002b10:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b14:	f7fe f89a 	bl	8000c4c <__aeabi_uldivmod>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b22:	e065      	b.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x420>
 8002b24:	40023800 	.word	0x40023800
 8002b28:	00f42400 	.word	0x00f42400
 8002b2c:	003d0900 	.word	0x003d0900
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b30:	4b3d      	ldr	r3, [pc, #244]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x458>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	099b      	lsrs	r3, r3, #6
 8002b36:	2200      	movs	r2, #0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b40:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b42:	2300      	movs	r3, #0
 8002b44:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b46:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002b4a:	4642      	mov	r2, r8
 8002b4c:	464b      	mov	r3, r9
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	0159      	lsls	r1, r3, #5
 8002b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5c:	0150      	lsls	r0, r2, #5
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4641      	mov	r1, r8
 8002b64:	1a51      	subs	r1, r2, r1
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	4649      	mov	r1, r9
 8002b6a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002b7c:	4659      	mov	r1, fp
 8002b7e:	018b      	lsls	r3, r1, #6
 8002b80:	4651      	mov	r1, sl
 8002b82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b86:	4651      	mov	r1, sl
 8002b88:	018a      	lsls	r2, r1, #6
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	1a54      	subs	r4, r2, r1
 8002b8e:	4659      	mov	r1, fp
 8002b90:	eb63 0501 	sbc.w	r5, r3, r1
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	00eb      	lsls	r3, r5, #3
 8002b9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ba2:	00e2      	lsls	r2, r4, #3
 8002ba4:	4614      	mov	r4, r2
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	4643      	mov	r3, r8
 8002baa:	18e3      	adds	r3, r4, r3
 8002bac:	603b      	str	r3, [r7, #0]
 8002bae:	464b      	mov	r3, r9
 8002bb0:	eb45 0303 	adc.w	r3, r5, r3
 8002bb4:	607b      	str	r3, [r7, #4]
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	f04f 0300 	mov.w	r3, #0
 8002bbe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bc2:	4629      	mov	r1, r5
 8002bc4:	028b      	lsls	r3, r1, #10
 8002bc6:	4621      	mov	r1, r4
 8002bc8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bcc:	4621      	mov	r1, r4
 8002bce:	028a      	lsls	r2, r1, #10
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bd8:	2200      	movs	r2, #0
 8002bda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002bdc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002bde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002be2:	f7fe f833 	bl	8000c4c <__aeabi_uldivmod>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4613      	mov	r3, r2
 8002bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8002c28 <HAL_RCC_GetSysClockFreq+0x458>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	0f1b      	lsrs	r3, r3, #28
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c10:	4b06      	ldr	r3, [pc, #24]	@ (8002c2c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002c12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c16:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	37b8      	adds	r7, #184	@ 0xb8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c26:	bf00      	nop
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	00f42400 	.word	0x00f42400

08002c30 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e28d      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8083 	beq.w	8002d56 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c50:	4b94      	ldr	r3, [pc, #592]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 030c 	and.w	r3, r3, #12
 8002c58:	2b04      	cmp	r3, #4
 8002c5a:	d019      	beq.n	8002c90 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c5c:	4b91      	ldr	r3, [pc, #580]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c68:	4b8e      	ldr	r3, [pc, #568]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c74:	d00c      	beq.n	8002c90 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c76:	4b8b      	ldr	r3, [pc, #556]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d112      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c82:	4b88      	ldr	r3, [pc, #544]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c8e:	d10b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	4b84      	ldr	r3, [pc, #528]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d05b      	beq.n	8002d54 <HAL_RCC_OscConfig+0x124>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d157      	bne.n	8002d54 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e25a      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb0:	d106      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x90>
 8002cb2:	4b7c      	ldr	r3, [pc, #496]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a7b      	ldr	r2, [pc, #492]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	e01d      	b.n	8002cfc <HAL_RCC_OscConfig+0xcc>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCC_OscConfig+0xb4>
 8002cca:	4b76      	ldr	r3, [pc, #472]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a75      	ldr	r2, [pc, #468]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4b73      	ldr	r3, [pc, #460]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a72      	ldr	r2, [pc, #456]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce0:	6013      	str	r3, [r2, #0]
 8002ce2:	e00b      	b.n	8002cfc <HAL_RCC_OscConfig+0xcc>
 8002ce4:	4b6f      	ldr	r3, [pc, #444]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a6e      	ldr	r2, [pc, #440]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cee:	6013      	str	r3, [r2, #0]
 8002cf0:	4b6c      	ldr	r3, [pc, #432]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a6b      	ldr	r2, [pc, #428]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d013      	beq.n	8002d2c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe ffa0 	bl	8001c48 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe ff9c 	bl	8001c48 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e21f      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1e:	4b61      	ldr	r3, [pc, #388]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0xdc>
 8002d2a:	e014      	b.n	8002d56 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7fe ff8c 	bl	8001c48 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d34:	f7fe ff88 	bl	8001c48 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b64      	cmp	r3, #100	@ 0x64
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e20b      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d46:	4b57      	ldr	r3, [pc, #348]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x104>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d06f      	beq.n	8002e42 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d62:	4b50      	ldr	r3, [pc, #320]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d017      	beq.n	8002d9e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d6e:	4b4d      	ldr	r3, [pc, #308]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
        || \
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d105      	bne.n	8002d86 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d86:	4b47      	ldr	r3, [pc, #284]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d11c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d92:	4b44      	ldr	r3, [pc, #272]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d116      	bne.n	8002dcc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_RCC_OscConfig+0x186>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e1d3      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4937      	ldr	r1, [pc, #220]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dca:	e03a      	b.n	8002e42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd4:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <HAL_RCC_OscConfig+0x278>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dda:	f7fe ff35 	bl	8001c48 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fe ff31 	bl	8001c48 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e1b4      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	4b2b      	ldr	r3, [pc, #172]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b28      	ldr	r3, [pc, #160]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4925      	ldr	r1, [pc, #148]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	e015      	b.n	8002e42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	4b24      	ldr	r3, [pc, #144]	@ (8002ea8 <HAL_RCC_OscConfig+0x278>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe ff14 	bl	8001c48 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7fe ff10 	bl	8001c48 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e193      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d036      	beq.n	8002ebc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d016      	beq.n	8002e84 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <HAL_RCC_OscConfig+0x27c>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe fef4 	bl	8001c48 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe fef0 	bl	8001c48 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e173      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea4 <HAL_RCC_OscConfig+0x274>)
 8002e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x234>
 8002e82:	e01b      	b.n	8002ebc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e84:	4b09      	ldr	r3, [pc, #36]	@ (8002eac <HAL_RCC_OscConfig+0x27c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8a:	f7fe fedd 	bl	8001c48 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e90:	e00e      	b.n	8002eb0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e92:	f7fe fed9 	bl	8001c48 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d907      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e15c      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	42470000 	.word	0x42470000
 8002eac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb0:	4b8a      	ldr	r3, [pc, #552]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d1ea      	bne.n	8002e92 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 8097 	beq.w	8002ff8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ece:	4b83      	ldr	r3, [pc, #524]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10f      	bne.n	8002efa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	4b7f      	ldr	r3, [pc, #508]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	4a7e      	ldr	r2, [pc, #504]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002eea:	4b7c      	ldr	r3, [pc, #496]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efa:	4b79      	ldr	r3, [pc, #484]	@ (80030e0 <HAL_RCC_OscConfig+0x4b0>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d118      	bne.n	8002f38 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f06:	4b76      	ldr	r3, [pc, #472]	@ (80030e0 <HAL_RCC_OscConfig+0x4b0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a75      	ldr	r2, [pc, #468]	@ (80030e0 <HAL_RCC_OscConfig+0x4b0>)
 8002f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f12:	f7fe fe99 	bl	8001c48 <HAL_GetTick>
 8002f16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1a:	f7fe fe95 	bl	8001c48 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e118      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2c:	4b6c      	ldr	r3, [pc, #432]	@ (80030e0 <HAL_RCC_OscConfig+0x4b0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d0f0      	beq.n	8002f1a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d106      	bne.n	8002f4e <HAL_RCC_OscConfig+0x31e>
 8002f40:	4b66      	ldr	r3, [pc, #408]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f44:	4a65      	ldr	r2, [pc, #404]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f4c:	e01c      	b.n	8002f88 <HAL_RCC_OscConfig+0x358>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d10c      	bne.n	8002f70 <HAL_RCC_OscConfig+0x340>
 8002f56:	4b61      	ldr	r3, [pc, #388]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5a:	4a60      	ldr	r2, [pc, #384]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f62:	4b5e      	ldr	r3, [pc, #376]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f66:	4a5d      	ldr	r2, [pc, #372]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f6e:	e00b      	b.n	8002f88 <HAL_RCC_OscConfig+0x358>
 8002f70:	4b5a      	ldr	r3, [pc, #360]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f74:	4a59      	ldr	r2, [pc, #356]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	f023 0301 	bic.w	r3, r3, #1
 8002f7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f7c:	4b57      	ldr	r3, [pc, #348]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f80:	4a56      	ldr	r2, [pc, #344]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002f82:	f023 0304 	bic.w	r3, r3, #4
 8002f86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f90:	f7fe fe5a 	bl	8001c48 <HAL_GetTick>
 8002f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fe56 	bl	8001c48 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e0d7      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fae:	4b4b      	ldr	r3, [pc, #300]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0ee      	beq.n	8002f98 <HAL_RCC_OscConfig+0x368>
 8002fba:	e014      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbc:	f7fe fe44 	bl	8001c48 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fe40 	bl	8001c48 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e0c1      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fda:	4b40      	ldr	r3, [pc, #256]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1ee      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fec:	4b3b      	ldr	r3, [pc, #236]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8002ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f000 80ad 	beq.w	800315c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003002:	4b36      	ldr	r3, [pc, #216]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f003 030c 	and.w	r3, r3, #12
 800300a:	2b08      	cmp	r3, #8
 800300c:	d060      	beq.n	80030d0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b02      	cmp	r3, #2
 8003014:	d145      	bne.n	80030a2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003016:	4b33      	ldr	r3, [pc, #204]	@ (80030e4 <HAL_RCC_OscConfig+0x4b4>)
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301c:	f7fe fe14 	bl	8001c48 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003024:	f7fe fe10 	bl	8001c48 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e093      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003036:	4b29      	ldr	r3, [pc, #164]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69da      	ldr	r2, [r3, #28]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003050:	019b      	lsls	r3, r3, #6
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003058:	085b      	lsrs	r3, r3, #1
 800305a:	3b01      	subs	r3, #1
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306c:	071b      	lsls	r3, r3, #28
 800306e:	491b      	ldr	r1, [pc, #108]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8003070:	4313      	orrs	r3, r2
 8003072:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003074:	4b1b      	ldr	r3, [pc, #108]	@ (80030e4 <HAL_RCC_OscConfig+0x4b4>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7fe fde5 	bl	8001c48 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7fe fde1 	bl	8001c48 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e064      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003094:	4b11      	ldr	r3, [pc, #68]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x452>
 80030a0:	e05c      	b.n	800315c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b10      	ldr	r3, [pc, #64]	@ (80030e4 <HAL_RCC_OscConfig+0x4b4>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fdce 	bl	8001c48 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe fdca 	bl	8001c48 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e04d      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b06      	ldr	r3, [pc, #24]	@ (80030dc <HAL_RCC_OscConfig+0x4ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x480>
 80030ce:	e045      	b.n	800315c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e040      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003168 <HAL_RCC_OscConfig+0x538>)
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d030      	beq.n	8003158 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003100:	429a      	cmp	r2, r3
 8003102:	d129      	bne.n	8003158 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d122      	bne.n	8003158 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003118:	4013      	ands	r3, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800311e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003120:	4293      	cmp	r3, r2
 8003122:	d119      	bne.n	8003158 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312e:	085b      	lsrs	r3, r3, #1
 8003130:	3b01      	subs	r3, #1
 8003132:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d10f      	bne.n	8003158 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003144:	429a      	cmp	r2, r3
 8003146:	d107      	bne.n	8003158 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003152:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d001      	beq.n	800315c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d101      	bne.n	800317e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e041      	b.n	8003202 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d106      	bne.n	8003198 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe fb30 	bl	80017f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f000 f9b6 	bl	800351c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d001      	beq.n	8003224 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e04e      	b.n	80032c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a23      	ldr	r2, [pc, #140]	@ (80032d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d022      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800324e:	d01d      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1f      	ldr	r2, [pc, #124]	@ (80032d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d018      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1e      	ldr	r2, [pc, #120]	@ (80032d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d013      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1c      	ldr	r2, [pc, #112]	@ (80032dc <HAL_TIM_Base_Start_IT+0xd0>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d00e      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a1b      	ldr	r2, [pc, #108]	@ (80032e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d009      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a19      	ldr	r2, [pc, #100]	@ (80032e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_TIM_Base_Start_IT+0x80>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a18      	ldr	r2, [pc, #96]	@ (80032e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d111      	bne.n	80032b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b06      	cmp	r3, #6
 800329c:	d010      	beq.n	80032c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032ae:	e007      	b.n	80032c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40010000 	.word	0x40010000
 80032d4:	40000400 	.word	0x40000400
 80032d8:	40000800 	.word	0x40000800
 80032dc:	40000c00 	.word	0x40000c00
 80032e0:	40010400 	.word	0x40010400
 80032e4:	40014000 	.word	0x40014000
 80032e8:	40001800 	.word	0x40001800

080032ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d020      	beq.n	8003350 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d01b      	beq.n	8003350 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0202 	mvn.w	r2, #2
 8003320:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 f8d2 	bl	80034e0 <HAL_TIM_IC_CaptureCallback>
 800333c:	e005      	b.n	800334a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f8c4 	bl	80034cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f8d5 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d020      	beq.n	800339c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d01b      	beq.n	800339c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f06f 0204 	mvn.w	r2, #4
 800336c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f8ac 	bl	80034e0 <HAL_TIM_IC_CaptureCallback>
 8003388:	e005      	b.n	8003396 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f89e 	bl	80034cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f8af 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d020      	beq.n	80033e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f003 0308 	and.w	r3, r3, #8
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01b      	beq.n	80033e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0208 	mvn.w	r2, #8
 80033b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2204      	movs	r2, #4
 80033be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f886 	bl	80034e0 <HAL_TIM_IC_CaptureCallback>
 80033d4:	e005      	b.n	80033e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f878 	bl	80034cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f889 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0310 	and.w	r3, r3, #16
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0310 	and.w	r3, r3, #16
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0210 	mvn.w	r2, #16
 8003404:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2208      	movs	r2, #8
 800340a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f860 	bl	80034e0 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f852 	bl	80034cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f863 	bl	80034f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00c      	beq.n	8003458 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	d007      	beq.n	8003458 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0201 	mvn.w	r2, #1
 8003450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7fd fe3c 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00c      	beq.n	800347c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f982 	bl	8003780 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00c      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f834 	bl	8003508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0320 	and.w	r3, r3, #32
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00c      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0220 	mvn.w	r2, #32
 80034bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 f954 	bl	800376c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034c4:	bf00      	nop
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a46      	ldr	r2, [pc, #280]	@ (8003648 <TIM_Base_SetConfig+0x12c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d013      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353a:	d00f      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a43      	ldr	r2, [pc, #268]	@ (800364c <TIM_Base_SetConfig+0x130>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00b      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a42      	ldr	r2, [pc, #264]	@ (8003650 <TIM_Base_SetConfig+0x134>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d007      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a41      	ldr	r2, [pc, #260]	@ (8003654 <TIM_Base_SetConfig+0x138>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d003      	beq.n	800355c <TIM_Base_SetConfig+0x40>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a40      	ldr	r2, [pc, #256]	@ (8003658 <TIM_Base_SetConfig+0x13c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d108      	bne.n	800356e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a35      	ldr	r2, [pc, #212]	@ (8003648 <TIM_Base_SetConfig+0x12c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d02b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800357c:	d027      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a32      	ldr	r2, [pc, #200]	@ (800364c <TIM_Base_SetConfig+0x130>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d023      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a31      	ldr	r2, [pc, #196]	@ (8003650 <TIM_Base_SetConfig+0x134>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d01f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a30      	ldr	r2, [pc, #192]	@ (8003654 <TIM_Base_SetConfig+0x138>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d01b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2f      	ldr	r2, [pc, #188]	@ (8003658 <TIM_Base_SetConfig+0x13c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d017      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2e      	ldr	r2, [pc, #184]	@ (800365c <TIM_Base_SetConfig+0x140>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003660 <TIM_Base_SetConfig+0x144>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d00f      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003664 <TIM_Base_SetConfig+0x148>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00b      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003668 <TIM_Base_SetConfig+0x14c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a2a      	ldr	r2, [pc, #168]	@ (800366c <TIM_Base_SetConfig+0x150>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d003      	beq.n	80035ce <TIM_Base_SetConfig+0xb2>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a29      	ldr	r2, [pc, #164]	@ (8003670 <TIM_Base_SetConfig+0x154>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d108      	bne.n	80035e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	4313      	orrs	r3, r2
 80035de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a10      	ldr	r2, [pc, #64]	@ (8003648 <TIM_Base_SetConfig+0x12c>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_Base_SetConfig+0xf8>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <TIM_Base_SetConfig+0x13c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d105      	bne.n	800363a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]
  }
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop
 8003648:	40010000 	.word	0x40010000
 800364c:	40000400 	.word	0x40000400
 8003650:	40000800 	.word	0x40000800
 8003654:	40000c00 	.word	0x40000c00
 8003658:	40010400 	.word	0x40010400
 800365c:	40014000 	.word	0x40014000
 8003660:	40014400 	.word	0x40014400
 8003664:	40014800 	.word	0x40014800
 8003668:	40001800 	.word	0x40001800
 800366c:	40001c00 	.word	0x40001c00
 8003670:	40002000 	.word	0x40002000

08003674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e05a      	b.n	8003742 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a21      	ldr	r2, [pc, #132]	@ (8003750 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d022      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d8:	d01d      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d018      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d013      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1a      	ldr	r2, [pc, #104]	@ (800375c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00e      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a18      	ldr	r2, [pc, #96]	@ (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a17      	ldr	r2, [pc, #92]	@ (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d004      	beq.n	8003716 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a15      	ldr	r2, [pc, #84]	@ (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d10c      	bne.n	8003730 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800371c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4313      	orrs	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	40010000 	.word	0x40010000
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40010400 	.word	0x40010400
 8003764:	40014000 	.word	0x40014000
 8003768:	40001800 	.word	0x40001800

0800376c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e042      	b.n	800382c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7fe f844 	bl	8001848 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2224      	movs	r2, #36	@ 0x24
 80037c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fdbd 	bl	8004358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695a      	ldr	r2, [r3, #20]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800380c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2220      	movs	r2, #32
 8003818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2220      	movs	r2, #32
 8003820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b08a      	sub	sp, #40	@ 0x28
 8003838:	af02      	add	r7, sp, #8
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	603b      	str	r3, [r7, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b20      	cmp	r3, #32
 8003852:	d175      	bne.n	8003940 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_UART_Transmit+0x2c>
 800385a:	88fb      	ldrh	r3, [r7, #6]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e06e      	b.n	8003942 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2221      	movs	r2, #33	@ 0x21
 800386e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003872:	f7fe f9e9 	bl	8001c48 <HAL_GetTick>
 8003876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800388c:	d108      	bne.n	80038a0 <HAL_UART_Transmit+0x6c>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d104      	bne.n	80038a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003896:	2300      	movs	r3, #0
 8003898:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	e003      	b.n	80038a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038a4:	2300      	movs	r3, #0
 80038a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038a8:	e02e      	b.n	8003908 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	2200      	movs	r2, #0
 80038b2:	2180      	movs	r1, #128	@ 0x80
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fb1f 	bl	8003ef8 <UART_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e03a      	b.n	8003942 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	3302      	adds	r3, #2
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	e007      	b.n	80038fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	781a      	ldrb	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	3301      	adds	r3, #1
 80038f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1cb      	bne.n	80038aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	2140      	movs	r1, #64	@ 0x40
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 faeb 	bl	8003ef8 <UART_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d005      	beq.n	8003934 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2220      	movs	r2, #32
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e006      	b.n	8003942 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800393c:	2300      	movs	r3, #0
 800393e:	e000      	b.n	8003942 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003940:	2302      	movs	r3, #2
  }
}
 8003942:	4618      	mov	r0, r3
 8003944:	3720      	adds	r7, #32
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	60f8      	str	r0, [r7, #12]
 8003952:	60b9      	str	r1, [r7, #8]
 8003954:	4613      	mov	r3, r2
 8003956:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b20      	cmp	r3, #32
 8003962:	d112      	bne.n	800398a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <HAL_UART_Receive_IT+0x26>
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d101      	bne.n	8003974 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e00b      	b.n	800398c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	461a      	mov	r2, r3
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fb12 	bl	8003faa <UART_Start_Receive_IT>
 8003986:	4603      	mov	r3, r0
 8003988:	e000      	b.n	800398c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b0ba      	sub	sp, #232	@ 0xe8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80039d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10f      	bne.n	80039fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039de:	f003 0320 	and.w	r3, r3, #32
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_UART_IRQHandler+0x66>
 80039e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fbf2 	bl	80041dc <UART_Receive_IT>
      return;
 80039f8:	e25b      	b.n	8003eb2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 80de 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x22c>
 8003a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f000 80d1 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00b      	beq.n	8003a42 <HAL_UART_IRQHandler+0xae>
 8003a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	f043 0201 	orr.w	r2, r3, #1
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a46:	f003 0304 	and.w	r3, r3, #4
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <HAL_UART_IRQHandler+0xd2>
 8003a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f043 0202 	orr.w	r2, r3, #2
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00b      	beq.n	8003a8a <HAL_UART_IRQHandler+0xf6>
 8003a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a76:	f003 0301 	and.w	r3, r3, #1
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d005      	beq.n	8003a8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	f043 0204 	orr.w	r2, r3, #4
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d011      	beq.n	8003aba <HAL_UART_IRQHandler+0x126>
 8003a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d105      	bne.n	8003aae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003aa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab2:	f043 0208 	orr.w	r2, r3, #8
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f000 81f2 	beq.w	8003ea8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d008      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x14e>
 8003ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fb7d 	bl	80041dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aec:	2b40      	cmp	r3, #64	@ 0x40
 8003aee:	bf0c      	ite	eq
 8003af0:	2301      	moveq	r3, #1
 8003af2:	2300      	movne	r3, #0
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <HAL_UART_IRQHandler+0x17a>
 8003b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d04f      	beq.n	8003bae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa85 	bl	800401e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1e:	2b40      	cmp	r3, #64	@ 0x40
 8003b20:	d141      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3314      	adds	r3, #20
 8003b28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003b38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	3314      	adds	r3, #20
 8003b4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1d9      	bne.n	8003b22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d013      	beq.n	8003b9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b7a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d74 <HAL_UART_IRQHandler+0x3e0>)
 8003b7c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe fb53 	bl	800222e <HAL_DMA_Abort_IT>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d016      	beq.n	8003bbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b98:	4610      	mov	r0, r2
 8003b9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b9c:	e00e      	b.n	8003bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 f994 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba4:	e00a      	b.n	8003bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f990 	bl	8003ecc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	e006      	b.n	8003bbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f98c 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003bba:	e175      	b.n	8003ea8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	bf00      	nop
    return;
 8003bbe:	e173      	b.n	8003ea8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	f040 814f 	bne.w	8003e68 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bce:	f003 0310 	and.w	r3, r3, #16
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 8148 	beq.w	8003e68 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003bd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8141 	beq.w	8003e68 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c06:	2b40      	cmp	r3, #64	@ 0x40
 8003c08:	f040 80b6 	bne.w	8003d78 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003c18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8145 	beq.w	8003eac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	f080 813e 	bcs.w	8003eac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003c36:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c42:	f000 8088 	beq.w	8003d56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	330c      	adds	r3, #12
 8003c6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1d9      	bne.n	8003c46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	3314      	adds	r3, #20
 8003c98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c9c:	e853 3f00 	ldrex	r3, [r3]
 8003ca0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003ca2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ca4:	f023 0301 	bic.w	r3, r3, #1
 8003ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003cb6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003cc2:	e841 2300 	strex	r3, r2, [r1]
 8003cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003cc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1e1      	bne.n	8003c92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3314      	adds	r3, #20
 8003cd4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003cd8:	e853 3f00 	ldrex	r3, [r3]
 8003cdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003cde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3314      	adds	r3, #20
 8003cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cf2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cf8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003d00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e3      	bne.n	8003cce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	330c      	adds	r3, #12
 8003d1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d1e:	e853 3f00 	ldrex	r3, [r3]
 8003d22:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d26:	f023 0310 	bic.w	r3, r3, #16
 8003d2a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003d38:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d3a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d3e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e3      	bne.n	8003d14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe f9fc 	bl	800214e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f8b7 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d72:	e09b      	b.n	8003eac <HAL_UART_IRQHandler+0x518>
 8003d74:	080040e5 	.word	0x080040e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 808e 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8089 	beq.w	8003eb0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	330c      	adds	r3, #12
 8003da4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da8:	e853 3f00 	ldrex	r3, [r3]
 8003dac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003db4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003dc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003dc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e3      	bne.n	8003d9e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3314      	adds	r3, #20
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de0:	e853 3f00 	ldrex	r3, [r3]
 8003de4:	623b      	str	r3, [r7, #32]
   return(result);
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	f023 0301 	bic.w	r3, r3, #1
 8003dec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3314      	adds	r3, #20
 8003df6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e3      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	330c      	adds	r3, #12
 8003e22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	e853 3f00 	ldrex	r3, [r3]
 8003e2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f023 0310 	bic.w	r3, r3, #16
 8003e32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e40:	61fa      	str	r2, [r7, #28]
 8003e42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e44:	69b9      	ldr	r1, [r7, #24]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e3      	bne.n	8003e1c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e5a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f83d 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e66:	e023      	b.n	8003eb0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d009      	beq.n	8003e88 <HAL_UART_IRQHandler+0x4f4>
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d003      	beq.n	8003e88 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f943 	bl	800410c <UART_Transmit_IT>
    return;
 8003e86:	e014      	b.n	8003eb2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00e      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x51e>
 8003e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f983 	bl	80041ac <UART_EndTransmit_IT>
    return;
 8003ea6:	e004      	b.n	8003eb2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ea8:	bf00      	nop
 8003eaa:	e002      	b.n	8003eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003eac:	bf00      	nop
 8003eae:	e000      	b.n	8003eb2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003eb0:	bf00      	nop
  }
}
 8003eb2:	37e8      	adds	r7, #232	@ 0xe8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	4613      	mov	r3, r2
 8003f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f08:	e03b      	b.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f10:	d037      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f12:	f7fd fe99 	bl	8001c48 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	6a3a      	ldr	r2, [r7, #32]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d302      	bcc.n	8003f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d101      	bne.n	8003f2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e03a      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d023      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b80      	cmp	r3, #128	@ 0x80
 8003f3e:	d020      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b40      	cmp	r3, #64	@ 0x40
 8003f44:	d01d      	beq.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d116      	bne.n	8003f82 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f54:	2300      	movs	r3, #0
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 f857 	bl	800401e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2208      	movs	r2, #8
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e00f      	b.n	8003fa2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	bf0c      	ite	eq
 8003f92:	2301      	moveq	r3, #1
 8003f94:	2300      	movne	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d0b4      	beq.n	8003f0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b085      	sub	sp, #20
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	60f8      	str	r0, [r7, #12]
 8003fb2:	60b9      	str	r1, [r7, #8]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	88fa      	ldrh	r2, [r7, #6]
 8003fc2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2222      	movs	r2, #34	@ 0x22
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	691b      	ldr	r3, [r3, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d007      	beq.n	8003ff0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695a      	ldr	r2, [r3, #20]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f042 0201 	orr.w	r2, r2, #1
 8003ffe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0220 	orr.w	r2, r2, #32
 800400e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004010:	2300      	movs	r3, #0
}
 8004012:	4618      	mov	r0, r3
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800401e:	b480      	push	{r7}
 8004020:	b095      	sub	sp, #84	@ 0x54
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	330c      	adds	r3, #12
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800403c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004046:	643a      	str	r2, [r7, #64]	@ 0x40
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800404c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	3314      	adds	r3, #20
 8004060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	61fb      	str	r3, [r7, #28]
   return(result);
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f023 0301 	bic.w	r3, r3, #1
 8004070:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3314      	adds	r3, #20
 8004078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800407a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800407c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e5      	bne.n	800405a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	2b01      	cmp	r3, #1
 8004094:	d119      	bne.n	80040ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	e853 3f00 	ldrex	r3, [r3]
 80040a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f023 0310 	bic.w	r3, r3, #16
 80040ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040b6:	61ba      	str	r2, [r7, #24]
 80040b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ba:	6979      	ldr	r1, [r7, #20]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	e841 2300 	strex	r3, r2, [r1]
 80040c2:	613b      	str	r3, [r7, #16]
   return(result);
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1e5      	bne.n	8004096 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80040d8:	bf00      	nop
 80040da:	3754      	adds	r7, #84	@ 0x54
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f7ff fee4 	bl	8003ecc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004104:	bf00      	nop
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b21      	cmp	r3, #33	@ 0x21
 800411e:	d13e      	bne.n	800419e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004128:	d114      	bne.n	8004154 <UART_Transmit_IT+0x48>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d110      	bne.n	8004154 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004146:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1b      	ldr	r3, [r3, #32]
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	621a      	str	r2, [r3, #32]
 8004152:	e008      	b.n	8004166 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a1b      	ldr	r3, [r3, #32]
 8004158:	1c59      	adds	r1, r3, #1
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6211      	str	r1, [r2, #32]
 800415e:	781a      	ldrb	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29b      	uxth	r3, r3
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	4619      	mov	r1, r3
 8004174:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004176:	2b00      	cmp	r3, #0
 8004178:	d10f      	bne.n	800419a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004188:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004198:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff fe73 	bl	8003eb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b08c      	sub	sp, #48	@ 0x30
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	2b22      	cmp	r3, #34	@ 0x22
 80041ee:	f040 80ae 	bne.w	800434e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041fa:	d117      	bne.n	800422c <UART_Receive_IT+0x50>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d113      	bne.n	800422c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004204:	2300      	movs	r3, #0
 8004206:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421a:	b29a      	uxth	r2, r3
 800421c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800421e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	1c9a      	adds	r2, r3, #2
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	629a      	str	r2, [r3, #40]	@ 0x28
 800422a:	e026      	b.n	800427a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004230:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800423e:	d007      	beq.n	8004250 <UART_Receive_IT+0x74>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <UART_Receive_IT+0x82>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d106      	bne.n	800425e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b2da      	uxtb	r2, r3
 8004258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425a:	701a      	strb	r2, [r3, #0]
 800425c:	e008      	b.n	8004270 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800426a:	b2da      	uxtb	r2, r3
 800426c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800426e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29b      	uxth	r3, r3
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	4619      	mov	r1, r3
 8004288:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800428a:	2b00      	cmp	r3, #0
 800428c:	d15d      	bne.n	800434a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0220 	bic.w	r2, r2, #32
 800429c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	68da      	ldr	r2, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d135      	bne.n	8004340 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	330c      	adds	r3, #12
 80042e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	e853 3f00 	ldrex	r3, [r3]
 80042e8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	f023 0310 	bic.w	r3, r3, #16
 80042f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	330c      	adds	r3, #12
 80042f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fa:	623a      	str	r2, [r7, #32]
 80042fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	69f9      	ldr	r1, [r7, #28]
 8004300:	6a3a      	ldr	r2, [r7, #32]
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	61bb      	str	r3, [r7, #24]
   return(result);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e5      	bne.n	80042da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b10      	cmp	r3, #16
 800431a:	d10a      	bne.n	8004332 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004336:	4619      	mov	r1, r3
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7ff fdd1 	bl	8003ee0 <HAL_UARTEx_RxEventCallback>
 800433e:	e002      	b.n	8004346 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f7fc ff1d 	bl	8001180 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	e002      	b.n	8004350 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e000      	b.n	8004350 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
  }
}
 8004350:	4618      	mov	r0, r3
 8004352:	3730      	adds	r7, #48	@ 0x30
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800435c:	b0c0      	sub	sp, #256	@ 0x100
 800435e:	af00      	add	r7, sp, #0
 8004360:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004374:	68d9      	ldr	r1, [r3, #12]
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	ea40 0301 	orr.w	r3, r0, r1
 8004380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	431a      	orrs	r2, r3
 8004390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	431a      	orrs	r2, r3
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043b0:	f021 010c 	bic.w	r1, r1, #12
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043be:	430b      	orrs	r3, r1
 80043c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d2:	6999      	ldr	r1, [r3, #24]
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	ea40 0301 	orr.w	r3, r0, r1
 80043de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004624 <UART_SetConfig+0x2cc>)
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d005      	beq.n	80043f8 <UART_SetConfig+0xa0>
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004628 <UART_SetConfig+0x2d0>)
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d104      	bne.n	8004402 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043f8:	f7fe f9d6 	bl	80027a8 <HAL_RCC_GetPCLK2Freq>
 80043fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004400:	e003      	b.n	800440a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004402:	f7fe f9bd 	bl	8002780 <HAL_RCC_GetPCLK1Freq>
 8004406:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004414:	f040 810c 	bne.w	8004630 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004418:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004422:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004426:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800442a:	4622      	mov	r2, r4
 800442c:	462b      	mov	r3, r5
 800442e:	1891      	adds	r1, r2, r2
 8004430:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004432:	415b      	adcs	r3, r3
 8004434:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004436:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800443a:	4621      	mov	r1, r4
 800443c:	eb12 0801 	adds.w	r8, r2, r1
 8004440:	4629      	mov	r1, r5
 8004442:	eb43 0901 	adc.w	r9, r3, r1
 8004446:	f04f 0200 	mov.w	r2, #0
 800444a:	f04f 0300 	mov.w	r3, #0
 800444e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004452:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004456:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800445a:	4690      	mov	r8, r2
 800445c:	4699      	mov	r9, r3
 800445e:	4623      	mov	r3, r4
 8004460:	eb18 0303 	adds.w	r3, r8, r3
 8004464:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004468:	462b      	mov	r3, r5
 800446a:	eb49 0303 	adc.w	r3, r9, r3
 800446e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800447e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004482:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004486:	460b      	mov	r3, r1
 8004488:	18db      	adds	r3, r3, r3
 800448a:	653b      	str	r3, [r7, #80]	@ 0x50
 800448c:	4613      	mov	r3, r2
 800448e:	eb42 0303 	adc.w	r3, r2, r3
 8004492:	657b      	str	r3, [r7, #84]	@ 0x54
 8004494:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004498:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800449c:	f7fc fbd6 	bl	8000c4c <__aeabi_uldivmod>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4b61      	ldr	r3, [pc, #388]	@ (800462c <UART_SetConfig+0x2d4>)
 80044a6:	fba3 2302 	umull	r2, r3, r3, r2
 80044aa:	095b      	lsrs	r3, r3, #5
 80044ac:	011c      	lsls	r4, r3, #4
 80044ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044c0:	4642      	mov	r2, r8
 80044c2:	464b      	mov	r3, r9
 80044c4:	1891      	adds	r1, r2, r2
 80044c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044c8:	415b      	adcs	r3, r3
 80044ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044d0:	4641      	mov	r1, r8
 80044d2:	eb12 0a01 	adds.w	sl, r2, r1
 80044d6:	4649      	mov	r1, r9
 80044d8:	eb43 0b01 	adc.w	fp, r3, r1
 80044dc:	f04f 0200 	mov.w	r2, #0
 80044e0:	f04f 0300 	mov.w	r3, #0
 80044e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044f0:	4692      	mov	sl, r2
 80044f2:	469b      	mov	fp, r3
 80044f4:	4643      	mov	r3, r8
 80044f6:	eb1a 0303 	adds.w	r3, sl, r3
 80044fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044fe:	464b      	mov	r3, r9
 8004500:	eb4b 0303 	adc.w	r3, fp, r3
 8004504:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004514:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004518:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800451c:	460b      	mov	r3, r1
 800451e:	18db      	adds	r3, r3, r3
 8004520:	643b      	str	r3, [r7, #64]	@ 0x40
 8004522:	4613      	mov	r3, r2
 8004524:	eb42 0303 	adc.w	r3, r2, r3
 8004528:	647b      	str	r3, [r7, #68]	@ 0x44
 800452a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800452e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004532:	f7fc fb8b 	bl	8000c4c <__aeabi_uldivmod>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4611      	mov	r1, r2
 800453c:	4b3b      	ldr	r3, [pc, #236]	@ (800462c <UART_SetConfig+0x2d4>)
 800453e:	fba3 2301 	umull	r2, r3, r3, r1
 8004542:	095b      	lsrs	r3, r3, #5
 8004544:	2264      	movs	r2, #100	@ 0x64
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	1acb      	subs	r3, r1, r3
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004552:	4b36      	ldr	r3, [pc, #216]	@ (800462c <UART_SetConfig+0x2d4>)
 8004554:	fba3 2302 	umull	r2, r3, r3, r2
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004560:	441c      	add	r4, r3
 8004562:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004566:	2200      	movs	r2, #0
 8004568:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800456c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004570:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004574:	4642      	mov	r2, r8
 8004576:	464b      	mov	r3, r9
 8004578:	1891      	adds	r1, r2, r2
 800457a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800457c:	415b      	adcs	r3, r3
 800457e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004580:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004584:	4641      	mov	r1, r8
 8004586:	1851      	adds	r1, r2, r1
 8004588:	6339      	str	r1, [r7, #48]	@ 0x30
 800458a:	4649      	mov	r1, r9
 800458c:	414b      	adcs	r3, r1
 800458e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004590:	f04f 0200 	mov.w	r2, #0
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800459c:	4659      	mov	r1, fp
 800459e:	00cb      	lsls	r3, r1, #3
 80045a0:	4651      	mov	r1, sl
 80045a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045a6:	4651      	mov	r1, sl
 80045a8:	00ca      	lsls	r2, r1, #3
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	4603      	mov	r3, r0
 80045b0:	4642      	mov	r2, r8
 80045b2:	189b      	adds	r3, r3, r2
 80045b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045b8:	464b      	mov	r3, r9
 80045ba:	460a      	mov	r2, r1
 80045bc:	eb42 0303 	adc.w	r3, r2, r3
 80045c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045d0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045d8:	460b      	mov	r3, r1
 80045da:	18db      	adds	r3, r3, r3
 80045dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045de:	4613      	mov	r3, r2
 80045e0:	eb42 0303 	adc.w	r3, r2, r3
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045ee:	f7fc fb2d 	bl	8000c4c <__aeabi_uldivmod>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4b0d      	ldr	r3, [pc, #52]	@ (800462c <UART_SetConfig+0x2d4>)
 80045f8:	fba3 1302 	umull	r1, r3, r3, r2
 80045fc:	095b      	lsrs	r3, r3, #5
 80045fe:	2164      	movs	r1, #100	@ 0x64
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	3332      	adds	r3, #50	@ 0x32
 800460a:	4a08      	ldr	r2, [pc, #32]	@ (800462c <UART_SetConfig+0x2d4>)
 800460c:	fba2 2303 	umull	r2, r3, r2, r3
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	f003 0207 	and.w	r2, r3, #7
 8004616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4422      	add	r2, r4
 800461e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004620:	e106      	b.n	8004830 <UART_SetConfig+0x4d8>
 8004622:	bf00      	nop
 8004624:	40011000 	.word	0x40011000
 8004628:	40011400 	.word	0x40011400
 800462c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004634:	2200      	movs	r2, #0
 8004636:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800463a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800463e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004642:	4642      	mov	r2, r8
 8004644:	464b      	mov	r3, r9
 8004646:	1891      	adds	r1, r2, r2
 8004648:	6239      	str	r1, [r7, #32]
 800464a:	415b      	adcs	r3, r3
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
 800464e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004652:	4641      	mov	r1, r8
 8004654:	1854      	adds	r4, r2, r1
 8004656:	4649      	mov	r1, r9
 8004658:	eb43 0501 	adc.w	r5, r3, r1
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	00eb      	lsls	r3, r5, #3
 8004666:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800466a:	00e2      	lsls	r2, r4, #3
 800466c:	4614      	mov	r4, r2
 800466e:	461d      	mov	r5, r3
 8004670:	4643      	mov	r3, r8
 8004672:	18e3      	adds	r3, r4, r3
 8004674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004678:	464b      	mov	r3, r9
 800467a:	eb45 0303 	adc.w	r3, r5, r3
 800467e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800468e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004692:	f04f 0200 	mov.w	r2, #0
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800469e:	4629      	mov	r1, r5
 80046a0:	008b      	lsls	r3, r1, #2
 80046a2:	4621      	mov	r1, r4
 80046a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046a8:	4621      	mov	r1, r4
 80046aa:	008a      	lsls	r2, r1, #2
 80046ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046b0:	f7fc facc 	bl	8000c4c <__aeabi_uldivmod>
 80046b4:	4602      	mov	r2, r0
 80046b6:	460b      	mov	r3, r1
 80046b8:	4b60      	ldr	r3, [pc, #384]	@ (800483c <UART_SetConfig+0x4e4>)
 80046ba:	fba3 2302 	umull	r2, r3, r3, r2
 80046be:	095b      	lsrs	r3, r3, #5
 80046c0:	011c      	lsls	r4, r3, #4
 80046c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046cc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046d4:	4642      	mov	r2, r8
 80046d6:	464b      	mov	r3, r9
 80046d8:	1891      	adds	r1, r2, r2
 80046da:	61b9      	str	r1, [r7, #24]
 80046dc:	415b      	adcs	r3, r3
 80046de:	61fb      	str	r3, [r7, #28]
 80046e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e4:	4641      	mov	r1, r8
 80046e6:	1851      	adds	r1, r2, r1
 80046e8:	6139      	str	r1, [r7, #16]
 80046ea:	4649      	mov	r1, r9
 80046ec:	414b      	adcs	r3, r1
 80046ee:	617b      	str	r3, [r7, #20]
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046fc:	4659      	mov	r1, fp
 80046fe:	00cb      	lsls	r3, r1, #3
 8004700:	4651      	mov	r1, sl
 8004702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004706:	4651      	mov	r1, sl
 8004708:	00ca      	lsls	r2, r1, #3
 800470a:	4610      	mov	r0, r2
 800470c:	4619      	mov	r1, r3
 800470e:	4603      	mov	r3, r0
 8004710:	4642      	mov	r2, r8
 8004712:	189b      	adds	r3, r3, r2
 8004714:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004718:	464b      	mov	r3, r9
 800471a:	460a      	mov	r2, r1
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800472e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004730:	f04f 0200 	mov.w	r2, #0
 8004734:	f04f 0300 	mov.w	r3, #0
 8004738:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800473c:	4649      	mov	r1, r9
 800473e:	008b      	lsls	r3, r1, #2
 8004740:	4641      	mov	r1, r8
 8004742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004746:	4641      	mov	r1, r8
 8004748:	008a      	lsls	r2, r1, #2
 800474a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800474e:	f7fc fa7d 	bl	8000c4c <__aeabi_uldivmod>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4611      	mov	r1, r2
 8004758:	4b38      	ldr	r3, [pc, #224]	@ (800483c <UART_SetConfig+0x4e4>)
 800475a:	fba3 2301 	umull	r2, r3, r3, r1
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2264      	movs	r2, #100	@ 0x64
 8004762:	fb02 f303 	mul.w	r3, r2, r3
 8004766:	1acb      	subs	r3, r1, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	3332      	adds	r3, #50	@ 0x32
 800476c:	4a33      	ldr	r2, [pc, #204]	@ (800483c <UART_SetConfig+0x4e4>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004778:	441c      	add	r4, r3
 800477a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800477e:	2200      	movs	r2, #0
 8004780:	673b      	str	r3, [r7, #112]	@ 0x70
 8004782:	677a      	str	r2, [r7, #116]	@ 0x74
 8004784:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004788:	4642      	mov	r2, r8
 800478a:	464b      	mov	r3, r9
 800478c:	1891      	adds	r1, r2, r2
 800478e:	60b9      	str	r1, [r7, #8]
 8004790:	415b      	adcs	r3, r3
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004798:	4641      	mov	r1, r8
 800479a:	1851      	adds	r1, r2, r1
 800479c:	6039      	str	r1, [r7, #0]
 800479e:	4649      	mov	r1, r9
 80047a0:	414b      	adcs	r3, r1
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	f04f 0300 	mov.w	r3, #0
 80047ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047b0:	4659      	mov	r1, fp
 80047b2:	00cb      	lsls	r3, r1, #3
 80047b4:	4651      	mov	r1, sl
 80047b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ba:	4651      	mov	r1, sl
 80047bc:	00ca      	lsls	r2, r1, #3
 80047be:	4610      	mov	r0, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	4642      	mov	r2, r8
 80047c6:	189b      	adds	r3, r3, r2
 80047c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047ca:	464b      	mov	r3, r9
 80047cc:	460a      	mov	r2, r1
 80047ce:	eb42 0303 	adc.w	r3, r2, r3
 80047d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80047de:	667a      	str	r2, [r7, #100]	@ 0x64
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047ec:	4649      	mov	r1, r9
 80047ee:	008b      	lsls	r3, r1, #2
 80047f0:	4641      	mov	r1, r8
 80047f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f6:	4641      	mov	r1, r8
 80047f8:	008a      	lsls	r2, r1, #2
 80047fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047fe:	f7fc fa25 	bl	8000c4c <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4b0d      	ldr	r3, [pc, #52]	@ (800483c <UART_SetConfig+0x4e4>)
 8004808:	fba3 1302 	umull	r1, r3, r3, r2
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	2164      	movs	r1, #100	@ 0x64
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	3332      	adds	r3, #50	@ 0x32
 800481a:	4a08      	ldr	r2, [pc, #32]	@ (800483c <UART_SetConfig+0x4e4>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 020f 	and.w	r2, r3, #15
 8004826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4422      	add	r2, r4
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	bf00      	nop
 8004832:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004836:	46bd      	mov	sp, r7
 8004838:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483c:	51eb851f 	.word	0x51eb851f

08004840 <atof>:
 8004840:	2100      	movs	r1, #0
 8004842:	f000 bedd 	b.w	8005600 <strtod>
	...

08004848 <sniprintf>:
 8004848:	b40c      	push	{r2, r3}
 800484a:	b530      	push	{r4, r5, lr}
 800484c:	4b17      	ldr	r3, [pc, #92]	@ (80048ac <sniprintf+0x64>)
 800484e:	1e0c      	subs	r4, r1, #0
 8004850:	681d      	ldr	r5, [r3, #0]
 8004852:	b09d      	sub	sp, #116	@ 0x74
 8004854:	da08      	bge.n	8004868 <sniprintf+0x20>
 8004856:	238b      	movs	r3, #139	@ 0x8b
 8004858:	602b      	str	r3, [r5, #0]
 800485a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800485e:	b01d      	add	sp, #116	@ 0x74
 8004860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004864:	b002      	add	sp, #8
 8004866:	4770      	bx	lr
 8004868:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800486c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004870:	bf14      	ite	ne
 8004872:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8004876:	4623      	moveq	r3, r4
 8004878:	9304      	str	r3, [sp, #16]
 800487a:	9307      	str	r3, [sp, #28]
 800487c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004880:	9002      	str	r0, [sp, #8]
 8004882:	9006      	str	r0, [sp, #24]
 8004884:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004888:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800488a:	ab21      	add	r3, sp, #132	@ 0x84
 800488c:	a902      	add	r1, sp, #8
 800488e:	4628      	mov	r0, r5
 8004890:	9301      	str	r3, [sp, #4]
 8004892:	f001 fad1 	bl	8005e38 <_svfiprintf_r>
 8004896:	1c43      	adds	r3, r0, #1
 8004898:	bfbc      	itt	lt
 800489a:	238b      	movlt	r3, #139	@ 0x8b
 800489c:	602b      	strlt	r3, [r5, #0]
 800489e:	2c00      	cmp	r4, #0
 80048a0:	d0dd      	beq.n	800485e <sniprintf+0x16>
 80048a2:	9b02      	ldr	r3, [sp, #8]
 80048a4:	2200      	movs	r2, #0
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e7d9      	b.n	800485e <sniprintf+0x16>
 80048aa:	bf00      	nop
 80048ac:	20000190 	.word	0x20000190

080048b0 <std>:
 80048b0:	2300      	movs	r3, #0
 80048b2:	b510      	push	{r4, lr}
 80048b4:	4604      	mov	r4, r0
 80048b6:	e9c0 3300 	strd	r3, r3, [r0]
 80048ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048be:	6083      	str	r3, [r0, #8]
 80048c0:	8181      	strh	r1, [r0, #12]
 80048c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80048c4:	81c2      	strh	r2, [r0, #14]
 80048c6:	6183      	str	r3, [r0, #24]
 80048c8:	4619      	mov	r1, r3
 80048ca:	2208      	movs	r2, #8
 80048cc:	305c      	adds	r0, #92	@ 0x5c
 80048ce:	f000 fed3 	bl	8005678 <memset>
 80048d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <std+0x58>)
 80048d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80048d6:	4b0d      	ldr	r3, [pc, #52]	@ (800490c <std+0x5c>)
 80048d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <std+0x60>)
 80048dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <std+0x64>)
 80048e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80048e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004918 <std+0x68>)
 80048e4:	6224      	str	r4, [r4, #32]
 80048e6:	429c      	cmp	r4, r3
 80048e8:	d006      	beq.n	80048f8 <std+0x48>
 80048ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80048ee:	4294      	cmp	r4, r2
 80048f0:	d002      	beq.n	80048f8 <std+0x48>
 80048f2:	33d0      	adds	r3, #208	@ 0xd0
 80048f4:	429c      	cmp	r4, r3
 80048f6:	d105      	bne.n	8004904 <std+0x54>
 80048f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80048fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004900:	f000 beec 	b.w	80056dc <__retarget_lock_init_recursive>
 8004904:	bd10      	pop	{r4, pc}
 8004906:	bf00      	nop
 8004908:	08006f89 	.word	0x08006f89
 800490c:	08006fab 	.word	0x08006fab
 8004910:	08006fe3 	.word	0x08006fe3
 8004914:	08007007 	.word	0x08007007
 8004918:	20000450 	.word	0x20000450

0800491c <stdio_exit_handler>:
 800491c:	4a02      	ldr	r2, [pc, #8]	@ (8004928 <stdio_exit_handler+0xc>)
 800491e:	4903      	ldr	r1, [pc, #12]	@ (800492c <stdio_exit_handler+0x10>)
 8004920:	4803      	ldr	r0, [pc, #12]	@ (8004930 <stdio_exit_handler+0x14>)
 8004922:	f000 be79 	b.w	8005618 <_fwalk_sglue>
 8004926:	bf00      	nop
 8004928:	20000018 	.word	0x20000018
 800492c:	080065bd 	.word	0x080065bd
 8004930:	20000194 	.word	0x20000194

08004934 <cleanup_stdio>:
 8004934:	6841      	ldr	r1, [r0, #4]
 8004936:	4b0c      	ldr	r3, [pc, #48]	@ (8004968 <cleanup_stdio+0x34>)
 8004938:	4299      	cmp	r1, r3
 800493a:	b510      	push	{r4, lr}
 800493c:	4604      	mov	r4, r0
 800493e:	d001      	beq.n	8004944 <cleanup_stdio+0x10>
 8004940:	f001 fe3c 	bl	80065bc <_fflush_r>
 8004944:	68a1      	ldr	r1, [r4, #8]
 8004946:	4b09      	ldr	r3, [pc, #36]	@ (800496c <cleanup_stdio+0x38>)
 8004948:	4299      	cmp	r1, r3
 800494a:	d002      	beq.n	8004952 <cleanup_stdio+0x1e>
 800494c:	4620      	mov	r0, r4
 800494e:	f001 fe35 	bl	80065bc <_fflush_r>
 8004952:	68e1      	ldr	r1, [r4, #12]
 8004954:	4b06      	ldr	r3, [pc, #24]	@ (8004970 <cleanup_stdio+0x3c>)
 8004956:	4299      	cmp	r1, r3
 8004958:	d004      	beq.n	8004964 <cleanup_stdio+0x30>
 800495a:	4620      	mov	r0, r4
 800495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004960:	f001 be2c 	b.w	80065bc <_fflush_r>
 8004964:	bd10      	pop	{r4, pc}
 8004966:	bf00      	nop
 8004968:	20000450 	.word	0x20000450
 800496c:	200004b8 	.word	0x200004b8
 8004970:	20000520 	.word	0x20000520

08004974 <global_stdio_init.part.0>:
 8004974:	b510      	push	{r4, lr}
 8004976:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <global_stdio_init.part.0+0x30>)
 8004978:	4c0b      	ldr	r4, [pc, #44]	@ (80049a8 <global_stdio_init.part.0+0x34>)
 800497a:	4a0c      	ldr	r2, [pc, #48]	@ (80049ac <global_stdio_init.part.0+0x38>)
 800497c:	601a      	str	r2, [r3, #0]
 800497e:	4620      	mov	r0, r4
 8004980:	2200      	movs	r2, #0
 8004982:	2104      	movs	r1, #4
 8004984:	f7ff ff94 	bl	80048b0 <std>
 8004988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800498c:	2201      	movs	r2, #1
 800498e:	2109      	movs	r1, #9
 8004990:	f7ff ff8e 	bl	80048b0 <std>
 8004994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004998:	2202      	movs	r2, #2
 800499a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800499e:	2112      	movs	r1, #18
 80049a0:	f7ff bf86 	b.w	80048b0 <std>
 80049a4:	20000588 	.word	0x20000588
 80049a8:	20000450 	.word	0x20000450
 80049ac:	0800491d 	.word	0x0800491d

080049b0 <__sfp_lock_acquire>:
 80049b0:	4801      	ldr	r0, [pc, #4]	@ (80049b8 <__sfp_lock_acquire+0x8>)
 80049b2:	f000 be94 	b.w	80056de <__retarget_lock_acquire_recursive>
 80049b6:	bf00      	nop
 80049b8:	2000058d 	.word	0x2000058d

080049bc <__sfp_lock_release>:
 80049bc:	4801      	ldr	r0, [pc, #4]	@ (80049c4 <__sfp_lock_release+0x8>)
 80049be:	f000 be8f 	b.w	80056e0 <__retarget_lock_release_recursive>
 80049c2:	bf00      	nop
 80049c4:	2000058d 	.word	0x2000058d

080049c8 <__sinit>:
 80049c8:	b510      	push	{r4, lr}
 80049ca:	4604      	mov	r4, r0
 80049cc:	f7ff fff0 	bl	80049b0 <__sfp_lock_acquire>
 80049d0:	6a23      	ldr	r3, [r4, #32]
 80049d2:	b11b      	cbz	r3, 80049dc <__sinit+0x14>
 80049d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d8:	f7ff bff0 	b.w	80049bc <__sfp_lock_release>
 80049dc:	4b04      	ldr	r3, [pc, #16]	@ (80049f0 <__sinit+0x28>)
 80049de:	6223      	str	r3, [r4, #32]
 80049e0:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <__sinit+0x2c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f5      	bne.n	80049d4 <__sinit+0xc>
 80049e8:	f7ff ffc4 	bl	8004974 <global_stdio_init.part.0>
 80049ec:	e7f2      	b.n	80049d4 <__sinit+0xc>
 80049ee:	bf00      	nop
 80049f0:	08004935 	.word	0x08004935
 80049f4:	20000588 	.word	0x20000588

080049f8 <sulp>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4604      	mov	r4, r0
 80049fc:	460d      	mov	r5, r1
 80049fe:	ec45 4b10 	vmov	d0, r4, r5
 8004a02:	4616      	mov	r6, r2
 8004a04:	f002 f982 	bl	8006d0c <__ulp>
 8004a08:	ec51 0b10 	vmov	r0, r1, d0
 8004a0c:	b17e      	cbz	r6, 8004a2e <sulp+0x36>
 8004a0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004a12:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	dd09      	ble.n	8004a2e <sulp+0x36>
 8004a1a:	051b      	lsls	r3, r3, #20
 8004a1c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004a20:	2400      	movs	r4, #0
 8004a22:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004a26:	4622      	mov	r2, r4
 8004a28:	462b      	mov	r3, r5
 8004a2a:	f7fb fe05 	bl	8000638 <__aeabi_dmul>
 8004a2e:	ec41 0b10 	vmov	d0, r0, r1
 8004a32:	bd70      	pop	{r4, r5, r6, pc}
 8004a34:	0000      	movs	r0, r0
	...

08004a38 <_strtod_l>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	b09f      	sub	sp, #124	@ 0x7c
 8004a3e:	460c      	mov	r4, r1
 8004a40:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004a42:	2200      	movs	r2, #0
 8004a44:	921a      	str	r2, [sp, #104]	@ 0x68
 8004a46:	9005      	str	r0, [sp, #20]
 8004a48:	f04f 0a00 	mov.w	sl, #0
 8004a4c:	f04f 0b00 	mov.w	fp, #0
 8004a50:	460a      	mov	r2, r1
 8004a52:	9219      	str	r2, [sp, #100]	@ 0x64
 8004a54:	7811      	ldrb	r1, [r2, #0]
 8004a56:	292b      	cmp	r1, #43	@ 0x2b
 8004a58:	d04a      	beq.n	8004af0 <_strtod_l+0xb8>
 8004a5a:	d838      	bhi.n	8004ace <_strtod_l+0x96>
 8004a5c:	290d      	cmp	r1, #13
 8004a5e:	d832      	bhi.n	8004ac6 <_strtod_l+0x8e>
 8004a60:	2908      	cmp	r1, #8
 8004a62:	d832      	bhi.n	8004aca <_strtod_l+0x92>
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d03b      	beq.n	8004ae0 <_strtod_l+0xa8>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004a6c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004a6e:	782a      	ldrb	r2, [r5, #0]
 8004a70:	2a30      	cmp	r2, #48	@ 0x30
 8004a72:	f040 80b3 	bne.w	8004bdc <_strtod_l+0x1a4>
 8004a76:	786a      	ldrb	r2, [r5, #1]
 8004a78:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004a7c:	2a58      	cmp	r2, #88	@ 0x58
 8004a7e:	d16e      	bne.n	8004b5e <_strtod_l+0x126>
 8004a80:	9302      	str	r3, [sp, #8]
 8004a82:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	ab1a      	add	r3, sp, #104	@ 0x68
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	4a8e      	ldr	r2, [pc, #568]	@ (8004cc4 <_strtod_l+0x28c>)
 8004a8c:	9805      	ldr	r0, [sp, #20]
 8004a8e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004a90:	a919      	add	r1, sp, #100	@ 0x64
 8004a92:	f000 fea5 	bl	80057e0 <__gethex>
 8004a96:	f010 060f 	ands.w	r6, r0, #15
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	d005      	beq.n	8004aaa <_strtod_l+0x72>
 8004a9e:	2e06      	cmp	r6, #6
 8004aa0:	d128      	bne.n	8004af4 <_strtod_l+0xbc>
 8004aa2:	3501      	adds	r5, #1
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9519      	str	r5, [sp, #100]	@ 0x64
 8004aa8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aaa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f040 858e 	bne.w	80055ce <_strtod_l+0xb96>
 8004ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ab4:	b1cb      	cbz	r3, 8004aea <_strtod_l+0xb2>
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004abc:	ec43 2b10 	vmov	d0, r2, r3
 8004ac0:	b01f      	add	sp, #124	@ 0x7c
 8004ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac6:	2920      	cmp	r1, #32
 8004ac8:	d1ce      	bne.n	8004a68 <_strtod_l+0x30>
 8004aca:	3201      	adds	r2, #1
 8004acc:	e7c1      	b.n	8004a52 <_strtod_l+0x1a>
 8004ace:	292d      	cmp	r1, #45	@ 0x2d
 8004ad0:	d1ca      	bne.n	8004a68 <_strtod_l+0x30>
 8004ad2:	2101      	movs	r1, #1
 8004ad4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004ad6:	1c51      	adds	r1, r2, #1
 8004ad8:	9119      	str	r1, [sp, #100]	@ 0x64
 8004ada:	7852      	ldrb	r2, [r2, #1]
 8004adc:	2a00      	cmp	r2, #0
 8004ade:	d1c5      	bne.n	8004a6c <_strtod_l+0x34>
 8004ae0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004ae2:	9419      	str	r4, [sp, #100]	@ 0x64
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f040 8570 	bne.w	80055ca <_strtod_l+0xb92>
 8004aea:	4652      	mov	r2, sl
 8004aec:	465b      	mov	r3, fp
 8004aee:	e7e5      	b.n	8004abc <_strtod_l+0x84>
 8004af0:	2100      	movs	r1, #0
 8004af2:	e7ef      	b.n	8004ad4 <_strtod_l+0x9c>
 8004af4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004af6:	b13a      	cbz	r2, 8004b08 <_strtod_l+0xd0>
 8004af8:	2135      	movs	r1, #53	@ 0x35
 8004afa:	a81c      	add	r0, sp, #112	@ 0x70
 8004afc:	f002 fa00 	bl	8006f00 <__copybits>
 8004b00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004b02:	9805      	ldr	r0, [sp, #20]
 8004b04:	f001 fdce 	bl	80066a4 <_Bfree>
 8004b08:	3e01      	subs	r6, #1
 8004b0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004b0c:	2e04      	cmp	r6, #4
 8004b0e:	d806      	bhi.n	8004b1e <_strtod_l+0xe6>
 8004b10:	e8df f006 	tbb	[pc, r6]
 8004b14:	201d0314 	.word	0x201d0314
 8004b18:	14          	.byte	0x14
 8004b19:	00          	.byte	0x00
 8004b1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004b1e:	05e1      	lsls	r1, r4, #23
 8004b20:	bf48      	it	mi
 8004b22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004b26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004b2a:	0d1b      	lsrs	r3, r3, #20
 8004b2c:	051b      	lsls	r3, r3, #20
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1bb      	bne.n	8004aaa <_strtod_l+0x72>
 8004b32:	f000 fda9 	bl	8005688 <__errno>
 8004b36:	2322      	movs	r3, #34	@ 0x22
 8004b38:	6003      	str	r3, [r0, #0]
 8004b3a:	e7b6      	b.n	8004aaa <_strtod_l+0x72>
 8004b3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004b40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004b44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004b48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004b4c:	e7e7      	b.n	8004b1e <_strtod_l+0xe6>
 8004b4e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004ccc <_strtod_l+0x294>
 8004b52:	e7e4      	b.n	8004b1e <_strtod_l+0xe6>
 8004b54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004b58:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004b5c:	e7df      	b.n	8004b1e <_strtod_l+0xe6>
 8004b5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b60:	1c5a      	adds	r2, r3, #1
 8004b62:	9219      	str	r2, [sp, #100]	@ 0x64
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	2b30      	cmp	r3, #48	@ 0x30
 8004b68:	d0f9      	beq.n	8004b5e <_strtod_l+0x126>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d09d      	beq.n	8004aaa <_strtod_l+0x72>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004b74:	930c      	str	r3, [sp, #48]	@ 0x30
 8004b76:	2300      	movs	r3, #0
 8004b78:	9308      	str	r3, [sp, #32]
 8004b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b7c:	461f      	mov	r7, r3
 8004b7e:	220a      	movs	r2, #10
 8004b80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004b82:	7805      	ldrb	r5, [r0, #0]
 8004b84:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004b88:	b2d9      	uxtb	r1, r3
 8004b8a:	2909      	cmp	r1, #9
 8004b8c:	d928      	bls.n	8004be0 <_strtod_l+0x1a8>
 8004b8e:	494e      	ldr	r1, [pc, #312]	@ (8004cc8 <_strtod_l+0x290>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	f000 fd5f 	bl	8005654 <strncmp>
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d032      	beq.n	8004c00 <_strtod_l+0x1c8>
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	462a      	mov	r2, r5
 8004b9e:	4681      	mov	r9, r0
 8004ba0:	463d      	mov	r5, r7
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2a65      	cmp	r2, #101	@ 0x65
 8004ba6:	d001      	beq.n	8004bac <_strtod_l+0x174>
 8004ba8:	2a45      	cmp	r2, #69	@ 0x45
 8004baa:	d114      	bne.n	8004bd6 <_strtod_l+0x19e>
 8004bac:	b91d      	cbnz	r5, 8004bb6 <_strtod_l+0x17e>
 8004bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bb0:	4302      	orrs	r2, r0
 8004bb2:	d095      	beq.n	8004ae0 <_strtod_l+0xa8>
 8004bb4:	2500      	movs	r5, #0
 8004bb6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004bb8:	1c62      	adds	r2, r4, #1
 8004bba:	9219      	str	r2, [sp, #100]	@ 0x64
 8004bbc:	7862      	ldrb	r2, [r4, #1]
 8004bbe:	2a2b      	cmp	r2, #43	@ 0x2b
 8004bc0:	d077      	beq.n	8004cb2 <_strtod_l+0x27a>
 8004bc2:	2a2d      	cmp	r2, #45	@ 0x2d
 8004bc4:	d07b      	beq.n	8004cbe <_strtod_l+0x286>
 8004bc6:	f04f 0c00 	mov.w	ip, #0
 8004bca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004bce:	2909      	cmp	r1, #9
 8004bd0:	f240 8082 	bls.w	8004cd8 <_strtod_l+0x2a0>
 8004bd4:	9419      	str	r4, [sp, #100]	@ 0x64
 8004bd6:	f04f 0800 	mov.w	r8, #0
 8004bda:	e0a2      	b.n	8004d22 <_strtod_l+0x2ea>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	e7c7      	b.n	8004b70 <_strtod_l+0x138>
 8004be0:	2f08      	cmp	r7, #8
 8004be2:	bfd5      	itete	le
 8004be4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004be6:	9908      	ldrgt	r1, [sp, #32]
 8004be8:	fb02 3301 	mlale	r3, r2, r1, r3
 8004bec:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004bf0:	f100 0001 	add.w	r0, r0, #1
 8004bf4:	bfd4      	ite	le
 8004bf6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004bf8:	9308      	strgt	r3, [sp, #32]
 8004bfa:	3701      	adds	r7, #1
 8004bfc:	9019      	str	r0, [sp, #100]	@ 0x64
 8004bfe:	e7bf      	b.n	8004b80 <_strtod_l+0x148>
 8004c00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	9219      	str	r2, [sp, #100]	@ 0x64
 8004c06:	785a      	ldrb	r2, [r3, #1]
 8004c08:	b37f      	cbz	r7, 8004c6a <_strtod_l+0x232>
 8004c0a:	4681      	mov	r9, r0
 8004c0c:	463d      	mov	r5, r7
 8004c0e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004c12:	2b09      	cmp	r3, #9
 8004c14:	d912      	bls.n	8004c3c <_strtod_l+0x204>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e7c4      	b.n	8004ba4 <_strtod_l+0x16c>
 8004c1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	9219      	str	r2, [sp, #100]	@ 0x64
 8004c20:	785a      	ldrb	r2, [r3, #1]
 8004c22:	3001      	adds	r0, #1
 8004c24:	2a30      	cmp	r2, #48	@ 0x30
 8004c26:	d0f8      	beq.n	8004c1a <_strtod_l+0x1e2>
 8004c28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	f200 84d3 	bhi.w	80055d8 <_strtod_l+0xba0>
 8004c32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004c34:	930c      	str	r3, [sp, #48]	@ 0x30
 8004c36:	4681      	mov	r9, r0
 8004c38:	2000      	movs	r0, #0
 8004c3a:	4605      	mov	r5, r0
 8004c3c:	3a30      	subs	r2, #48	@ 0x30
 8004c3e:	f100 0301 	add.w	r3, r0, #1
 8004c42:	d02a      	beq.n	8004c9a <_strtod_l+0x262>
 8004c44:	4499      	add	r9, r3
 8004c46:	eb00 0c05 	add.w	ip, r0, r5
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	210a      	movs	r1, #10
 8004c4e:	4563      	cmp	r3, ip
 8004c50:	d10d      	bne.n	8004c6e <_strtod_l+0x236>
 8004c52:	1c69      	adds	r1, r5, #1
 8004c54:	4401      	add	r1, r0
 8004c56:	4428      	add	r0, r5
 8004c58:	2808      	cmp	r0, #8
 8004c5a:	dc16      	bgt.n	8004c8a <_strtod_l+0x252>
 8004c5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004c5e:	230a      	movs	r3, #10
 8004c60:	fb03 2300 	mla	r3, r3, r0, r2
 8004c64:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c66:	2300      	movs	r3, #0
 8004c68:	e018      	b.n	8004c9c <_strtod_l+0x264>
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	e7da      	b.n	8004c24 <_strtod_l+0x1ec>
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	f103 0301 	add.w	r3, r3, #1
 8004c74:	dc03      	bgt.n	8004c7e <_strtod_l+0x246>
 8004c76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004c78:	434e      	muls	r6, r1
 8004c7a:	960a      	str	r6, [sp, #40]	@ 0x28
 8004c7c:	e7e7      	b.n	8004c4e <_strtod_l+0x216>
 8004c7e:	2b10      	cmp	r3, #16
 8004c80:	bfde      	ittt	le
 8004c82:	9e08      	ldrle	r6, [sp, #32]
 8004c84:	434e      	mulle	r6, r1
 8004c86:	9608      	strle	r6, [sp, #32]
 8004c88:	e7e1      	b.n	8004c4e <_strtod_l+0x216>
 8004c8a:	280f      	cmp	r0, #15
 8004c8c:	dceb      	bgt.n	8004c66 <_strtod_l+0x22e>
 8004c8e:	9808      	ldr	r0, [sp, #32]
 8004c90:	230a      	movs	r3, #10
 8004c92:	fb03 2300 	mla	r3, r3, r0, r2
 8004c96:	9308      	str	r3, [sp, #32]
 8004c98:	e7e5      	b.n	8004c66 <_strtod_l+0x22e>
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004c9e:	1c50      	adds	r0, r2, #1
 8004ca0:	9019      	str	r0, [sp, #100]	@ 0x64
 8004ca2:	7852      	ldrb	r2, [r2, #1]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	460d      	mov	r5, r1
 8004ca8:	e7b1      	b.n	8004c0e <_strtod_l+0x1d6>
 8004caa:	f04f 0900 	mov.w	r9, #0
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e77d      	b.n	8004bae <_strtod_l+0x176>
 8004cb2:	f04f 0c00 	mov.w	ip, #0
 8004cb6:	1ca2      	adds	r2, r4, #2
 8004cb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8004cba:	78a2      	ldrb	r2, [r4, #2]
 8004cbc:	e785      	b.n	8004bca <_strtod_l+0x192>
 8004cbe:	f04f 0c01 	mov.w	ip, #1
 8004cc2:	e7f8      	b.n	8004cb6 <_strtod_l+0x27e>
 8004cc4:	08008334 	.word	0x08008334
 8004cc8:	08008310 	.word	0x08008310
 8004ccc:	7ff00000 	.word	0x7ff00000
 8004cd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004cd2:	1c51      	adds	r1, r2, #1
 8004cd4:	9119      	str	r1, [sp, #100]	@ 0x64
 8004cd6:	7852      	ldrb	r2, [r2, #1]
 8004cd8:	2a30      	cmp	r2, #48	@ 0x30
 8004cda:	d0f9      	beq.n	8004cd0 <_strtod_l+0x298>
 8004cdc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004ce0:	2908      	cmp	r1, #8
 8004ce2:	f63f af78 	bhi.w	8004bd6 <_strtod_l+0x19e>
 8004ce6:	3a30      	subs	r2, #48	@ 0x30
 8004ce8:	920e      	str	r2, [sp, #56]	@ 0x38
 8004cea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004cec:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004cee:	f04f 080a 	mov.w	r8, #10
 8004cf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004cf4:	1c56      	adds	r6, r2, #1
 8004cf6:	9619      	str	r6, [sp, #100]	@ 0x64
 8004cf8:	7852      	ldrb	r2, [r2, #1]
 8004cfa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004cfe:	f1be 0f09 	cmp.w	lr, #9
 8004d02:	d939      	bls.n	8004d78 <_strtod_l+0x340>
 8004d04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004d06:	1a76      	subs	r6, r6, r1
 8004d08:	2e08      	cmp	r6, #8
 8004d0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004d0e:	dc03      	bgt.n	8004d18 <_strtod_l+0x2e0>
 8004d10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004d12:	4588      	cmp	r8, r1
 8004d14:	bfa8      	it	ge
 8004d16:	4688      	movge	r8, r1
 8004d18:	f1bc 0f00 	cmp.w	ip, #0
 8004d1c:	d001      	beq.n	8004d22 <_strtod_l+0x2ea>
 8004d1e:	f1c8 0800 	rsb	r8, r8, #0
 8004d22:	2d00      	cmp	r5, #0
 8004d24:	d14e      	bne.n	8004dc4 <_strtod_l+0x38c>
 8004d26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d28:	4308      	orrs	r0, r1
 8004d2a:	f47f aebe 	bne.w	8004aaa <_strtod_l+0x72>
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f47f aed6 	bne.w	8004ae0 <_strtod_l+0xa8>
 8004d34:	2a69      	cmp	r2, #105	@ 0x69
 8004d36:	d028      	beq.n	8004d8a <_strtod_l+0x352>
 8004d38:	dc25      	bgt.n	8004d86 <_strtod_l+0x34e>
 8004d3a:	2a49      	cmp	r2, #73	@ 0x49
 8004d3c:	d025      	beq.n	8004d8a <_strtod_l+0x352>
 8004d3e:	2a4e      	cmp	r2, #78	@ 0x4e
 8004d40:	f47f aece 	bne.w	8004ae0 <_strtod_l+0xa8>
 8004d44:	499b      	ldr	r1, [pc, #620]	@ (8004fb4 <_strtod_l+0x57c>)
 8004d46:	a819      	add	r0, sp, #100	@ 0x64
 8004d48:	f000 ff6c 	bl	8005c24 <__match>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f43f aec7 	beq.w	8004ae0 <_strtod_l+0xa8>
 8004d52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b28      	cmp	r3, #40	@ 0x28
 8004d58:	d12e      	bne.n	8004db8 <_strtod_l+0x380>
 8004d5a:	4997      	ldr	r1, [pc, #604]	@ (8004fb8 <_strtod_l+0x580>)
 8004d5c:	aa1c      	add	r2, sp, #112	@ 0x70
 8004d5e:	a819      	add	r0, sp, #100	@ 0x64
 8004d60:	f000 ff74 	bl	8005c4c <__hexnan>
 8004d64:	2805      	cmp	r0, #5
 8004d66:	d127      	bne.n	8004db8 <_strtod_l+0x380>
 8004d68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004d6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004d6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004d72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004d76:	e698      	b.n	8004aaa <_strtod_l+0x72>
 8004d78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004d7a:	fb08 2101 	mla	r1, r8, r1, r2
 8004d7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004d82:	920e      	str	r2, [sp, #56]	@ 0x38
 8004d84:	e7b5      	b.n	8004cf2 <_strtod_l+0x2ba>
 8004d86:	2a6e      	cmp	r2, #110	@ 0x6e
 8004d88:	e7da      	b.n	8004d40 <_strtod_l+0x308>
 8004d8a:	498c      	ldr	r1, [pc, #560]	@ (8004fbc <_strtod_l+0x584>)
 8004d8c:	a819      	add	r0, sp, #100	@ 0x64
 8004d8e:	f000 ff49 	bl	8005c24 <__match>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	f43f aea4 	beq.w	8004ae0 <_strtod_l+0xa8>
 8004d98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d9a:	4989      	ldr	r1, [pc, #548]	@ (8004fc0 <_strtod_l+0x588>)
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	a819      	add	r0, sp, #100	@ 0x64
 8004da0:	9319      	str	r3, [sp, #100]	@ 0x64
 8004da2:	f000 ff3f 	bl	8005c24 <__match>
 8004da6:	b910      	cbnz	r0, 8004dae <_strtod_l+0x376>
 8004da8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004daa:	3301      	adds	r3, #1
 8004dac:	9319      	str	r3, [sp, #100]	@ 0x64
 8004dae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8004fd0 <_strtod_l+0x598>
 8004db2:	f04f 0a00 	mov.w	sl, #0
 8004db6:	e678      	b.n	8004aaa <_strtod_l+0x72>
 8004db8:	4882      	ldr	r0, [pc, #520]	@ (8004fc4 <_strtod_l+0x58c>)
 8004dba:	f000 fca1 	bl	8005700 <nan>
 8004dbe:	ec5b ab10 	vmov	sl, fp, d0
 8004dc2:	e672      	b.n	8004aaa <_strtod_l+0x72>
 8004dc4:	eba8 0309 	sub.w	r3, r8, r9
 8004dc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dcc:	2f00      	cmp	r7, #0
 8004dce:	bf08      	it	eq
 8004dd0:	462f      	moveq	r7, r5
 8004dd2:	2d10      	cmp	r5, #16
 8004dd4:	462c      	mov	r4, r5
 8004dd6:	bfa8      	it	ge
 8004dd8:	2410      	movge	r4, #16
 8004dda:	f7fb fbb3 	bl	8000544 <__aeabi_ui2d>
 8004dde:	2d09      	cmp	r5, #9
 8004de0:	4682      	mov	sl, r0
 8004de2:	468b      	mov	fp, r1
 8004de4:	dc13      	bgt.n	8004e0e <_strtod_l+0x3d6>
 8004de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f43f ae5e 	beq.w	8004aaa <_strtod_l+0x72>
 8004dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df0:	dd78      	ble.n	8004ee4 <_strtod_l+0x4ac>
 8004df2:	2b16      	cmp	r3, #22
 8004df4:	dc5f      	bgt.n	8004eb6 <_strtod_l+0x47e>
 8004df6:	4974      	ldr	r1, [pc, #464]	@ (8004fc8 <_strtod_l+0x590>)
 8004df8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e00:	4652      	mov	r2, sl
 8004e02:	465b      	mov	r3, fp
 8004e04:	f7fb fc18 	bl	8000638 <__aeabi_dmul>
 8004e08:	4682      	mov	sl, r0
 8004e0a:	468b      	mov	fp, r1
 8004e0c:	e64d      	b.n	8004aaa <_strtod_l+0x72>
 8004e0e:	4b6e      	ldr	r3, [pc, #440]	@ (8004fc8 <_strtod_l+0x590>)
 8004e10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004e14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004e18:	f7fb fc0e 	bl	8000638 <__aeabi_dmul>
 8004e1c:	4682      	mov	sl, r0
 8004e1e:	9808      	ldr	r0, [sp, #32]
 8004e20:	468b      	mov	fp, r1
 8004e22:	f7fb fb8f 	bl	8000544 <__aeabi_ui2d>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4650      	mov	r0, sl
 8004e2c:	4659      	mov	r1, fp
 8004e2e:	f7fb fa4d 	bl	80002cc <__adddf3>
 8004e32:	2d0f      	cmp	r5, #15
 8004e34:	4682      	mov	sl, r0
 8004e36:	468b      	mov	fp, r1
 8004e38:	ddd5      	ble.n	8004de6 <_strtod_l+0x3ae>
 8004e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e3c:	1b2c      	subs	r4, r5, r4
 8004e3e:	441c      	add	r4, r3
 8004e40:	2c00      	cmp	r4, #0
 8004e42:	f340 8096 	ble.w	8004f72 <_strtod_l+0x53a>
 8004e46:	f014 030f 	ands.w	r3, r4, #15
 8004e4a:	d00a      	beq.n	8004e62 <_strtod_l+0x42a>
 8004e4c:	495e      	ldr	r1, [pc, #376]	@ (8004fc8 <_strtod_l+0x590>)
 8004e4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004e52:	4652      	mov	r2, sl
 8004e54:	465b      	mov	r3, fp
 8004e56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e5a:	f7fb fbed 	bl	8000638 <__aeabi_dmul>
 8004e5e:	4682      	mov	sl, r0
 8004e60:	468b      	mov	fp, r1
 8004e62:	f034 040f 	bics.w	r4, r4, #15
 8004e66:	d073      	beq.n	8004f50 <_strtod_l+0x518>
 8004e68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004e6c:	dd48      	ble.n	8004f00 <_strtod_l+0x4c8>
 8004e6e:	2400      	movs	r4, #0
 8004e70:	46a0      	mov	r8, r4
 8004e72:	940a      	str	r4, [sp, #40]	@ 0x28
 8004e74:	46a1      	mov	r9, r4
 8004e76:	9a05      	ldr	r2, [sp, #20]
 8004e78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8004fd0 <_strtod_l+0x598>
 8004e7c:	2322      	movs	r3, #34	@ 0x22
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	f04f 0a00 	mov.w	sl, #0
 8004e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f43f ae0f 	beq.w	8004aaa <_strtod_l+0x72>
 8004e8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004e8e:	9805      	ldr	r0, [sp, #20]
 8004e90:	f001 fc08 	bl	80066a4 <_Bfree>
 8004e94:	9805      	ldr	r0, [sp, #20]
 8004e96:	4649      	mov	r1, r9
 8004e98:	f001 fc04 	bl	80066a4 <_Bfree>
 8004e9c:	9805      	ldr	r0, [sp, #20]
 8004e9e:	4641      	mov	r1, r8
 8004ea0:	f001 fc00 	bl	80066a4 <_Bfree>
 8004ea4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ea6:	9805      	ldr	r0, [sp, #20]
 8004ea8:	f001 fbfc 	bl	80066a4 <_Bfree>
 8004eac:	9805      	ldr	r0, [sp, #20]
 8004eae:	4621      	mov	r1, r4
 8004eb0:	f001 fbf8 	bl	80066a4 <_Bfree>
 8004eb4:	e5f9      	b.n	8004aaa <_strtod_l+0x72>
 8004eb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004eb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	dbbc      	blt.n	8004e3a <_strtod_l+0x402>
 8004ec0:	4c41      	ldr	r4, [pc, #260]	@ (8004fc8 <_strtod_l+0x590>)
 8004ec2:	f1c5 050f 	rsb	r5, r5, #15
 8004ec6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004eca:	4652      	mov	r2, sl
 8004ecc:	465b      	mov	r3, fp
 8004ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ed2:	f7fb fbb1 	bl	8000638 <__aeabi_dmul>
 8004ed6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed8:	1b5d      	subs	r5, r3, r5
 8004eda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004ede:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ee2:	e78f      	b.n	8004e04 <_strtod_l+0x3cc>
 8004ee4:	3316      	adds	r3, #22
 8004ee6:	dba8      	blt.n	8004e3a <_strtod_l+0x402>
 8004ee8:	4b37      	ldr	r3, [pc, #220]	@ (8004fc8 <_strtod_l+0x590>)
 8004eea:	eba9 0808 	sub.w	r8, r9, r8
 8004eee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004ef2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004ef6:	4650      	mov	r0, sl
 8004ef8:	4659      	mov	r1, fp
 8004efa:	f7fb fcc7 	bl	800088c <__aeabi_ddiv>
 8004efe:	e783      	b.n	8004e08 <_strtod_l+0x3d0>
 8004f00:	4b32      	ldr	r3, [pc, #200]	@ (8004fcc <_strtod_l+0x594>)
 8004f02:	9308      	str	r3, [sp, #32]
 8004f04:	2300      	movs	r3, #0
 8004f06:	1124      	asrs	r4, r4, #4
 8004f08:	4650      	mov	r0, sl
 8004f0a:	4659      	mov	r1, fp
 8004f0c:	461e      	mov	r6, r3
 8004f0e:	2c01      	cmp	r4, #1
 8004f10:	dc21      	bgt.n	8004f56 <_strtod_l+0x51e>
 8004f12:	b10b      	cbz	r3, 8004f18 <_strtod_l+0x4e0>
 8004f14:	4682      	mov	sl, r0
 8004f16:	468b      	mov	fp, r1
 8004f18:	492c      	ldr	r1, [pc, #176]	@ (8004fcc <_strtod_l+0x594>)
 8004f1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004f1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004f22:	4652      	mov	r2, sl
 8004f24:	465b      	mov	r3, fp
 8004f26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f2a:	f7fb fb85 	bl	8000638 <__aeabi_dmul>
 8004f2e:	4b28      	ldr	r3, [pc, #160]	@ (8004fd0 <_strtod_l+0x598>)
 8004f30:	460a      	mov	r2, r1
 8004f32:	400b      	ands	r3, r1
 8004f34:	4927      	ldr	r1, [pc, #156]	@ (8004fd4 <_strtod_l+0x59c>)
 8004f36:	428b      	cmp	r3, r1
 8004f38:	4682      	mov	sl, r0
 8004f3a:	d898      	bhi.n	8004e6e <_strtod_l+0x436>
 8004f3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004f40:	428b      	cmp	r3, r1
 8004f42:	bf86      	itte	hi
 8004f44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8004fd8 <_strtod_l+0x5a0>
 8004f48:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8004f4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004f50:	2300      	movs	r3, #0
 8004f52:	9308      	str	r3, [sp, #32]
 8004f54:	e07a      	b.n	800504c <_strtod_l+0x614>
 8004f56:	07e2      	lsls	r2, r4, #31
 8004f58:	d505      	bpl.n	8004f66 <_strtod_l+0x52e>
 8004f5a:	9b08      	ldr	r3, [sp, #32]
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb fb6a 	bl	8000638 <__aeabi_dmul>
 8004f64:	2301      	movs	r3, #1
 8004f66:	9a08      	ldr	r2, [sp, #32]
 8004f68:	3208      	adds	r2, #8
 8004f6a:	3601      	adds	r6, #1
 8004f6c:	1064      	asrs	r4, r4, #1
 8004f6e:	9208      	str	r2, [sp, #32]
 8004f70:	e7cd      	b.n	8004f0e <_strtod_l+0x4d6>
 8004f72:	d0ed      	beq.n	8004f50 <_strtod_l+0x518>
 8004f74:	4264      	negs	r4, r4
 8004f76:	f014 020f 	ands.w	r2, r4, #15
 8004f7a:	d00a      	beq.n	8004f92 <_strtod_l+0x55a>
 8004f7c:	4b12      	ldr	r3, [pc, #72]	@ (8004fc8 <_strtod_l+0x590>)
 8004f7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f82:	4650      	mov	r0, sl
 8004f84:	4659      	mov	r1, fp
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	f7fb fc7f 	bl	800088c <__aeabi_ddiv>
 8004f8e:	4682      	mov	sl, r0
 8004f90:	468b      	mov	fp, r1
 8004f92:	1124      	asrs	r4, r4, #4
 8004f94:	d0dc      	beq.n	8004f50 <_strtod_l+0x518>
 8004f96:	2c1f      	cmp	r4, #31
 8004f98:	dd20      	ble.n	8004fdc <_strtod_l+0x5a4>
 8004f9a:	2400      	movs	r4, #0
 8004f9c:	46a0      	mov	r8, r4
 8004f9e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004fa0:	46a1      	mov	r9, r4
 8004fa2:	9a05      	ldr	r2, [sp, #20]
 8004fa4:	2322      	movs	r3, #34	@ 0x22
 8004fa6:	f04f 0a00 	mov.w	sl, #0
 8004faa:	f04f 0b00 	mov.w	fp, #0
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e768      	b.n	8004e84 <_strtod_l+0x44c>
 8004fb2:	bf00      	nop
 8004fb4:	0800831b 	.word	0x0800831b
 8004fb8:	08008320 	.word	0x08008320
 8004fbc:	08008312 	.word	0x08008312
 8004fc0:	08008315 	.word	0x08008315
 8004fc4:	080086cb 	.word	0x080086cb
 8004fc8:	080085c8 	.word	0x080085c8
 8004fcc:	080085a0 	.word	0x080085a0
 8004fd0:	7ff00000 	.word	0x7ff00000
 8004fd4:	7ca00000 	.word	0x7ca00000
 8004fd8:	7fefffff 	.word	0x7fefffff
 8004fdc:	f014 0310 	ands.w	r3, r4, #16
 8004fe0:	bf18      	it	ne
 8004fe2:	236a      	movne	r3, #106	@ 0x6a
 8004fe4:	4ea9      	ldr	r6, [pc, #676]	@ (800528c <_strtod_l+0x854>)
 8004fe6:	9308      	str	r3, [sp, #32]
 8004fe8:	4650      	mov	r0, sl
 8004fea:	4659      	mov	r1, fp
 8004fec:	2300      	movs	r3, #0
 8004fee:	07e2      	lsls	r2, r4, #31
 8004ff0:	d504      	bpl.n	8004ffc <_strtod_l+0x5c4>
 8004ff2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ff6:	f7fb fb1f 	bl	8000638 <__aeabi_dmul>
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	1064      	asrs	r4, r4, #1
 8004ffe:	f106 0608 	add.w	r6, r6, #8
 8005002:	d1f4      	bne.n	8004fee <_strtod_l+0x5b6>
 8005004:	b10b      	cbz	r3, 800500a <_strtod_l+0x5d2>
 8005006:	4682      	mov	sl, r0
 8005008:	468b      	mov	fp, r1
 800500a:	9b08      	ldr	r3, [sp, #32]
 800500c:	b1b3      	cbz	r3, 800503c <_strtod_l+0x604>
 800500e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005012:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005016:	2b00      	cmp	r3, #0
 8005018:	4659      	mov	r1, fp
 800501a:	dd0f      	ble.n	800503c <_strtod_l+0x604>
 800501c:	2b1f      	cmp	r3, #31
 800501e:	dd55      	ble.n	80050cc <_strtod_l+0x694>
 8005020:	2b34      	cmp	r3, #52	@ 0x34
 8005022:	bfde      	ittt	le
 8005024:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005028:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800502c:	4093      	lslle	r3, r2
 800502e:	f04f 0a00 	mov.w	sl, #0
 8005032:	bfcc      	ite	gt
 8005034:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005038:	ea03 0b01 	andle.w	fp, r3, r1
 800503c:	2200      	movs	r2, #0
 800503e:	2300      	movs	r3, #0
 8005040:	4650      	mov	r0, sl
 8005042:	4659      	mov	r1, fp
 8005044:	f7fb fd60 	bl	8000b08 <__aeabi_dcmpeq>
 8005048:	2800      	cmp	r0, #0
 800504a:	d1a6      	bne.n	8004f9a <_strtod_l+0x562>
 800504c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005052:	9805      	ldr	r0, [sp, #20]
 8005054:	462b      	mov	r3, r5
 8005056:	463a      	mov	r2, r7
 8005058:	f001 fb8c 	bl	8006774 <__s2b>
 800505c:	900a      	str	r0, [sp, #40]	@ 0x28
 800505e:	2800      	cmp	r0, #0
 8005060:	f43f af05 	beq.w	8004e6e <_strtod_l+0x436>
 8005064:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005066:	2a00      	cmp	r2, #0
 8005068:	eba9 0308 	sub.w	r3, r9, r8
 800506c:	bfa8      	it	ge
 800506e:	2300      	movge	r3, #0
 8005070:	9312      	str	r3, [sp, #72]	@ 0x48
 8005072:	2400      	movs	r4, #0
 8005074:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005078:	9316      	str	r3, [sp, #88]	@ 0x58
 800507a:	46a0      	mov	r8, r4
 800507c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800507e:	9805      	ldr	r0, [sp, #20]
 8005080:	6859      	ldr	r1, [r3, #4]
 8005082:	f001 facf 	bl	8006624 <_Balloc>
 8005086:	4681      	mov	r9, r0
 8005088:	2800      	cmp	r0, #0
 800508a:	f43f aef4 	beq.w	8004e76 <_strtod_l+0x43e>
 800508e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005090:	691a      	ldr	r2, [r3, #16]
 8005092:	3202      	adds	r2, #2
 8005094:	f103 010c 	add.w	r1, r3, #12
 8005098:	0092      	lsls	r2, r2, #2
 800509a:	300c      	adds	r0, #12
 800509c:	f000 fb21 	bl	80056e2 <memcpy>
 80050a0:	ec4b ab10 	vmov	d0, sl, fp
 80050a4:	9805      	ldr	r0, [sp, #20]
 80050a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80050a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80050aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80050ae:	f001 fe9d 	bl	8006dec <__d2b>
 80050b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80050b4:	2800      	cmp	r0, #0
 80050b6:	f43f aede 	beq.w	8004e76 <_strtod_l+0x43e>
 80050ba:	9805      	ldr	r0, [sp, #20]
 80050bc:	2101      	movs	r1, #1
 80050be:	f001 fbef 	bl	80068a0 <__i2b>
 80050c2:	4680      	mov	r8, r0
 80050c4:	b948      	cbnz	r0, 80050da <_strtod_l+0x6a2>
 80050c6:	f04f 0800 	mov.w	r8, #0
 80050ca:	e6d4      	b.n	8004e76 <_strtod_l+0x43e>
 80050cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	ea03 0a0a 	and.w	sl, r3, sl
 80050d8:	e7b0      	b.n	800503c <_strtod_l+0x604>
 80050da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80050dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80050de:	2d00      	cmp	r5, #0
 80050e0:	bfab      	itete	ge
 80050e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80050e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80050e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80050e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80050ea:	bfac      	ite	ge
 80050ec:	18ef      	addge	r7, r5, r3
 80050ee:	1b5e      	sublt	r6, r3, r5
 80050f0:	9b08      	ldr	r3, [sp, #32]
 80050f2:	1aed      	subs	r5, r5, r3
 80050f4:	4415      	add	r5, r2
 80050f6:	4b66      	ldr	r3, [pc, #408]	@ (8005290 <_strtod_l+0x858>)
 80050f8:	3d01      	subs	r5, #1
 80050fa:	429d      	cmp	r5, r3
 80050fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005100:	da50      	bge.n	80051a4 <_strtod_l+0x76c>
 8005102:	1b5b      	subs	r3, r3, r5
 8005104:	2b1f      	cmp	r3, #31
 8005106:	eba2 0203 	sub.w	r2, r2, r3
 800510a:	f04f 0101 	mov.w	r1, #1
 800510e:	dc3d      	bgt.n	800518c <_strtod_l+0x754>
 8005110:	fa01 f303 	lsl.w	r3, r1, r3
 8005114:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005116:	2300      	movs	r3, #0
 8005118:	9310      	str	r3, [sp, #64]	@ 0x40
 800511a:	18bd      	adds	r5, r7, r2
 800511c:	9b08      	ldr	r3, [sp, #32]
 800511e:	42af      	cmp	r7, r5
 8005120:	4416      	add	r6, r2
 8005122:	441e      	add	r6, r3
 8005124:	463b      	mov	r3, r7
 8005126:	bfa8      	it	ge
 8005128:	462b      	movge	r3, r5
 800512a:	42b3      	cmp	r3, r6
 800512c:	bfa8      	it	ge
 800512e:	4633      	movge	r3, r6
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfc2      	ittt	gt
 8005134:	1aed      	subgt	r5, r5, r3
 8005136:	1af6      	subgt	r6, r6, r3
 8005138:	1aff      	subgt	r7, r7, r3
 800513a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800513c:	2b00      	cmp	r3, #0
 800513e:	dd16      	ble.n	800516e <_strtod_l+0x736>
 8005140:	4641      	mov	r1, r8
 8005142:	9805      	ldr	r0, [sp, #20]
 8005144:	461a      	mov	r2, r3
 8005146:	f001 fc6b 	bl	8006a20 <__pow5mult>
 800514a:	4680      	mov	r8, r0
 800514c:	2800      	cmp	r0, #0
 800514e:	d0ba      	beq.n	80050c6 <_strtod_l+0x68e>
 8005150:	4601      	mov	r1, r0
 8005152:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005154:	9805      	ldr	r0, [sp, #20]
 8005156:	f001 fbb9 	bl	80068cc <__multiply>
 800515a:	900e      	str	r0, [sp, #56]	@ 0x38
 800515c:	2800      	cmp	r0, #0
 800515e:	f43f ae8a 	beq.w	8004e76 <_strtod_l+0x43e>
 8005162:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005164:	9805      	ldr	r0, [sp, #20]
 8005166:	f001 fa9d 	bl	80066a4 <_Bfree>
 800516a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800516c:	931a      	str	r3, [sp, #104]	@ 0x68
 800516e:	2d00      	cmp	r5, #0
 8005170:	dc1d      	bgt.n	80051ae <_strtod_l+0x776>
 8005172:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	dd23      	ble.n	80051c0 <_strtod_l+0x788>
 8005178:	4649      	mov	r1, r9
 800517a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800517c:	9805      	ldr	r0, [sp, #20]
 800517e:	f001 fc4f 	bl	8006a20 <__pow5mult>
 8005182:	4681      	mov	r9, r0
 8005184:	b9e0      	cbnz	r0, 80051c0 <_strtod_l+0x788>
 8005186:	f04f 0900 	mov.w	r9, #0
 800518a:	e674      	b.n	8004e76 <_strtod_l+0x43e>
 800518c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005190:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005194:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005198:	35e2      	adds	r5, #226	@ 0xe2
 800519a:	fa01 f305 	lsl.w	r3, r1, r5
 800519e:	9310      	str	r3, [sp, #64]	@ 0x40
 80051a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80051a2:	e7ba      	b.n	800511a <_strtod_l+0x6e2>
 80051a4:	2300      	movs	r3, #0
 80051a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80051a8:	2301      	movs	r3, #1
 80051aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80051ac:	e7b5      	b.n	800511a <_strtod_l+0x6e2>
 80051ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80051b0:	9805      	ldr	r0, [sp, #20]
 80051b2:	462a      	mov	r2, r5
 80051b4:	f001 fc8e 	bl	8006ad4 <__lshift>
 80051b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d1d9      	bne.n	8005172 <_strtod_l+0x73a>
 80051be:	e65a      	b.n	8004e76 <_strtod_l+0x43e>
 80051c0:	2e00      	cmp	r6, #0
 80051c2:	dd07      	ble.n	80051d4 <_strtod_l+0x79c>
 80051c4:	4649      	mov	r1, r9
 80051c6:	9805      	ldr	r0, [sp, #20]
 80051c8:	4632      	mov	r2, r6
 80051ca:	f001 fc83 	bl	8006ad4 <__lshift>
 80051ce:	4681      	mov	r9, r0
 80051d0:	2800      	cmp	r0, #0
 80051d2:	d0d8      	beq.n	8005186 <_strtod_l+0x74e>
 80051d4:	2f00      	cmp	r7, #0
 80051d6:	dd08      	ble.n	80051ea <_strtod_l+0x7b2>
 80051d8:	4641      	mov	r1, r8
 80051da:	9805      	ldr	r0, [sp, #20]
 80051dc:	463a      	mov	r2, r7
 80051de:	f001 fc79 	bl	8006ad4 <__lshift>
 80051e2:	4680      	mov	r8, r0
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f43f ae46 	beq.w	8004e76 <_strtod_l+0x43e>
 80051ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80051ec:	9805      	ldr	r0, [sp, #20]
 80051ee:	464a      	mov	r2, r9
 80051f0:	f001 fcf8 	bl	8006be4 <__mdiff>
 80051f4:	4604      	mov	r4, r0
 80051f6:	2800      	cmp	r0, #0
 80051f8:	f43f ae3d 	beq.w	8004e76 <_strtod_l+0x43e>
 80051fc:	68c3      	ldr	r3, [r0, #12]
 80051fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005200:	2300      	movs	r3, #0
 8005202:	60c3      	str	r3, [r0, #12]
 8005204:	4641      	mov	r1, r8
 8005206:	f001 fcd1 	bl	8006bac <__mcmp>
 800520a:	2800      	cmp	r0, #0
 800520c:	da46      	bge.n	800529c <_strtod_l+0x864>
 800520e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005210:	ea53 030a 	orrs.w	r3, r3, sl
 8005214:	d16c      	bne.n	80052f0 <_strtod_l+0x8b8>
 8005216:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800521a:	2b00      	cmp	r3, #0
 800521c:	d168      	bne.n	80052f0 <_strtod_l+0x8b8>
 800521e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005222:	0d1b      	lsrs	r3, r3, #20
 8005224:	051b      	lsls	r3, r3, #20
 8005226:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800522a:	d961      	bls.n	80052f0 <_strtod_l+0x8b8>
 800522c:	6963      	ldr	r3, [r4, #20]
 800522e:	b913      	cbnz	r3, 8005236 <_strtod_l+0x7fe>
 8005230:	6923      	ldr	r3, [r4, #16]
 8005232:	2b01      	cmp	r3, #1
 8005234:	dd5c      	ble.n	80052f0 <_strtod_l+0x8b8>
 8005236:	4621      	mov	r1, r4
 8005238:	2201      	movs	r2, #1
 800523a:	9805      	ldr	r0, [sp, #20]
 800523c:	f001 fc4a 	bl	8006ad4 <__lshift>
 8005240:	4641      	mov	r1, r8
 8005242:	4604      	mov	r4, r0
 8005244:	f001 fcb2 	bl	8006bac <__mcmp>
 8005248:	2800      	cmp	r0, #0
 800524a:	dd51      	ble.n	80052f0 <_strtod_l+0x8b8>
 800524c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005250:	9a08      	ldr	r2, [sp, #32]
 8005252:	0d1b      	lsrs	r3, r3, #20
 8005254:	051b      	lsls	r3, r3, #20
 8005256:	2a00      	cmp	r2, #0
 8005258:	d06b      	beq.n	8005332 <_strtod_l+0x8fa>
 800525a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800525e:	d868      	bhi.n	8005332 <_strtod_l+0x8fa>
 8005260:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005264:	f67f ae9d 	bls.w	8004fa2 <_strtod_l+0x56a>
 8005268:	4b0a      	ldr	r3, [pc, #40]	@ (8005294 <_strtod_l+0x85c>)
 800526a:	4650      	mov	r0, sl
 800526c:	4659      	mov	r1, fp
 800526e:	2200      	movs	r2, #0
 8005270:	f7fb f9e2 	bl	8000638 <__aeabi_dmul>
 8005274:	4b08      	ldr	r3, [pc, #32]	@ (8005298 <_strtod_l+0x860>)
 8005276:	400b      	ands	r3, r1
 8005278:	4682      	mov	sl, r0
 800527a:	468b      	mov	fp, r1
 800527c:	2b00      	cmp	r3, #0
 800527e:	f47f ae05 	bne.w	8004e8c <_strtod_l+0x454>
 8005282:	9a05      	ldr	r2, [sp, #20]
 8005284:	2322      	movs	r3, #34	@ 0x22
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e600      	b.n	8004e8c <_strtod_l+0x454>
 800528a:	bf00      	nop
 800528c:	08008348 	.word	0x08008348
 8005290:	fffffc02 	.word	0xfffffc02
 8005294:	39500000 	.word	0x39500000
 8005298:	7ff00000 	.word	0x7ff00000
 800529c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80052a0:	d165      	bne.n	800536e <_strtod_l+0x936>
 80052a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80052a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80052a8:	b35a      	cbz	r2, 8005302 <_strtod_l+0x8ca>
 80052aa:	4a9f      	ldr	r2, [pc, #636]	@ (8005528 <_strtod_l+0xaf0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d12b      	bne.n	8005308 <_strtod_l+0x8d0>
 80052b0:	9b08      	ldr	r3, [sp, #32]
 80052b2:	4651      	mov	r1, sl
 80052b4:	b303      	cbz	r3, 80052f8 <_strtod_l+0x8c0>
 80052b6:	4b9d      	ldr	r3, [pc, #628]	@ (800552c <_strtod_l+0xaf4>)
 80052b8:	465a      	mov	r2, fp
 80052ba:	4013      	ands	r3, r2
 80052bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80052c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052c4:	d81b      	bhi.n	80052fe <_strtod_l+0x8c6>
 80052c6:	0d1b      	lsrs	r3, r3, #20
 80052c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80052cc:	fa02 f303 	lsl.w	r3, r2, r3
 80052d0:	4299      	cmp	r1, r3
 80052d2:	d119      	bne.n	8005308 <_strtod_l+0x8d0>
 80052d4:	4b96      	ldr	r3, [pc, #600]	@ (8005530 <_strtod_l+0xaf8>)
 80052d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052d8:	429a      	cmp	r2, r3
 80052da:	d102      	bne.n	80052e2 <_strtod_l+0x8aa>
 80052dc:	3101      	adds	r1, #1
 80052de:	f43f adca 	beq.w	8004e76 <_strtod_l+0x43e>
 80052e2:	4b92      	ldr	r3, [pc, #584]	@ (800552c <_strtod_l+0xaf4>)
 80052e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052e6:	401a      	ands	r2, r3
 80052e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80052ec:	f04f 0a00 	mov.w	sl, #0
 80052f0:	9b08      	ldr	r3, [sp, #32]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1b8      	bne.n	8005268 <_strtod_l+0x830>
 80052f6:	e5c9      	b.n	8004e8c <_strtod_l+0x454>
 80052f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052fc:	e7e8      	b.n	80052d0 <_strtod_l+0x898>
 80052fe:	4613      	mov	r3, r2
 8005300:	e7e6      	b.n	80052d0 <_strtod_l+0x898>
 8005302:	ea53 030a 	orrs.w	r3, r3, sl
 8005306:	d0a1      	beq.n	800524c <_strtod_l+0x814>
 8005308:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800530a:	b1db      	cbz	r3, 8005344 <_strtod_l+0x90c>
 800530c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800530e:	4213      	tst	r3, r2
 8005310:	d0ee      	beq.n	80052f0 <_strtod_l+0x8b8>
 8005312:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005314:	9a08      	ldr	r2, [sp, #32]
 8005316:	4650      	mov	r0, sl
 8005318:	4659      	mov	r1, fp
 800531a:	b1bb      	cbz	r3, 800534c <_strtod_l+0x914>
 800531c:	f7ff fb6c 	bl	80049f8 <sulp>
 8005320:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005324:	ec53 2b10 	vmov	r2, r3, d0
 8005328:	f7fa ffd0 	bl	80002cc <__adddf3>
 800532c:	4682      	mov	sl, r0
 800532e:	468b      	mov	fp, r1
 8005330:	e7de      	b.n	80052f0 <_strtod_l+0x8b8>
 8005332:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005336:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800533a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800533e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005342:	e7d5      	b.n	80052f0 <_strtod_l+0x8b8>
 8005344:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005346:	ea13 0f0a 	tst.w	r3, sl
 800534a:	e7e1      	b.n	8005310 <_strtod_l+0x8d8>
 800534c:	f7ff fb54 	bl	80049f8 <sulp>
 8005350:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005354:	ec53 2b10 	vmov	r2, r3, d0
 8005358:	f7fa ffb6 	bl	80002c8 <__aeabi_dsub>
 800535c:	2200      	movs	r2, #0
 800535e:	2300      	movs	r3, #0
 8005360:	4682      	mov	sl, r0
 8005362:	468b      	mov	fp, r1
 8005364:	f7fb fbd0 	bl	8000b08 <__aeabi_dcmpeq>
 8005368:	2800      	cmp	r0, #0
 800536a:	d0c1      	beq.n	80052f0 <_strtod_l+0x8b8>
 800536c:	e619      	b.n	8004fa2 <_strtod_l+0x56a>
 800536e:	4641      	mov	r1, r8
 8005370:	4620      	mov	r0, r4
 8005372:	f001 fd93 	bl	8006e9c <__ratio>
 8005376:	ec57 6b10 	vmov	r6, r7, d0
 800537a:	2200      	movs	r2, #0
 800537c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005380:	4630      	mov	r0, r6
 8005382:	4639      	mov	r1, r7
 8005384:	f7fb fbd4 	bl	8000b30 <__aeabi_dcmple>
 8005388:	2800      	cmp	r0, #0
 800538a:	d06f      	beq.n	800546c <_strtod_l+0xa34>
 800538c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	d17a      	bne.n	8005488 <_strtod_l+0xa50>
 8005392:	f1ba 0f00 	cmp.w	sl, #0
 8005396:	d158      	bne.n	800544a <_strtod_l+0xa12>
 8005398:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800539a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d15a      	bne.n	8005458 <_strtod_l+0xa20>
 80053a2:	4b64      	ldr	r3, [pc, #400]	@ (8005534 <_strtod_l+0xafc>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	4630      	mov	r0, r6
 80053a8:	4639      	mov	r1, r7
 80053aa:	f7fb fbb7 	bl	8000b1c <__aeabi_dcmplt>
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d159      	bne.n	8005466 <_strtod_l+0xa2e>
 80053b2:	4630      	mov	r0, r6
 80053b4:	4639      	mov	r1, r7
 80053b6:	4b60      	ldr	r3, [pc, #384]	@ (8005538 <_strtod_l+0xb00>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	f7fb f93d 	bl	8000638 <__aeabi_dmul>
 80053be:	4606      	mov	r6, r0
 80053c0:	460f      	mov	r7, r1
 80053c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80053c6:	9606      	str	r6, [sp, #24]
 80053c8:	9307      	str	r3, [sp, #28]
 80053ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053ce:	4d57      	ldr	r5, [pc, #348]	@ (800552c <_strtod_l+0xaf4>)
 80053d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80053d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053d6:	401d      	ands	r5, r3
 80053d8:	4b58      	ldr	r3, [pc, #352]	@ (800553c <_strtod_l+0xb04>)
 80053da:	429d      	cmp	r5, r3
 80053dc:	f040 80b2 	bne.w	8005544 <_strtod_l+0xb0c>
 80053e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80053e6:	ec4b ab10 	vmov	d0, sl, fp
 80053ea:	f001 fc8f 	bl	8006d0c <__ulp>
 80053ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053f2:	ec51 0b10 	vmov	r0, r1, d0
 80053f6:	f7fb f91f 	bl	8000638 <__aeabi_dmul>
 80053fa:	4652      	mov	r2, sl
 80053fc:	465b      	mov	r3, fp
 80053fe:	f7fa ff65 	bl	80002cc <__adddf3>
 8005402:	460b      	mov	r3, r1
 8005404:	4949      	ldr	r1, [pc, #292]	@ (800552c <_strtod_l+0xaf4>)
 8005406:	4a4e      	ldr	r2, [pc, #312]	@ (8005540 <_strtod_l+0xb08>)
 8005408:	4019      	ands	r1, r3
 800540a:	4291      	cmp	r1, r2
 800540c:	4682      	mov	sl, r0
 800540e:	d942      	bls.n	8005496 <_strtod_l+0xa5e>
 8005410:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005412:	4b47      	ldr	r3, [pc, #284]	@ (8005530 <_strtod_l+0xaf8>)
 8005414:	429a      	cmp	r2, r3
 8005416:	d103      	bne.n	8005420 <_strtod_l+0x9e8>
 8005418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800541a:	3301      	adds	r3, #1
 800541c:	f43f ad2b 	beq.w	8004e76 <_strtod_l+0x43e>
 8005420:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005530 <_strtod_l+0xaf8>
 8005424:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005428:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800542a:	9805      	ldr	r0, [sp, #20]
 800542c:	f001 f93a 	bl	80066a4 <_Bfree>
 8005430:	9805      	ldr	r0, [sp, #20]
 8005432:	4649      	mov	r1, r9
 8005434:	f001 f936 	bl	80066a4 <_Bfree>
 8005438:	9805      	ldr	r0, [sp, #20]
 800543a:	4641      	mov	r1, r8
 800543c:	f001 f932 	bl	80066a4 <_Bfree>
 8005440:	9805      	ldr	r0, [sp, #20]
 8005442:	4621      	mov	r1, r4
 8005444:	f001 f92e 	bl	80066a4 <_Bfree>
 8005448:	e618      	b.n	800507c <_strtod_l+0x644>
 800544a:	f1ba 0f01 	cmp.w	sl, #1
 800544e:	d103      	bne.n	8005458 <_strtod_l+0xa20>
 8005450:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005452:	2b00      	cmp	r3, #0
 8005454:	f43f ada5 	beq.w	8004fa2 <_strtod_l+0x56a>
 8005458:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005508 <_strtod_l+0xad0>
 800545c:	4f35      	ldr	r7, [pc, #212]	@ (8005534 <_strtod_l+0xafc>)
 800545e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005462:	2600      	movs	r6, #0
 8005464:	e7b1      	b.n	80053ca <_strtod_l+0x992>
 8005466:	4f34      	ldr	r7, [pc, #208]	@ (8005538 <_strtod_l+0xb00>)
 8005468:	2600      	movs	r6, #0
 800546a:	e7aa      	b.n	80053c2 <_strtod_l+0x98a>
 800546c:	4b32      	ldr	r3, [pc, #200]	@ (8005538 <_strtod_l+0xb00>)
 800546e:	4630      	mov	r0, r6
 8005470:	4639      	mov	r1, r7
 8005472:	2200      	movs	r2, #0
 8005474:	f7fb f8e0 	bl	8000638 <__aeabi_dmul>
 8005478:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800547a:	4606      	mov	r6, r0
 800547c:	460f      	mov	r7, r1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d09f      	beq.n	80053c2 <_strtod_l+0x98a>
 8005482:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005486:	e7a0      	b.n	80053ca <_strtod_l+0x992>
 8005488:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005510 <_strtod_l+0xad8>
 800548c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005490:	ec57 6b17 	vmov	r6, r7, d7
 8005494:	e799      	b.n	80053ca <_strtod_l+0x992>
 8005496:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800549a:	9b08      	ldr	r3, [sp, #32]
 800549c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1c1      	bne.n	8005428 <_strtod_l+0x9f0>
 80054a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80054a8:	0d1b      	lsrs	r3, r3, #20
 80054aa:	051b      	lsls	r3, r3, #20
 80054ac:	429d      	cmp	r5, r3
 80054ae:	d1bb      	bne.n	8005428 <_strtod_l+0x9f0>
 80054b0:	4630      	mov	r0, r6
 80054b2:	4639      	mov	r1, r7
 80054b4:	f7fb fbe2 	bl	8000c7c <__aeabi_d2lz>
 80054b8:	f7fb f890 	bl	80005dc <__aeabi_l2d>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4630      	mov	r0, r6
 80054c2:	4639      	mov	r1, r7
 80054c4:	f7fa ff00 	bl	80002c8 <__aeabi_dsub>
 80054c8:	460b      	mov	r3, r1
 80054ca:	4602      	mov	r2, r0
 80054cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80054d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80054d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054d6:	ea46 060a 	orr.w	r6, r6, sl
 80054da:	431e      	orrs	r6, r3
 80054dc:	d06f      	beq.n	80055be <_strtod_l+0xb86>
 80054de:	a30e      	add	r3, pc, #56	@ (adr r3, 8005518 <_strtod_l+0xae0>)
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	f7fb fb1a 	bl	8000b1c <__aeabi_dcmplt>
 80054e8:	2800      	cmp	r0, #0
 80054ea:	f47f accf 	bne.w	8004e8c <_strtod_l+0x454>
 80054ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8005520 <_strtod_l+0xae8>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054f8:	f7fb fb2e 	bl	8000b58 <__aeabi_dcmpgt>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d093      	beq.n	8005428 <_strtod_l+0x9f0>
 8005500:	e4c4      	b.n	8004e8c <_strtod_l+0x454>
 8005502:	bf00      	nop
 8005504:	f3af 8000 	nop.w
 8005508:	00000000 	.word	0x00000000
 800550c:	bff00000 	.word	0xbff00000
 8005510:	00000000 	.word	0x00000000
 8005514:	3ff00000 	.word	0x3ff00000
 8005518:	94a03595 	.word	0x94a03595
 800551c:	3fdfffff 	.word	0x3fdfffff
 8005520:	35afe535 	.word	0x35afe535
 8005524:	3fe00000 	.word	0x3fe00000
 8005528:	000fffff 	.word	0x000fffff
 800552c:	7ff00000 	.word	0x7ff00000
 8005530:	7fefffff 	.word	0x7fefffff
 8005534:	3ff00000 	.word	0x3ff00000
 8005538:	3fe00000 	.word	0x3fe00000
 800553c:	7fe00000 	.word	0x7fe00000
 8005540:	7c9fffff 	.word	0x7c9fffff
 8005544:	9b08      	ldr	r3, [sp, #32]
 8005546:	b323      	cbz	r3, 8005592 <_strtod_l+0xb5a>
 8005548:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800554c:	d821      	bhi.n	8005592 <_strtod_l+0xb5a>
 800554e:	a328      	add	r3, pc, #160	@ (adr r3, 80055f0 <_strtod_l+0xbb8>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	4630      	mov	r0, r6
 8005556:	4639      	mov	r1, r7
 8005558:	f7fb faea 	bl	8000b30 <__aeabi_dcmple>
 800555c:	b1a0      	cbz	r0, 8005588 <_strtod_l+0xb50>
 800555e:	4639      	mov	r1, r7
 8005560:	4630      	mov	r0, r6
 8005562:	f7fb fb03 	bl	8000b6c <__aeabi_d2uiz>
 8005566:	2801      	cmp	r0, #1
 8005568:	bf38      	it	cc
 800556a:	2001      	movcc	r0, #1
 800556c:	f7fa ffea 	bl	8000544 <__aeabi_ui2d>
 8005570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005572:	4606      	mov	r6, r0
 8005574:	460f      	mov	r7, r1
 8005576:	b9fb      	cbnz	r3, 80055b8 <_strtod_l+0xb80>
 8005578:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800557c:	9014      	str	r0, [sp, #80]	@ 0x50
 800557e:	9315      	str	r3, [sp, #84]	@ 0x54
 8005580:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005584:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005588:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800558a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800558e:	1b5b      	subs	r3, r3, r5
 8005590:	9311      	str	r3, [sp, #68]	@ 0x44
 8005592:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005596:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800559a:	f001 fbb7 	bl	8006d0c <__ulp>
 800559e:	4650      	mov	r0, sl
 80055a0:	ec53 2b10 	vmov	r2, r3, d0
 80055a4:	4659      	mov	r1, fp
 80055a6:	f7fb f847 	bl	8000638 <__aeabi_dmul>
 80055aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80055ae:	f7fa fe8d 	bl	80002cc <__adddf3>
 80055b2:	4682      	mov	sl, r0
 80055b4:	468b      	mov	fp, r1
 80055b6:	e770      	b.n	800549a <_strtod_l+0xa62>
 80055b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80055bc:	e7e0      	b.n	8005580 <_strtod_l+0xb48>
 80055be:	a30e      	add	r3, pc, #56	@ (adr r3, 80055f8 <_strtod_l+0xbc0>)
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f7fb faaa 	bl	8000b1c <__aeabi_dcmplt>
 80055c8:	e798      	b.n	80054fc <_strtod_l+0xac4>
 80055ca:	2300      	movs	r3, #0
 80055cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80055d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	f7ff ba6d 	b.w	8004ab2 <_strtod_l+0x7a>
 80055d8:	2a65      	cmp	r2, #101	@ 0x65
 80055da:	f43f ab66 	beq.w	8004caa <_strtod_l+0x272>
 80055de:	2a45      	cmp	r2, #69	@ 0x45
 80055e0:	f43f ab63 	beq.w	8004caa <_strtod_l+0x272>
 80055e4:	2301      	movs	r3, #1
 80055e6:	f7ff bb9e 	b.w	8004d26 <_strtod_l+0x2ee>
 80055ea:	bf00      	nop
 80055ec:	f3af 8000 	nop.w
 80055f0:	ffc00000 	.word	0xffc00000
 80055f4:	41dfffff 	.word	0x41dfffff
 80055f8:	94a03595 	.word	0x94a03595
 80055fc:	3fcfffff 	.word	0x3fcfffff

08005600 <strtod>:
 8005600:	460a      	mov	r2, r1
 8005602:	4601      	mov	r1, r0
 8005604:	4802      	ldr	r0, [pc, #8]	@ (8005610 <strtod+0x10>)
 8005606:	4b03      	ldr	r3, [pc, #12]	@ (8005614 <strtod+0x14>)
 8005608:	6800      	ldr	r0, [r0, #0]
 800560a:	f7ff ba15 	b.w	8004a38 <_strtod_l>
 800560e:	bf00      	nop
 8005610:	20000190 	.word	0x20000190
 8005614:	20000024 	.word	0x20000024

08005618 <_fwalk_sglue>:
 8005618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800561c:	4607      	mov	r7, r0
 800561e:	4688      	mov	r8, r1
 8005620:	4614      	mov	r4, r2
 8005622:	2600      	movs	r6, #0
 8005624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005628:	f1b9 0901 	subs.w	r9, r9, #1
 800562c:	d505      	bpl.n	800563a <_fwalk_sglue+0x22>
 800562e:	6824      	ldr	r4, [r4, #0]
 8005630:	2c00      	cmp	r4, #0
 8005632:	d1f7      	bne.n	8005624 <_fwalk_sglue+0xc>
 8005634:	4630      	mov	r0, r6
 8005636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800563a:	89ab      	ldrh	r3, [r5, #12]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d907      	bls.n	8005650 <_fwalk_sglue+0x38>
 8005640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005644:	3301      	adds	r3, #1
 8005646:	d003      	beq.n	8005650 <_fwalk_sglue+0x38>
 8005648:	4629      	mov	r1, r5
 800564a:	4638      	mov	r0, r7
 800564c:	47c0      	blx	r8
 800564e:	4306      	orrs	r6, r0
 8005650:	3568      	adds	r5, #104	@ 0x68
 8005652:	e7e9      	b.n	8005628 <_fwalk_sglue+0x10>

08005654 <strncmp>:
 8005654:	b510      	push	{r4, lr}
 8005656:	b16a      	cbz	r2, 8005674 <strncmp+0x20>
 8005658:	3901      	subs	r1, #1
 800565a:	1884      	adds	r4, r0, r2
 800565c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005660:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005664:	429a      	cmp	r2, r3
 8005666:	d103      	bne.n	8005670 <strncmp+0x1c>
 8005668:	42a0      	cmp	r0, r4
 800566a:	d001      	beq.n	8005670 <strncmp+0x1c>
 800566c:	2a00      	cmp	r2, #0
 800566e:	d1f5      	bne.n	800565c <strncmp+0x8>
 8005670:	1ad0      	subs	r0, r2, r3
 8005672:	bd10      	pop	{r4, pc}
 8005674:	4610      	mov	r0, r2
 8005676:	e7fc      	b.n	8005672 <strncmp+0x1e>

08005678 <memset>:
 8005678:	4402      	add	r2, r0
 800567a:	4603      	mov	r3, r0
 800567c:	4293      	cmp	r3, r2
 800567e:	d100      	bne.n	8005682 <memset+0xa>
 8005680:	4770      	bx	lr
 8005682:	f803 1b01 	strb.w	r1, [r3], #1
 8005686:	e7f9      	b.n	800567c <memset+0x4>

08005688 <__errno>:
 8005688:	4b01      	ldr	r3, [pc, #4]	@ (8005690 <__errno+0x8>)
 800568a:	6818      	ldr	r0, [r3, #0]
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	20000190 	.word	0x20000190

08005694 <__libc_init_array>:
 8005694:	b570      	push	{r4, r5, r6, lr}
 8005696:	4d0d      	ldr	r5, [pc, #52]	@ (80056cc <__libc_init_array+0x38>)
 8005698:	4c0d      	ldr	r4, [pc, #52]	@ (80056d0 <__libc_init_array+0x3c>)
 800569a:	1b64      	subs	r4, r4, r5
 800569c:	10a4      	asrs	r4, r4, #2
 800569e:	2600      	movs	r6, #0
 80056a0:	42a6      	cmp	r6, r4
 80056a2:	d109      	bne.n	80056b8 <__libc_init_array+0x24>
 80056a4:	4d0b      	ldr	r5, [pc, #44]	@ (80056d4 <__libc_init_array+0x40>)
 80056a6:	4c0c      	ldr	r4, [pc, #48]	@ (80056d8 <__libc_init_array+0x44>)
 80056a8:	f002 fdd8 	bl	800825c <_init>
 80056ac:	1b64      	subs	r4, r4, r5
 80056ae:	10a4      	asrs	r4, r4, #2
 80056b0:	2600      	movs	r6, #0
 80056b2:	42a6      	cmp	r6, r4
 80056b4:	d105      	bne.n	80056c2 <__libc_init_array+0x2e>
 80056b6:	bd70      	pop	{r4, r5, r6, pc}
 80056b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80056bc:	4798      	blx	r3
 80056be:	3601      	adds	r6, #1
 80056c0:	e7ee      	b.n	80056a0 <__libc_init_array+0xc>
 80056c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c6:	4798      	blx	r3
 80056c8:	3601      	adds	r6, #1
 80056ca:	e7f2      	b.n	80056b2 <__libc_init_array+0x1e>
 80056cc:	08008aa4 	.word	0x08008aa4
 80056d0:	08008aa4 	.word	0x08008aa4
 80056d4:	08008aa4 	.word	0x08008aa4
 80056d8:	08008aa8 	.word	0x08008aa8

080056dc <__retarget_lock_init_recursive>:
 80056dc:	4770      	bx	lr

080056de <__retarget_lock_acquire_recursive>:
 80056de:	4770      	bx	lr

080056e0 <__retarget_lock_release_recursive>:
 80056e0:	4770      	bx	lr

080056e2 <memcpy>:
 80056e2:	440a      	add	r2, r1
 80056e4:	4291      	cmp	r1, r2
 80056e6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80056ea:	d100      	bne.n	80056ee <memcpy+0xc>
 80056ec:	4770      	bx	lr
 80056ee:	b510      	push	{r4, lr}
 80056f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056f8:	4291      	cmp	r1, r2
 80056fa:	d1f9      	bne.n	80056f0 <memcpy+0xe>
 80056fc:	bd10      	pop	{r4, pc}
	...

08005700 <nan>:
 8005700:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005708 <nan+0x8>
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	00000000 	.word	0x00000000
 800570c:	7ff80000 	.word	0x7ff80000

08005710 <rshift>:
 8005710:	6903      	ldr	r3, [r0, #16]
 8005712:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005716:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800571a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800571e:	f100 0414 	add.w	r4, r0, #20
 8005722:	dd45      	ble.n	80057b0 <rshift+0xa0>
 8005724:	f011 011f 	ands.w	r1, r1, #31
 8005728:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800572c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005730:	d10c      	bne.n	800574c <rshift+0x3c>
 8005732:	f100 0710 	add.w	r7, r0, #16
 8005736:	4629      	mov	r1, r5
 8005738:	42b1      	cmp	r1, r6
 800573a:	d334      	bcc.n	80057a6 <rshift+0x96>
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	1eea      	subs	r2, r5, #3
 8005742:	4296      	cmp	r6, r2
 8005744:	bf38      	it	cc
 8005746:	2300      	movcc	r3, #0
 8005748:	4423      	add	r3, r4
 800574a:	e015      	b.n	8005778 <rshift+0x68>
 800574c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005750:	f1c1 0820 	rsb	r8, r1, #32
 8005754:	40cf      	lsrs	r7, r1
 8005756:	f105 0e04 	add.w	lr, r5, #4
 800575a:	46a1      	mov	r9, r4
 800575c:	4576      	cmp	r6, lr
 800575e:	46f4      	mov	ip, lr
 8005760:	d815      	bhi.n	800578e <rshift+0x7e>
 8005762:	1a9a      	subs	r2, r3, r2
 8005764:	0092      	lsls	r2, r2, #2
 8005766:	3a04      	subs	r2, #4
 8005768:	3501      	adds	r5, #1
 800576a:	42ae      	cmp	r6, r5
 800576c:	bf38      	it	cc
 800576e:	2200      	movcc	r2, #0
 8005770:	18a3      	adds	r3, r4, r2
 8005772:	50a7      	str	r7, [r4, r2]
 8005774:	b107      	cbz	r7, 8005778 <rshift+0x68>
 8005776:	3304      	adds	r3, #4
 8005778:	1b1a      	subs	r2, r3, r4
 800577a:	42a3      	cmp	r3, r4
 800577c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005780:	bf08      	it	eq
 8005782:	2300      	moveq	r3, #0
 8005784:	6102      	str	r2, [r0, #16]
 8005786:	bf08      	it	eq
 8005788:	6143      	streq	r3, [r0, #20]
 800578a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800578e:	f8dc c000 	ldr.w	ip, [ip]
 8005792:	fa0c fc08 	lsl.w	ip, ip, r8
 8005796:	ea4c 0707 	orr.w	r7, ip, r7
 800579a:	f849 7b04 	str.w	r7, [r9], #4
 800579e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057a2:	40cf      	lsrs	r7, r1
 80057a4:	e7da      	b.n	800575c <rshift+0x4c>
 80057a6:	f851 cb04 	ldr.w	ip, [r1], #4
 80057aa:	f847 cf04 	str.w	ip, [r7, #4]!
 80057ae:	e7c3      	b.n	8005738 <rshift+0x28>
 80057b0:	4623      	mov	r3, r4
 80057b2:	e7e1      	b.n	8005778 <rshift+0x68>

080057b4 <__hexdig_fun>:
 80057b4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80057b8:	2b09      	cmp	r3, #9
 80057ba:	d802      	bhi.n	80057c2 <__hexdig_fun+0xe>
 80057bc:	3820      	subs	r0, #32
 80057be:	b2c0      	uxtb	r0, r0
 80057c0:	4770      	bx	lr
 80057c2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80057c6:	2b05      	cmp	r3, #5
 80057c8:	d801      	bhi.n	80057ce <__hexdig_fun+0x1a>
 80057ca:	3847      	subs	r0, #71	@ 0x47
 80057cc:	e7f7      	b.n	80057be <__hexdig_fun+0xa>
 80057ce:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80057d2:	2b05      	cmp	r3, #5
 80057d4:	d801      	bhi.n	80057da <__hexdig_fun+0x26>
 80057d6:	3827      	subs	r0, #39	@ 0x27
 80057d8:	e7f1      	b.n	80057be <__hexdig_fun+0xa>
 80057da:	2000      	movs	r0, #0
 80057dc:	4770      	bx	lr
	...

080057e0 <__gethex>:
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	b085      	sub	sp, #20
 80057e6:	468a      	mov	sl, r1
 80057e8:	9302      	str	r3, [sp, #8]
 80057ea:	680b      	ldr	r3, [r1, #0]
 80057ec:	9001      	str	r0, [sp, #4]
 80057ee:	4690      	mov	r8, r2
 80057f0:	1c9c      	adds	r4, r3, #2
 80057f2:	46a1      	mov	r9, r4
 80057f4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80057f8:	2830      	cmp	r0, #48	@ 0x30
 80057fa:	d0fa      	beq.n	80057f2 <__gethex+0x12>
 80057fc:	eba9 0303 	sub.w	r3, r9, r3
 8005800:	f1a3 0b02 	sub.w	fp, r3, #2
 8005804:	f7ff ffd6 	bl	80057b4 <__hexdig_fun>
 8005808:	4605      	mov	r5, r0
 800580a:	2800      	cmp	r0, #0
 800580c:	d168      	bne.n	80058e0 <__gethex+0x100>
 800580e:	49a0      	ldr	r1, [pc, #640]	@ (8005a90 <__gethex+0x2b0>)
 8005810:	2201      	movs	r2, #1
 8005812:	4648      	mov	r0, r9
 8005814:	f7ff ff1e 	bl	8005654 <strncmp>
 8005818:	4607      	mov	r7, r0
 800581a:	2800      	cmp	r0, #0
 800581c:	d167      	bne.n	80058ee <__gethex+0x10e>
 800581e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005822:	4626      	mov	r6, r4
 8005824:	f7ff ffc6 	bl	80057b4 <__hexdig_fun>
 8005828:	2800      	cmp	r0, #0
 800582a:	d062      	beq.n	80058f2 <__gethex+0x112>
 800582c:	4623      	mov	r3, r4
 800582e:	7818      	ldrb	r0, [r3, #0]
 8005830:	2830      	cmp	r0, #48	@ 0x30
 8005832:	4699      	mov	r9, r3
 8005834:	f103 0301 	add.w	r3, r3, #1
 8005838:	d0f9      	beq.n	800582e <__gethex+0x4e>
 800583a:	f7ff ffbb 	bl	80057b4 <__hexdig_fun>
 800583e:	fab0 f580 	clz	r5, r0
 8005842:	096d      	lsrs	r5, r5, #5
 8005844:	f04f 0b01 	mov.w	fp, #1
 8005848:	464a      	mov	r2, r9
 800584a:	4616      	mov	r6, r2
 800584c:	3201      	adds	r2, #1
 800584e:	7830      	ldrb	r0, [r6, #0]
 8005850:	f7ff ffb0 	bl	80057b4 <__hexdig_fun>
 8005854:	2800      	cmp	r0, #0
 8005856:	d1f8      	bne.n	800584a <__gethex+0x6a>
 8005858:	498d      	ldr	r1, [pc, #564]	@ (8005a90 <__gethex+0x2b0>)
 800585a:	2201      	movs	r2, #1
 800585c:	4630      	mov	r0, r6
 800585e:	f7ff fef9 	bl	8005654 <strncmp>
 8005862:	2800      	cmp	r0, #0
 8005864:	d13f      	bne.n	80058e6 <__gethex+0x106>
 8005866:	b944      	cbnz	r4, 800587a <__gethex+0x9a>
 8005868:	1c74      	adds	r4, r6, #1
 800586a:	4622      	mov	r2, r4
 800586c:	4616      	mov	r6, r2
 800586e:	3201      	adds	r2, #1
 8005870:	7830      	ldrb	r0, [r6, #0]
 8005872:	f7ff ff9f 	bl	80057b4 <__hexdig_fun>
 8005876:	2800      	cmp	r0, #0
 8005878:	d1f8      	bne.n	800586c <__gethex+0x8c>
 800587a:	1ba4      	subs	r4, r4, r6
 800587c:	00a7      	lsls	r7, r4, #2
 800587e:	7833      	ldrb	r3, [r6, #0]
 8005880:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005884:	2b50      	cmp	r3, #80	@ 0x50
 8005886:	d13e      	bne.n	8005906 <__gethex+0x126>
 8005888:	7873      	ldrb	r3, [r6, #1]
 800588a:	2b2b      	cmp	r3, #43	@ 0x2b
 800588c:	d033      	beq.n	80058f6 <__gethex+0x116>
 800588e:	2b2d      	cmp	r3, #45	@ 0x2d
 8005890:	d034      	beq.n	80058fc <__gethex+0x11c>
 8005892:	1c71      	adds	r1, r6, #1
 8005894:	2400      	movs	r4, #0
 8005896:	7808      	ldrb	r0, [r1, #0]
 8005898:	f7ff ff8c 	bl	80057b4 <__hexdig_fun>
 800589c:	1e43      	subs	r3, r0, #1
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b18      	cmp	r3, #24
 80058a2:	d830      	bhi.n	8005906 <__gethex+0x126>
 80058a4:	f1a0 0210 	sub.w	r2, r0, #16
 80058a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80058ac:	f7ff ff82 	bl	80057b4 <__hexdig_fun>
 80058b0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80058b4:	fa5f fc8c 	uxtb.w	ip, ip
 80058b8:	f1bc 0f18 	cmp.w	ip, #24
 80058bc:	f04f 030a 	mov.w	r3, #10
 80058c0:	d91e      	bls.n	8005900 <__gethex+0x120>
 80058c2:	b104      	cbz	r4, 80058c6 <__gethex+0xe6>
 80058c4:	4252      	negs	r2, r2
 80058c6:	4417      	add	r7, r2
 80058c8:	f8ca 1000 	str.w	r1, [sl]
 80058cc:	b1ed      	cbz	r5, 800590a <__gethex+0x12a>
 80058ce:	f1bb 0f00 	cmp.w	fp, #0
 80058d2:	bf0c      	ite	eq
 80058d4:	2506      	moveq	r5, #6
 80058d6:	2500      	movne	r5, #0
 80058d8:	4628      	mov	r0, r5
 80058da:	b005      	add	sp, #20
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	2500      	movs	r5, #0
 80058e2:	462c      	mov	r4, r5
 80058e4:	e7b0      	b.n	8005848 <__gethex+0x68>
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d1c7      	bne.n	800587a <__gethex+0x9a>
 80058ea:	4627      	mov	r7, r4
 80058ec:	e7c7      	b.n	800587e <__gethex+0x9e>
 80058ee:	464e      	mov	r6, r9
 80058f0:	462f      	mov	r7, r5
 80058f2:	2501      	movs	r5, #1
 80058f4:	e7c3      	b.n	800587e <__gethex+0x9e>
 80058f6:	2400      	movs	r4, #0
 80058f8:	1cb1      	adds	r1, r6, #2
 80058fa:	e7cc      	b.n	8005896 <__gethex+0xb6>
 80058fc:	2401      	movs	r4, #1
 80058fe:	e7fb      	b.n	80058f8 <__gethex+0x118>
 8005900:	fb03 0002 	mla	r0, r3, r2, r0
 8005904:	e7ce      	b.n	80058a4 <__gethex+0xc4>
 8005906:	4631      	mov	r1, r6
 8005908:	e7de      	b.n	80058c8 <__gethex+0xe8>
 800590a:	eba6 0309 	sub.w	r3, r6, r9
 800590e:	3b01      	subs	r3, #1
 8005910:	4629      	mov	r1, r5
 8005912:	2b07      	cmp	r3, #7
 8005914:	dc0a      	bgt.n	800592c <__gethex+0x14c>
 8005916:	9801      	ldr	r0, [sp, #4]
 8005918:	f000 fe84 	bl	8006624 <_Balloc>
 800591c:	4604      	mov	r4, r0
 800591e:	b940      	cbnz	r0, 8005932 <__gethex+0x152>
 8005920:	4b5c      	ldr	r3, [pc, #368]	@ (8005a94 <__gethex+0x2b4>)
 8005922:	4602      	mov	r2, r0
 8005924:	21e4      	movs	r1, #228	@ 0xe4
 8005926:	485c      	ldr	r0, [pc, #368]	@ (8005a98 <__gethex+0x2b8>)
 8005928:	f001 fc1c 	bl	8007164 <__assert_func>
 800592c:	3101      	adds	r1, #1
 800592e:	105b      	asrs	r3, r3, #1
 8005930:	e7ef      	b.n	8005912 <__gethex+0x132>
 8005932:	f100 0a14 	add.w	sl, r0, #20
 8005936:	2300      	movs	r3, #0
 8005938:	4655      	mov	r5, sl
 800593a:	469b      	mov	fp, r3
 800593c:	45b1      	cmp	r9, r6
 800593e:	d337      	bcc.n	80059b0 <__gethex+0x1d0>
 8005940:	f845 bb04 	str.w	fp, [r5], #4
 8005944:	eba5 050a 	sub.w	r5, r5, sl
 8005948:	10ad      	asrs	r5, r5, #2
 800594a:	6125      	str	r5, [r4, #16]
 800594c:	4658      	mov	r0, fp
 800594e:	f000 ff5b 	bl	8006808 <__hi0bits>
 8005952:	016d      	lsls	r5, r5, #5
 8005954:	f8d8 6000 	ldr.w	r6, [r8]
 8005958:	1a2d      	subs	r5, r5, r0
 800595a:	42b5      	cmp	r5, r6
 800595c:	dd54      	ble.n	8005a08 <__gethex+0x228>
 800595e:	1bad      	subs	r5, r5, r6
 8005960:	4629      	mov	r1, r5
 8005962:	4620      	mov	r0, r4
 8005964:	f001 faef 	bl	8006f46 <__any_on>
 8005968:	4681      	mov	r9, r0
 800596a:	b178      	cbz	r0, 800598c <__gethex+0x1ac>
 800596c:	1e6b      	subs	r3, r5, #1
 800596e:	1159      	asrs	r1, r3, #5
 8005970:	f003 021f 	and.w	r2, r3, #31
 8005974:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005978:	f04f 0901 	mov.w	r9, #1
 800597c:	fa09 f202 	lsl.w	r2, r9, r2
 8005980:	420a      	tst	r2, r1
 8005982:	d003      	beq.n	800598c <__gethex+0x1ac>
 8005984:	454b      	cmp	r3, r9
 8005986:	dc36      	bgt.n	80059f6 <__gethex+0x216>
 8005988:	f04f 0902 	mov.w	r9, #2
 800598c:	4629      	mov	r1, r5
 800598e:	4620      	mov	r0, r4
 8005990:	f7ff febe 	bl	8005710 <rshift>
 8005994:	442f      	add	r7, r5
 8005996:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800599a:	42bb      	cmp	r3, r7
 800599c:	da42      	bge.n	8005a24 <__gethex+0x244>
 800599e:	9801      	ldr	r0, [sp, #4]
 80059a0:	4621      	mov	r1, r4
 80059a2:	f000 fe7f 	bl	80066a4 <_Bfree>
 80059a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059a8:	2300      	movs	r3, #0
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	25a3      	movs	r5, #163	@ 0xa3
 80059ae:	e793      	b.n	80058d8 <__gethex+0xf8>
 80059b0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80059b4:	2a2e      	cmp	r2, #46	@ 0x2e
 80059b6:	d012      	beq.n	80059de <__gethex+0x1fe>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d104      	bne.n	80059c6 <__gethex+0x1e6>
 80059bc:	f845 bb04 	str.w	fp, [r5], #4
 80059c0:	f04f 0b00 	mov.w	fp, #0
 80059c4:	465b      	mov	r3, fp
 80059c6:	7830      	ldrb	r0, [r6, #0]
 80059c8:	9303      	str	r3, [sp, #12]
 80059ca:	f7ff fef3 	bl	80057b4 <__hexdig_fun>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	f000 000f 	and.w	r0, r0, #15
 80059d4:	4098      	lsls	r0, r3
 80059d6:	ea4b 0b00 	orr.w	fp, fp, r0
 80059da:	3304      	adds	r3, #4
 80059dc:	e7ae      	b.n	800593c <__gethex+0x15c>
 80059de:	45b1      	cmp	r9, r6
 80059e0:	d8ea      	bhi.n	80059b8 <__gethex+0x1d8>
 80059e2:	492b      	ldr	r1, [pc, #172]	@ (8005a90 <__gethex+0x2b0>)
 80059e4:	9303      	str	r3, [sp, #12]
 80059e6:	2201      	movs	r2, #1
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff fe33 	bl	8005654 <strncmp>
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1e1      	bne.n	80059b8 <__gethex+0x1d8>
 80059f4:	e7a2      	b.n	800593c <__gethex+0x15c>
 80059f6:	1ea9      	subs	r1, r5, #2
 80059f8:	4620      	mov	r0, r4
 80059fa:	f001 faa4 	bl	8006f46 <__any_on>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0c2      	beq.n	8005988 <__gethex+0x1a8>
 8005a02:	f04f 0903 	mov.w	r9, #3
 8005a06:	e7c1      	b.n	800598c <__gethex+0x1ac>
 8005a08:	da09      	bge.n	8005a1e <__gethex+0x23e>
 8005a0a:	1b75      	subs	r5, r6, r5
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	9801      	ldr	r0, [sp, #4]
 8005a10:	462a      	mov	r2, r5
 8005a12:	f001 f85f 	bl	8006ad4 <__lshift>
 8005a16:	1b7f      	subs	r7, r7, r5
 8005a18:	4604      	mov	r4, r0
 8005a1a:	f100 0a14 	add.w	sl, r0, #20
 8005a1e:	f04f 0900 	mov.w	r9, #0
 8005a22:	e7b8      	b.n	8005996 <__gethex+0x1b6>
 8005a24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005a28:	42bd      	cmp	r5, r7
 8005a2a:	dd6f      	ble.n	8005b0c <__gethex+0x32c>
 8005a2c:	1bed      	subs	r5, r5, r7
 8005a2e:	42ae      	cmp	r6, r5
 8005a30:	dc34      	bgt.n	8005a9c <__gethex+0x2bc>
 8005a32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d022      	beq.n	8005a80 <__gethex+0x2a0>
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d024      	beq.n	8005a88 <__gethex+0x2a8>
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d115      	bne.n	8005a6e <__gethex+0x28e>
 8005a42:	42ae      	cmp	r6, r5
 8005a44:	d113      	bne.n	8005a6e <__gethex+0x28e>
 8005a46:	2e01      	cmp	r6, #1
 8005a48:	d10b      	bne.n	8005a62 <__gethex+0x282>
 8005a4a:	9a02      	ldr	r2, [sp, #8]
 8005a4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a50:	6013      	str	r3, [r2, #0]
 8005a52:	2301      	movs	r3, #1
 8005a54:	6123      	str	r3, [r4, #16]
 8005a56:	f8ca 3000 	str.w	r3, [sl]
 8005a5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a5c:	2562      	movs	r5, #98	@ 0x62
 8005a5e:	601c      	str	r4, [r3, #0]
 8005a60:	e73a      	b.n	80058d8 <__gethex+0xf8>
 8005a62:	1e71      	subs	r1, r6, #1
 8005a64:	4620      	mov	r0, r4
 8005a66:	f001 fa6e 	bl	8006f46 <__any_on>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d1ed      	bne.n	8005a4a <__gethex+0x26a>
 8005a6e:	9801      	ldr	r0, [sp, #4]
 8005a70:	4621      	mov	r1, r4
 8005a72:	f000 fe17 	bl	80066a4 <_Bfree>
 8005a76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6013      	str	r3, [r2, #0]
 8005a7c:	2550      	movs	r5, #80	@ 0x50
 8005a7e:	e72b      	b.n	80058d8 <__gethex+0xf8>
 8005a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f3      	bne.n	8005a6e <__gethex+0x28e>
 8005a86:	e7e0      	b.n	8005a4a <__gethex+0x26a>
 8005a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1dd      	bne.n	8005a4a <__gethex+0x26a>
 8005a8e:	e7ee      	b.n	8005a6e <__gethex+0x28e>
 8005a90:	08008310 	.word	0x08008310
 8005a94:	08008479 	.word	0x08008479
 8005a98:	0800848a 	.word	0x0800848a
 8005a9c:	1e6f      	subs	r7, r5, #1
 8005a9e:	f1b9 0f00 	cmp.w	r9, #0
 8005aa2:	d130      	bne.n	8005b06 <__gethex+0x326>
 8005aa4:	b127      	cbz	r7, 8005ab0 <__gethex+0x2d0>
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f001 fa4c 	bl	8006f46 <__any_on>
 8005aae:	4681      	mov	r9, r0
 8005ab0:	117a      	asrs	r2, r7, #5
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005ab8:	f007 071f 	and.w	r7, r7, #31
 8005abc:	40bb      	lsls	r3, r7
 8005abe:	4213      	tst	r3, r2
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	bf18      	it	ne
 8005ac6:	f049 0902 	orrne.w	r9, r9, #2
 8005aca:	f7ff fe21 	bl	8005710 <rshift>
 8005ace:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005ad2:	1b76      	subs	r6, r6, r5
 8005ad4:	2502      	movs	r5, #2
 8005ad6:	f1b9 0f00 	cmp.w	r9, #0
 8005ada:	d047      	beq.n	8005b6c <__gethex+0x38c>
 8005adc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d015      	beq.n	8005b10 <__gethex+0x330>
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d017      	beq.n	8005b18 <__gethex+0x338>
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d109      	bne.n	8005b00 <__gethex+0x320>
 8005aec:	f019 0f02 	tst.w	r9, #2
 8005af0:	d006      	beq.n	8005b00 <__gethex+0x320>
 8005af2:	f8da 3000 	ldr.w	r3, [sl]
 8005af6:	ea49 0903 	orr.w	r9, r9, r3
 8005afa:	f019 0f01 	tst.w	r9, #1
 8005afe:	d10e      	bne.n	8005b1e <__gethex+0x33e>
 8005b00:	f045 0510 	orr.w	r5, r5, #16
 8005b04:	e032      	b.n	8005b6c <__gethex+0x38c>
 8005b06:	f04f 0901 	mov.w	r9, #1
 8005b0a:	e7d1      	b.n	8005ab0 <__gethex+0x2d0>
 8005b0c:	2501      	movs	r5, #1
 8005b0e:	e7e2      	b.n	8005ad6 <__gethex+0x2f6>
 8005b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b12:	f1c3 0301 	rsb	r3, r3, #1
 8005b16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <__gethex+0x320>
 8005b1e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005b22:	f104 0314 	add.w	r3, r4, #20
 8005b26:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005b2a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005b2e:	f04f 0c00 	mov.w	ip, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b38:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8005b3c:	d01b      	beq.n	8005b76 <__gethex+0x396>
 8005b3e:	3201      	adds	r2, #1
 8005b40:	6002      	str	r2, [r0, #0]
 8005b42:	2d02      	cmp	r5, #2
 8005b44:	f104 0314 	add.w	r3, r4, #20
 8005b48:	d13c      	bne.n	8005bc4 <__gethex+0x3e4>
 8005b4a:	f8d8 2000 	ldr.w	r2, [r8]
 8005b4e:	3a01      	subs	r2, #1
 8005b50:	42b2      	cmp	r2, r6
 8005b52:	d109      	bne.n	8005b68 <__gethex+0x388>
 8005b54:	1171      	asrs	r1, r6, #5
 8005b56:	2201      	movs	r2, #1
 8005b58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b5c:	f006 061f 	and.w	r6, r6, #31
 8005b60:	fa02 f606 	lsl.w	r6, r2, r6
 8005b64:	421e      	tst	r6, r3
 8005b66:	d13a      	bne.n	8005bde <__gethex+0x3fe>
 8005b68:	f045 0520 	orr.w	r5, r5, #32
 8005b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b6e:	601c      	str	r4, [r3, #0]
 8005b70:	9b02      	ldr	r3, [sp, #8]
 8005b72:	601f      	str	r7, [r3, #0]
 8005b74:	e6b0      	b.n	80058d8 <__gethex+0xf8>
 8005b76:	4299      	cmp	r1, r3
 8005b78:	f843 cc04 	str.w	ip, [r3, #-4]
 8005b7c:	d8d9      	bhi.n	8005b32 <__gethex+0x352>
 8005b7e:	68a3      	ldr	r3, [r4, #8]
 8005b80:	459b      	cmp	fp, r3
 8005b82:	db17      	blt.n	8005bb4 <__gethex+0x3d4>
 8005b84:	6861      	ldr	r1, [r4, #4]
 8005b86:	9801      	ldr	r0, [sp, #4]
 8005b88:	3101      	adds	r1, #1
 8005b8a:	f000 fd4b 	bl	8006624 <_Balloc>
 8005b8e:	4681      	mov	r9, r0
 8005b90:	b918      	cbnz	r0, 8005b9a <__gethex+0x3ba>
 8005b92:	4b1a      	ldr	r3, [pc, #104]	@ (8005bfc <__gethex+0x41c>)
 8005b94:	4602      	mov	r2, r0
 8005b96:	2184      	movs	r1, #132	@ 0x84
 8005b98:	e6c5      	b.n	8005926 <__gethex+0x146>
 8005b9a:	6922      	ldr	r2, [r4, #16]
 8005b9c:	3202      	adds	r2, #2
 8005b9e:	f104 010c 	add.w	r1, r4, #12
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	300c      	adds	r0, #12
 8005ba6:	f7ff fd9c 	bl	80056e2 <memcpy>
 8005baa:	4621      	mov	r1, r4
 8005bac:	9801      	ldr	r0, [sp, #4]
 8005bae:	f000 fd79 	bl	80066a4 <_Bfree>
 8005bb2:	464c      	mov	r4, r9
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bbc:	6122      	str	r2, [r4, #16]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	615a      	str	r2, [r3, #20]
 8005bc2:	e7be      	b.n	8005b42 <__gethex+0x362>
 8005bc4:	6922      	ldr	r2, [r4, #16]
 8005bc6:	455a      	cmp	r2, fp
 8005bc8:	dd0b      	ble.n	8005be2 <__gethex+0x402>
 8005bca:	2101      	movs	r1, #1
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7ff fd9f 	bl	8005710 <rshift>
 8005bd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bd6:	3701      	adds	r7, #1
 8005bd8:	42bb      	cmp	r3, r7
 8005bda:	f6ff aee0 	blt.w	800599e <__gethex+0x1be>
 8005bde:	2501      	movs	r5, #1
 8005be0:	e7c2      	b.n	8005b68 <__gethex+0x388>
 8005be2:	f016 061f 	ands.w	r6, r6, #31
 8005be6:	d0fa      	beq.n	8005bde <__gethex+0x3fe>
 8005be8:	4453      	add	r3, sl
 8005bea:	f1c6 0620 	rsb	r6, r6, #32
 8005bee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005bf2:	f000 fe09 	bl	8006808 <__hi0bits>
 8005bf6:	42b0      	cmp	r0, r6
 8005bf8:	dbe7      	blt.n	8005bca <__gethex+0x3ea>
 8005bfa:	e7f0      	b.n	8005bde <__gethex+0x3fe>
 8005bfc:	08008479 	.word	0x08008479

08005c00 <L_shift>:
 8005c00:	f1c2 0208 	rsb	r2, r2, #8
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	b570      	push	{r4, r5, r6, lr}
 8005c08:	f1c2 0620 	rsb	r6, r2, #32
 8005c0c:	6843      	ldr	r3, [r0, #4]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	fa03 f506 	lsl.w	r5, r3, r6
 8005c14:	432c      	orrs	r4, r5
 8005c16:	40d3      	lsrs	r3, r2
 8005c18:	6004      	str	r4, [r0, #0]
 8005c1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005c1e:	4288      	cmp	r0, r1
 8005c20:	d3f4      	bcc.n	8005c0c <L_shift+0xc>
 8005c22:	bd70      	pop	{r4, r5, r6, pc}

08005c24 <__match>:
 8005c24:	b530      	push	{r4, r5, lr}
 8005c26:	6803      	ldr	r3, [r0, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c2e:	b914      	cbnz	r4, 8005c36 <__match+0x12>
 8005c30:	6003      	str	r3, [r0, #0]
 8005c32:	2001      	movs	r0, #1
 8005c34:	bd30      	pop	{r4, r5, pc}
 8005c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c3a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005c3e:	2d19      	cmp	r5, #25
 8005c40:	bf98      	it	ls
 8005c42:	3220      	addls	r2, #32
 8005c44:	42a2      	cmp	r2, r4
 8005c46:	d0f0      	beq.n	8005c2a <__match+0x6>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e7f3      	b.n	8005c34 <__match+0x10>

08005c4c <__hexnan>:
 8005c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c50:	680b      	ldr	r3, [r1, #0]
 8005c52:	6801      	ldr	r1, [r0, #0]
 8005c54:	115e      	asrs	r6, r3, #5
 8005c56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005c5a:	f013 031f 	ands.w	r3, r3, #31
 8005c5e:	b087      	sub	sp, #28
 8005c60:	bf18      	it	ne
 8005c62:	3604      	addne	r6, #4
 8005c64:	2500      	movs	r5, #0
 8005c66:	1f37      	subs	r7, r6, #4
 8005c68:	4682      	mov	sl, r0
 8005c6a:	4690      	mov	r8, r2
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8005c72:	46b9      	mov	r9, r7
 8005c74:	463c      	mov	r4, r7
 8005c76:	9502      	str	r5, [sp, #8]
 8005c78:	46ab      	mov	fp, r5
 8005c7a:	784a      	ldrb	r2, [r1, #1]
 8005c7c:	1c4b      	adds	r3, r1, #1
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	b342      	cbz	r2, 8005cd4 <__hexnan+0x88>
 8005c82:	4610      	mov	r0, r2
 8005c84:	9105      	str	r1, [sp, #20]
 8005c86:	9204      	str	r2, [sp, #16]
 8005c88:	f7ff fd94 	bl	80057b4 <__hexdig_fun>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d151      	bne.n	8005d34 <__hexnan+0xe8>
 8005c90:	9a04      	ldr	r2, [sp, #16]
 8005c92:	9905      	ldr	r1, [sp, #20]
 8005c94:	2a20      	cmp	r2, #32
 8005c96:	d818      	bhi.n	8005cca <__hexnan+0x7e>
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	459b      	cmp	fp, r3
 8005c9c:	dd13      	ble.n	8005cc6 <__hexnan+0x7a>
 8005c9e:	454c      	cmp	r4, r9
 8005ca0:	d206      	bcs.n	8005cb0 <__hexnan+0x64>
 8005ca2:	2d07      	cmp	r5, #7
 8005ca4:	dc04      	bgt.n	8005cb0 <__hexnan+0x64>
 8005ca6:	462a      	mov	r2, r5
 8005ca8:	4649      	mov	r1, r9
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7ff ffa8 	bl	8005c00 <L_shift>
 8005cb0:	4544      	cmp	r4, r8
 8005cb2:	d952      	bls.n	8005d5a <__hexnan+0x10e>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f1a4 0904 	sub.w	r9, r4, #4
 8005cba:	f844 3c04 	str.w	r3, [r4, #-4]
 8005cbe:	f8cd b008 	str.w	fp, [sp, #8]
 8005cc2:	464c      	mov	r4, r9
 8005cc4:	461d      	mov	r5, r3
 8005cc6:	9903      	ldr	r1, [sp, #12]
 8005cc8:	e7d7      	b.n	8005c7a <__hexnan+0x2e>
 8005cca:	2a29      	cmp	r2, #41	@ 0x29
 8005ccc:	d157      	bne.n	8005d7e <__hexnan+0x132>
 8005cce:	3102      	adds	r1, #2
 8005cd0:	f8ca 1000 	str.w	r1, [sl]
 8005cd4:	f1bb 0f00 	cmp.w	fp, #0
 8005cd8:	d051      	beq.n	8005d7e <__hexnan+0x132>
 8005cda:	454c      	cmp	r4, r9
 8005cdc:	d206      	bcs.n	8005cec <__hexnan+0xa0>
 8005cde:	2d07      	cmp	r5, #7
 8005ce0:	dc04      	bgt.n	8005cec <__hexnan+0xa0>
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7ff ff8a 	bl	8005c00 <L_shift>
 8005cec:	4544      	cmp	r4, r8
 8005cee:	d936      	bls.n	8005d5e <__hexnan+0x112>
 8005cf0:	f1a8 0204 	sub.w	r2, r8, #4
 8005cf4:	4623      	mov	r3, r4
 8005cf6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005cfa:	f842 1f04 	str.w	r1, [r2, #4]!
 8005cfe:	429f      	cmp	r7, r3
 8005d00:	d2f9      	bcs.n	8005cf6 <__hexnan+0xaa>
 8005d02:	1b3b      	subs	r3, r7, r4
 8005d04:	f023 0303 	bic.w	r3, r3, #3
 8005d08:	3304      	adds	r3, #4
 8005d0a:	3401      	adds	r4, #1
 8005d0c:	3e03      	subs	r6, #3
 8005d0e:	42b4      	cmp	r4, r6
 8005d10:	bf88      	it	hi
 8005d12:	2304      	movhi	r3, #4
 8005d14:	4443      	add	r3, r8
 8005d16:	2200      	movs	r2, #0
 8005d18:	f843 2b04 	str.w	r2, [r3], #4
 8005d1c:	429f      	cmp	r7, r3
 8005d1e:	d2fb      	bcs.n	8005d18 <__hexnan+0xcc>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	b91b      	cbnz	r3, 8005d2c <__hexnan+0xe0>
 8005d24:	4547      	cmp	r7, r8
 8005d26:	d128      	bne.n	8005d7a <__hexnan+0x12e>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	2005      	movs	r0, #5
 8005d2e:	b007      	add	sp, #28
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	3501      	adds	r5, #1
 8005d36:	2d08      	cmp	r5, #8
 8005d38:	f10b 0b01 	add.w	fp, fp, #1
 8005d3c:	dd06      	ble.n	8005d4c <__hexnan+0x100>
 8005d3e:	4544      	cmp	r4, r8
 8005d40:	d9c1      	bls.n	8005cc6 <__hexnan+0x7a>
 8005d42:	2300      	movs	r3, #0
 8005d44:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d48:	2501      	movs	r5, #1
 8005d4a:	3c04      	subs	r4, #4
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	f000 000f 	and.w	r0, r0, #15
 8005d52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005d56:	6020      	str	r0, [r4, #0]
 8005d58:	e7b5      	b.n	8005cc6 <__hexnan+0x7a>
 8005d5a:	2508      	movs	r5, #8
 8005d5c:	e7b3      	b.n	8005cc6 <__hexnan+0x7a>
 8005d5e:	9b01      	ldr	r3, [sp, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0dd      	beq.n	8005d20 <__hexnan+0xd4>
 8005d64:	f1c3 0320 	rsb	r3, r3, #32
 8005d68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d6c:	40da      	lsrs	r2, r3
 8005d6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005d72:	4013      	ands	r3, r2
 8005d74:	f846 3c04 	str.w	r3, [r6, #-4]
 8005d78:	e7d2      	b.n	8005d20 <__hexnan+0xd4>
 8005d7a:	3f04      	subs	r7, #4
 8005d7c:	e7d0      	b.n	8005d20 <__hexnan+0xd4>
 8005d7e:	2004      	movs	r0, #4
 8005d80:	e7d5      	b.n	8005d2e <__hexnan+0xe2>

08005d82 <__ssputs_r>:
 8005d82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d86:	688e      	ldr	r6, [r1, #8]
 8005d88:	461f      	mov	r7, r3
 8005d8a:	42be      	cmp	r6, r7
 8005d8c:	680b      	ldr	r3, [r1, #0]
 8005d8e:	4682      	mov	sl, r0
 8005d90:	460c      	mov	r4, r1
 8005d92:	4690      	mov	r8, r2
 8005d94:	d82d      	bhi.n	8005df2 <__ssputs_r+0x70>
 8005d96:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d9a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d9e:	d026      	beq.n	8005dee <__ssputs_r+0x6c>
 8005da0:	6965      	ldr	r5, [r4, #20]
 8005da2:	6909      	ldr	r1, [r1, #16]
 8005da4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005da8:	eba3 0901 	sub.w	r9, r3, r1
 8005dac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005db0:	1c7b      	adds	r3, r7, #1
 8005db2:	444b      	add	r3, r9
 8005db4:	106d      	asrs	r5, r5, #1
 8005db6:	429d      	cmp	r5, r3
 8005db8:	bf38      	it	cc
 8005dba:	461d      	movcc	r5, r3
 8005dbc:	0553      	lsls	r3, r2, #21
 8005dbe:	d527      	bpl.n	8005e10 <__ssputs_r+0x8e>
 8005dc0:	4629      	mov	r1, r5
 8005dc2:	f000 f957 	bl	8006074 <_malloc_r>
 8005dc6:	4606      	mov	r6, r0
 8005dc8:	b360      	cbz	r0, 8005e24 <__ssputs_r+0xa2>
 8005dca:	6921      	ldr	r1, [r4, #16]
 8005dcc:	464a      	mov	r2, r9
 8005dce:	f7ff fc88 	bl	80056e2 <memcpy>
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ddc:	81a3      	strh	r3, [r4, #12]
 8005dde:	6126      	str	r6, [r4, #16]
 8005de0:	6165      	str	r5, [r4, #20]
 8005de2:	444e      	add	r6, r9
 8005de4:	eba5 0509 	sub.w	r5, r5, r9
 8005de8:	6026      	str	r6, [r4, #0]
 8005dea:	60a5      	str	r5, [r4, #8]
 8005dec:	463e      	mov	r6, r7
 8005dee:	42be      	cmp	r6, r7
 8005df0:	d900      	bls.n	8005df4 <__ssputs_r+0x72>
 8005df2:	463e      	mov	r6, r7
 8005df4:	6820      	ldr	r0, [r4, #0]
 8005df6:	4632      	mov	r2, r6
 8005df8:	4641      	mov	r1, r8
 8005dfa:	f001 f943 	bl	8007084 <memmove>
 8005dfe:	68a3      	ldr	r3, [r4, #8]
 8005e00:	1b9b      	subs	r3, r3, r6
 8005e02:	60a3      	str	r3, [r4, #8]
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	4433      	add	r3, r6
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e10:	462a      	mov	r2, r5
 8005e12:	f001 f8fc 	bl	800700e <_realloc_r>
 8005e16:	4606      	mov	r6, r0
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d1e0      	bne.n	8005dde <__ssputs_r+0x5c>
 8005e1c:	6921      	ldr	r1, [r4, #16]
 8005e1e:	4650      	mov	r0, sl
 8005e20:	f001 f9d2 	bl	80071c8 <_free_r>
 8005e24:	230c      	movs	r3, #12
 8005e26:	f8ca 3000 	str.w	r3, [sl]
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e36:	e7e9      	b.n	8005e0c <__ssputs_r+0x8a>

08005e38 <_svfiprintf_r>:
 8005e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e3c:	4698      	mov	r8, r3
 8005e3e:	898b      	ldrh	r3, [r1, #12]
 8005e40:	061b      	lsls	r3, r3, #24
 8005e42:	b09d      	sub	sp, #116	@ 0x74
 8005e44:	4607      	mov	r7, r0
 8005e46:	460d      	mov	r5, r1
 8005e48:	4614      	mov	r4, r2
 8005e4a:	d510      	bpl.n	8005e6e <_svfiprintf_r+0x36>
 8005e4c:	690b      	ldr	r3, [r1, #16]
 8005e4e:	b973      	cbnz	r3, 8005e6e <_svfiprintf_r+0x36>
 8005e50:	2140      	movs	r1, #64	@ 0x40
 8005e52:	f000 f90f 	bl	8006074 <_malloc_r>
 8005e56:	6028      	str	r0, [r5, #0]
 8005e58:	6128      	str	r0, [r5, #16]
 8005e5a:	b930      	cbnz	r0, 8005e6a <_svfiprintf_r+0x32>
 8005e5c:	230c      	movs	r3, #12
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e64:	b01d      	add	sp, #116	@ 0x74
 8005e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e6a:	2340      	movs	r3, #64	@ 0x40
 8005e6c:	616b      	str	r3, [r5, #20]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e72:	2320      	movs	r3, #32
 8005e74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e78:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e7c:	2330      	movs	r3, #48	@ 0x30
 8005e7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800601c <_svfiprintf_r+0x1e4>
 8005e82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e86:	f04f 0901 	mov.w	r9, #1
 8005e8a:	4623      	mov	r3, r4
 8005e8c:	469a      	mov	sl, r3
 8005e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e92:	b10a      	cbz	r2, 8005e98 <_svfiprintf_r+0x60>
 8005e94:	2a25      	cmp	r2, #37	@ 0x25
 8005e96:	d1f9      	bne.n	8005e8c <_svfiprintf_r+0x54>
 8005e98:	ebba 0b04 	subs.w	fp, sl, r4
 8005e9c:	d00b      	beq.n	8005eb6 <_svfiprintf_r+0x7e>
 8005e9e:	465b      	mov	r3, fp
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4638      	mov	r0, r7
 8005ea6:	f7ff ff6c 	bl	8005d82 <__ssputs_r>
 8005eaa:	3001      	adds	r0, #1
 8005eac:	f000 80a7 	beq.w	8005ffe <_svfiprintf_r+0x1c6>
 8005eb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eb2:	445a      	add	r2, fp
 8005eb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 809f 	beq.w	8005ffe <_svfiprintf_r+0x1c6>
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eca:	f10a 0a01 	add.w	sl, sl, #1
 8005ece:	9304      	str	r3, [sp, #16]
 8005ed0:	9307      	str	r3, [sp, #28]
 8005ed2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ed6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ed8:	4654      	mov	r4, sl
 8005eda:	2205      	movs	r2, #5
 8005edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ee0:	484e      	ldr	r0, [pc, #312]	@ (800601c <_svfiprintf_r+0x1e4>)
 8005ee2:	f7fa f99d 	bl	8000220 <memchr>
 8005ee6:	9a04      	ldr	r2, [sp, #16]
 8005ee8:	b9d8      	cbnz	r0, 8005f22 <_svfiprintf_r+0xea>
 8005eea:	06d0      	lsls	r0, r2, #27
 8005eec:	bf44      	itt	mi
 8005eee:	2320      	movmi	r3, #32
 8005ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ef4:	0711      	lsls	r1, r2, #28
 8005ef6:	bf44      	itt	mi
 8005ef8:	232b      	movmi	r3, #43	@ 0x2b
 8005efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005efe:	f89a 3000 	ldrb.w	r3, [sl]
 8005f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f04:	d015      	beq.n	8005f32 <_svfiprintf_r+0xfa>
 8005f06:	9a07      	ldr	r2, [sp, #28]
 8005f08:	4654      	mov	r4, sl
 8005f0a:	2000      	movs	r0, #0
 8005f0c:	f04f 0c0a 	mov.w	ip, #10
 8005f10:	4621      	mov	r1, r4
 8005f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f16:	3b30      	subs	r3, #48	@ 0x30
 8005f18:	2b09      	cmp	r3, #9
 8005f1a:	d94b      	bls.n	8005fb4 <_svfiprintf_r+0x17c>
 8005f1c:	b1b0      	cbz	r0, 8005f4c <_svfiprintf_r+0x114>
 8005f1e:	9207      	str	r2, [sp, #28]
 8005f20:	e014      	b.n	8005f4c <_svfiprintf_r+0x114>
 8005f22:	eba0 0308 	sub.w	r3, r0, r8
 8005f26:	fa09 f303 	lsl.w	r3, r9, r3
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	9304      	str	r3, [sp, #16]
 8005f2e:	46a2      	mov	sl, r4
 8005f30:	e7d2      	b.n	8005ed8 <_svfiprintf_r+0xa0>
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	1d19      	adds	r1, r3, #4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	9103      	str	r1, [sp, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bfbb      	ittet	lt
 8005f3e:	425b      	neglt	r3, r3
 8005f40:	f042 0202 	orrlt.w	r2, r2, #2
 8005f44:	9307      	strge	r3, [sp, #28]
 8005f46:	9307      	strlt	r3, [sp, #28]
 8005f48:	bfb8      	it	lt
 8005f4a:	9204      	strlt	r2, [sp, #16]
 8005f4c:	7823      	ldrb	r3, [r4, #0]
 8005f4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f50:	d10a      	bne.n	8005f68 <_svfiprintf_r+0x130>
 8005f52:	7863      	ldrb	r3, [r4, #1]
 8005f54:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f56:	d132      	bne.n	8005fbe <_svfiprintf_r+0x186>
 8005f58:	9b03      	ldr	r3, [sp, #12]
 8005f5a:	1d1a      	adds	r2, r3, #4
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	9203      	str	r2, [sp, #12]
 8005f60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f64:	3402      	adds	r4, #2
 8005f66:	9305      	str	r3, [sp, #20]
 8005f68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800602c <_svfiprintf_r+0x1f4>
 8005f6c:	7821      	ldrb	r1, [r4, #0]
 8005f6e:	2203      	movs	r2, #3
 8005f70:	4650      	mov	r0, sl
 8005f72:	f7fa f955 	bl	8000220 <memchr>
 8005f76:	b138      	cbz	r0, 8005f88 <_svfiprintf_r+0x150>
 8005f78:	9b04      	ldr	r3, [sp, #16]
 8005f7a:	eba0 000a 	sub.w	r0, r0, sl
 8005f7e:	2240      	movs	r2, #64	@ 0x40
 8005f80:	4082      	lsls	r2, r0
 8005f82:	4313      	orrs	r3, r2
 8005f84:	3401      	adds	r4, #1
 8005f86:	9304      	str	r3, [sp, #16]
 8005f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f8c:	4824      	ldr	r0, [pc, #144]	@ (8006020 <_svfiprintf_r+0x1e8>)
 8005f8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f92:	2206      	movs	r2, #6
 8005f94:	f7fa f944 	bl	8000220 <memchr>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	d036      	beq.n	800600a <_svfiprintf_r+0x1d2>
 8005f9c:	4b21      	ldr	r3, [pc, #132]	@ (8006024 <_svfiprintf_r+0x1ec>)
 8005f9e:	bb1b      	cbnz	r3, 8005fe8 <_svfiprintf_r+0x1b0>
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	3307      	adds	r3, #7
 8005fa4:	f023 0307 	bic.w	r3, r3, #7
 8005fa8:	3308      	adds	r3, #8
 8005faa:	9303      	str	r3, [sp, #12]
 8005fac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fae:	4433      	add	r3, r6
 8005fb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fb2:	e76a      	b.n	8005e8a <_svfiprintf_r+0x52>
 8005fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb8:	460c      	mov	r4, r1
 8005fba:	2001      	movs	r0, #1
 8005fbc:	e7a8      	b.n	8005f10 <_svfiprintf_r+0xd8>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	3401      	adds	r4, #1
 8005fc2:	9305      	str	r3, [sp, #20]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	f04f 0c0a 	mov.w	ip, #10
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fd0:	3a30      	subs	r2, #48	@ 0x30
 8005fd2:	2a09      	cmp	r2, #9
 8005fd4:	d903      	bls.n	8005fde <_svfiprintf_r+0x1a6>
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0c6      	beq.n	8005f68 <_svfiprintf_r+0x130>
 8005fda:	9105      	str	r1, [sp, #20]
 8005fdc:	e7c4      	b.n	8005f68 <_svfiprintf_r+0x130>
 8005fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e7f0      	b.n	8005fca <_svfiprintf_r+0x192>
 8005fe8:	ab03      	add	r3, sp, #12
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	462a      	mov	r2, r5
 8005fee:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <_svfiprintf_r+0x1f0>)
 8005ff0:	a904      	add	r1, sp, #16
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f3af 8000 	nop.w
 8005ff8:	1c42      	adds	r2, r0, #1
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	d1d6      	bne.n	8005fac <_svfiprintf_r+0x174>
 8005ffe:	89ab      	ldrh	r3, [r5, #12]
 8006000:	065b      	lsls	r3, r3, #25
 8006002:	f53f af2d 	bmi.w	8005e60 <_svfiprintf_r+0x28>
 8006006:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006008:	e72c      	b.n	8005e64 <_svfiprintf_r+0x2c>
 800600a:	ab03      	add	r3, sp, #12
 800600c:	9300      	str	r3, [sp, #0]
 800600e:	462a      	mov	r2, r5
 8006010:	4b05      	ldr	r3, [pc, #20]	@ (8006028 <_svfiprintf_r+0x1f0>)
 8006012:	a904      	add	r1, sp, #16
 8006014:	4638      	mov	r0, r7
 8006016:	f000 f92d 	bl	8006274 <_printf_i>
 800601a:	e7ed      	b.n	8005ff8 <_svfiprintf_r+0x1c0>
 800601c:	080084ea 	.word	0x080084ea
 8006020:	080084f4 	.word	0x080084f4
 8006024:	00000000 	.word	0x00000000
 8006028:	08005d83 	.word	0x08005d83
 800602c:	080084f0 	.word	0x080084f0

08006030 <sbrk_aligned>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4e0f      	ldr	r6, [pc, #60]	@ (8006070 <sbrk_aligned+0x40>)
 8006034:	460c      	mov	r4, r1
 8006036:	6831      	ldr	r1, [r6, #0]
 8006038:	4605      	mov	r5, r0
 800603a:	b911      	cbnz	r1, 8006042 <sbrk_aligned+0x12>
 800603c:	f001 f870 	bl	8007120 <_sbrk_r>
 8006040:	6030      	str	r0, [r6, #0]
 8006042:	4621      	mov	r1, r4
 8006044:	4628      	mov	r0, r5
 8006046:	f001 f86b 	bl	8007120 <_sbrk_r>
 800604a:	1c43      	adds	r3, r0, #1
 800604c:	d103      	bne.n	8006056 <sbrk_aligned+0x26>
 800604e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006052:	4620      	mov	r0, r4
 8006054:	bd70      	pop	{r4, r5, r6, pc}
 8006056:	1cc4      	adds	r4, r0, #3
 8006058:	f024 0403 	bic.w	r4, r4, #3
 800605c:	42a0      	cmp	r0, r4
 800605e:	d0f8      	beq.n	8006052 <sbrk_aligned+0x22>
 8006060:	1a21      	subs	r1, r4, r0
 8006062:	4628      	mov	r0, r5
 8006064:	f001 f85c 	bl	8007120 <_sbrk_r>
 8006068:	3001      	adds	r0, #1
 800606a:	d1f2      	bne.n	8006052 <sbrk_aligned+0x22>
 800606c:	e7ef      	b.n	800604e <sbrk_aligned+0x1e>
 800606e:	bf00      	nop
 8006070:	20000590 	.word	0x20000590

08006074 <_malloc_r>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	1ccd      	adds	r5, r1, #3
 800607a:	f025 0503 	bic.w	r5, r5, #3
 800607e:	3508      	adds	r5, #8
 8006080:	2d0c      	cmp	r5, #12
 8006082:	bf38      	it	cc
 8006084:	250c      	movcc	r5, #12
 8006086:	2d00      	cmp	r5, #0
 8006088:	4606      	mov	r6, r0
 800608a:	db01      	blt.n	8006090 <_malloc_r+0x1c>
 800608c:	42a9      	cmp	r1, r5
 800608e:	d904      	bls.n	800609a <_malloc_r+0x26>
 8006090:	230c      	movs	r3, #12
 8006092:	6033      	str	r3, [r6, #0]
 8006094:	2000      	movs	r0, #0
 8006096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800609a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006170 <_malloc_r+0xfc>
 800609e:	f000 fab5 	bl	800660c <__malloc_lock>
 80060a2:	f8d8 3000 	ldr.w	r3, [r8]
 80060a6:	461c      	mov	r4, r3
 80060a8:	bb44      	cbnz	r4, 80060fc <_malloc_r+0x88>
 80060aa:	4629      	mov	r1, r5
 80060ac:	4630      	mov	r0, r6
 80060ae:	f7ff ffbf 	bl	8006030 <sbrk_aligned>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	4604      	mov	r4, r0
 80060b6:	d158      	bne.n	800616a <_malloc_r+0xf6>
 80060b8:	f8d8 4000 	ldr.w	r4, [r8]
 80060bc:	4627      	mov	r7, r4
 80060be:	2f00      	cmp	r7, #0
 80060c0:	d143      	bne.n	800614a <_malloc_r+0xd6>
 80060c2:	2c00      	cmp	r4, #0
 80060c4:	d04b      	beq.n	800615e <_malloc_r+0xea>
 80060c6:	6823      	ldr	r3, [r4, #0]
 80060c8:	4639      	mov	r1, r7
 80060ca:	4630      	mov	r0, r6
 80060cc:	eb04 0903 	add.w	r9, r4, r3
 80060d0:	f001 f826 	bl	8007120 <_sbrk_r>
 80060d4:	4581      	cmp	r9, r0
 80060d6:	d142      	bne.n	800615e <_malloc_r+0xea>
 80060d8:	6821      	ldr	r1, [r4, #0]
 80060da:	1a6d      	subs	r5, r5, r1
 80060dc:	4629      	mov	r1, r5
 80060de:	4630      	mov	r0, r6
 80060e0:	f7ff ffa6 	bl	8006030 <sbrk_aligned>
 80060e4:	3001      	adds	r0, #1
 80060e6:	d03a      	beq.n	800615e <_malloc_r+0xea>
 80060e8:	6823      	ldr	r3, [r4, #0]
 80060ea:	442b      	add	r3, r5
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	f8d8 3000 	ldr.w	r3, [r8]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	bb62      	cbnz	r2, 8006150 <_malloc_r+0xdc>
 80060f6:	f8c8 7000 	str.w	r7, [r8]
 80060fa:	e00f      	b.n	800611c <_malloc_r+0xa8>
 80060fc:	6822      	ldr	r2, [r4, #0]
 80060fe:	1b52      	subs	r2, r2, r5
 8006100:	d420      	bmi.n	8006144 <_malloc_r+0xd0>
 8006102:	2a0b      	cmp	r2, #11
 8006104:	d917      	bls.n	8006136 <_malloc_r+0xc2>
 8006106:	1961      	adds	r1, r4, r5
 8006108:	42a3      	cmp	r3, r4
 800610a:	6025      	str	r5, [r4, #0]
 800610c:	bf18      	it	ne
 800610e:	6059      	strne	r1, [r3, #4]
 8006110:	6863      	ldr	r3, [r4, #4]
 8006112:	bf08      	it	eq
 8006114:	f8c8 1000 	streq.w	r1, [r8]
 8006118:	5162      	str	r2, [r4, r5]
 800611a:	604b      	str	r3, [r1, #4]
 800611c:	4630      	mov	r0, r6
 800611e:	f000 fa7b 	bl	8006618 <__malloc_unlock>
 8006122:	f104 000b 	add.w	r0, r4, #11
 8006126:	1d23      	adds	r3, r4, #4
 8006128:	f020 0007 	bic.w	r0, r0, #7
 800612c:	1ac2      	subs	r2, r0, r3
 800612e:	bf1c      	itt	ne
 8006130:	1a1b      	subne	r3, r3, r0
 8006132:	50a3      	strne	r3, [r4, r2]
 8006134:	e7af      	b.n	8006096 <_malloc_r+0x22>
 8006136:	6862      	ldr	r2, [r4, #4]
 8006138:	42a3      	cmp	r3, r4
 800613a:	bf0c      	ite	eq
 800613c:	f8c8 2000 	streq.w	r2, [r8]
 8006140:	605a      	strne	r2, [r3, #4]
 8006142:	e7eb      	b.n	800611c <_malloc_r+0xa8>
 8006144:	4623      	mov	r3, r4
 8006146:	6864      	ldr	r4, [r4, #4]
 8006148:	e7ae      	b.n	80060a8 <_malloc_r+0x34>
 800614a:	463c      	mov	r4, r7
 800614c:	687f      	ldr	r7, [r7, #4]
 800614e:	e7b6      	b.n	80060be <_malloc_r+0x4a>
 8006150:	461a      	mov	r2, r3
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	42a3      	cmp	r3, r4
 8006156:	d1fb      	bne.n	8006150 <_malloc_r+0xdc>
 8006158:	2300      	movs	r3, #0
 800615a:	6053      	str	r3, [r2, #4]
 800615c:	e7de      	b.n	800611c <_malloc_r+0xa8>
 800615e:	230c      	movs	r3, #12
 8006160:	6033      	str	r3, [r6, #0]
 8006162:	4630      	mov	r0, r6
 8006164:	f000 fa58 	bl	8006618 <__malloc_unlock>
 8006168:	e794      	b.n	8006094 <_malloc_r+0x20>
 800616a:	6005      	str	r5, [r0, #0]
 800616c:	e7d6      	b.n	800611c <_malloc_r+0xa8>
 800616e:	bf00      	nop
 8006170:	20000594 	.word	0x20000594

08006174 <__ascii_mbtowc>:
 8006174:	b082      	sub	sp, #8
 8006176:	b901      	cbnz	r1, 800617a <__ascii_mbtowc+0x6>
 8006178:	a901      	add	r1, sp, #4
 800617a:	b142      	cbz	r2, 800618e <__ascii_mbtowc+0x1a>
 800617c:	b14b      	cbz	r3, 8006192 <__ascii_mbtowc+0x1e>
 800617e:	7813      	ldrb	r3, [r2, #0]
 8006180:	600b      	str	r3, [r1, #0]
 8006182:	7812      	ldrb	r2, [r2, #0]
 8006184:	1e10      	subs	r0, r2, #0
 8006186:	bf18      	it	ne
 8006188:	2001      	movne	r0, #1
 800618a:	b002      	add	sp, #8
 800618c:	4770      	bx	lr
 800618e:	4610      	mov	r0, r2
 8006190:	e7fb      	b.n	800618a <__ascii_mbtowc+0x16>
 8006192:	f06f 0001 	mvn.w	r0, #1
 8006196:	e7f8      	b.n	800618a <__ascii_mbtowc+0x16>

08006198 <_printf_common>:
 8006198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	4616      	mov	r6, r2
 800619e:	4698      	mov	r8, r3
 80061a0:	688a      	ldr	r2, [r1, #8]
 80061a2:	690b      	ldr	r3, [r1, #16]
 80061a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061a8:	4293      	cmp	r3, r2
 80061aa:	bfb8      	it	lt
 80061ac:	4613      	movlt	r3, r2
 80061ae:	6033      	str	r3, [r6, #0]
 80061b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061b4:	4607      	mov	r7, r0
 80061b6:	460c      	mov	r4, r1
 80061b8:	b10a      	cbz	r2, 80061be <_printf_common+0x26>
 80061ba:	3301      	adds	r3, #1
 80061bc:	6033      	str	r3, [r6, #0]
 80061be:	6823      	ldr	r3, [r4, #0]
 80061c0:	0699      	lsls	r1, r3, #26
 80061c2:	bf42      	ittt	mi
 80061c4:	6833      	ldrmi	r3, [r6, #0]
 80061c6:	3302      	addmi	r3, #2
 80061c8:	6033      	strmi	r3, [r6, #0]
 80061ca:	6825      	ldr	r5, [r4, #0]
 80061cc:	f015 0506 	ands.w	r5, r5, #6
 80061d0:	d106      	bne.n	80061e0 <_printf_common+0x48>
 80061d2:	f104 0a19 	add.w	sl, r4, #25
 80061d6:	68e3      	ldr	r3, [r4, #12]
 80061d8:	6832      	ldr	r2, [r6, #0]
 80061da:	1a9b      	subs	r3, r3, r2
 80061dc:	42ab      	cmp	r3, r5
 80061de:	dc26      	bgt.n	800622e <_printf_common+0x96>
 80061e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80061e4:	6822      	ldr	r2, [r4, #0]
 80061e6:	3b00      	subs	r3, #0
 80061e8:	bf18      	it	ne
 80061ea:	2301      	movne	r3, #1
 80061ec:	0692      	lsls	r2, r2, #26
 80061ee:	d42b      	bmi.n	8006248 <_printf_common+0xb0>
 80061f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80061f4:	4641      	mov	r1, r8
 80061f6:	4638      	mov	r0, r7
 80061f8:	47c8      	blx	r9
 80061fa:	3001      	adds	r0, #1
 80061fc:	d01e      	beq.n	800623c <_printf_common+0xa4>
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	6922      	ldr	r2, [r4, #16]
 8006202:	f003 0306 	and.w	r3, r3, #6
 8006206:	2b04      	cmp	r3, #4
 8006208:	bf02      	ittt	eq
 800620a:	68e5      	ldreq	r5, [r4, #12]
 800620c:	6833      	ldreq	r3, [r6, #0]
 800620e:	1aed      	subeq	r5, r5, r3
 8006210:	68a3      	ldr	r3, [r4, #8]
 8006212:	bf0c      	ite	eq
 8006214:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006218:	2500      	movne	r5, #0
 800621a:	4293      	cmp	r3, r2
 800621c:	bfc4      	itt	gt
 800621e:	1a9b      	subgt	r3, r3, r2
 8006220:	18ed      	addgt	r5, r5, r3
 8006222:	2600      	movs	r6, #0
 8006224:	341a      	adds	r4, #26
 8006226:	42b5      	cmp	r5, r6
 8006228:	d11a      	bne.n	8006260 <_printf_common+0xc8>
 800622a:	2000      	movs	r0, #0
 800622c:	e008      	b.n	8006240 <_printf_common+0xa8>
 800622e:	2301      	movs	r3, #1
 8006230:	4652      	mov	r2, sl
 8006232:	4641      	mov	r1, r8
 8006234:	4638      	mov	r0, r7
 8006236:	47c8      	blx	r9
 8006238:	3001      	adds	r0, #1
 800623a:	d103      	bne.n	8006244 <_printf_common+0xac>
 800623c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006244:	3501      	adds	r5, #1
 8006246:	e7c6      	b.n	80061d6 <_printf_common+0x3e>
 8006248:	18e1      	adds	r1, r4, r3
 800624a:	1c5a      	adds	r2, r3, #1
 800624c:	2030      	movs	r0, #48	@ 0x30
 800624e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006252:	4422      	add	r2, r4
 8006254:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006258:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800625c:	3302      	adds	r3, #2
 800625e:	e7c7      	b.n	80061f0 <_printf_common+0x58>
 8006260:	2301      	movs	r3, #1
 8006262:	4622      	mov	r2, r4
 8006264:	4641      	mov	r1, r8
 8006266:	4638      	mov	r0, r7
 8006268:	47c8      	blx	r9
 800626a:	3001      	adds	r0, #1
 800626c:	d0e6      	beq.n	800623c <_printf_common+0xa4>
 800626e:	3601      	adds	r6, #1
 8006270:	e7d9      	b.n	8006226 <_printf_common+0x8e>
	...

08006274 <_printf_i>:
 8006274:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006278:	7e0f      	ldrb	r7, [r1, #24]
 800627a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800627c:	2f78      	cmp	r7, #120	@ 0x78
 800627e:	4691      	mov	r9, r2
 8006280:	4680      	mov	r8, r0
 8006282:	460c      	mov	r4, r1
 8006284:	469a      	mov	sl, r3
 8006286:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800628a:	d807      	bhi.n	800629c <_printf_i+0x28>
 800628c:	2f62      	cmp	r7, #98	@ 0x62
 800628e:	d80a      	bhi.n	80062a6 <_printf_i+0x32>
 8006290:	2f00      	cmp	r7, #0
 8006292:	f000 80d2 	beq.w	800643a <_printf_i+0x1c6>
 8006296:	2f58      	cmp	r7, #88	@ 0x58
 8006298:	f000 80b9 	beq.w	800640e <_printf_i+0x19a>
 800629c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062a4:	e03a      	b.n	800631c <_printf_i+0xa8>
 80062a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062aa:	2b15      	cmp	r3, #21
 80062ac:	d8f6      	bhi.n	800629c <_printf_i+0x28>
 80062ae:	a101      	add	r1, pc, #4	@ (adr r1, 80062b4 <_printf_i+0x40>)
 80062b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062b4:	0800630d 	.word	0x0800630d
 80062b8:	08006321 	.word	0x08006321
 80062bc:	0800629d 	.word	0x0800629d
 80062c0:	0800629d 	.word	0x0800629d
 80062c4:	0800629d 	.word	0x0800629d
 80062c8:	0800629d 	.word	0x0800629d
 80062cc:	08006321 	.word	0x08006321
 80062d0:	0800629d 	.word	0x0800629d
 80062d4:	0800629d 	.word	0x0800629d
 80062d8:	0800629d 	.word	0x0800629d
 80062dc:	0800629d 	.word	0x0800629d
 80062e0:	08006421 	.word	0x08006421
 80062e4:	0800634b 	.word	0x0800634b
 80062e8:	080063db 	.word	0x080063db
 80062ec:	0800629d 	.word	0x0800629d
 80062f0:	0800629d 	.word	0x0800629d
 80062f4:	08006443 	.word	0x08006443
 80062f8:	0800629d 	.word	0x0800629d
 80062fc:	0800634b 	.word	0x0800634b
 8006300:	0800629d 	.word	0x0800629d
 8006304:	0800629d 	.word	0x0800629d
 8006308:	080063e3 	.word	0x080063e3
 800630c:	6833      	ldr	r3, [r6, #0]
 800630e:	1d1a      	adds	r2, r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6032      	str	r2, [r6, #0]
 8006314:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006318:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800631c:	2301      	movs	r3, #1
 800631e:	e09d      	b.n	800645c <_printf_i+0x1e8>
 8006320:	6833      	ldr	r3, [r6, #0]
 8006322:	6820      	ldr	r0, [r4, #0]
 8006324:	1d19      	adds	r1, r3, #4
 8006326:	6031      	str	r1, [r6, #0]
 8006328:	0606      	lsls	r6, r0, #24
 800632a:	d501      	bpl.n	8006330 <_printf_i+0xbc>
 800632c:	681d      	ldr	r5, [r3, #0]
 800632e:	e003      	b.n	8006338 <_printf_i+0xc4>
 8006330:	0645      	lsls	r5, r0, #25
 8006332:	d5fb      	bpl.n	800632c <_printf_i+0xb8>
 8006334:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006338:	2d00      	cmp	r5, #0
 800633a:	da03      	bge.n	8006344 <_printf_i+0xd0>
 800633c:	232d      	movs	r3, #45	@ 0x2d
 800633e:	426d      	negs	r5, r5
 8006340:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006344:	4859      	ldr	r0, [pc, #356]	@ (80064ac <_printf_i+0x238>)
 8006346:	230a      	movs	r3, #10
 8006348:	e011      	b.n	800636e <_printf_i+0xfa>
 800634a:	6821      	ldr	r1, [r4, #0]
 800634c:	6833      	ldr	r3, [r6, #0]
 800634e:	0608      	lsls	r0, r1, #24
 8006350:	f853 5b04 	ldr.w	r5, [r3], #4
 8006354:	d402      	bmi.n	800635c <_printf_i+0xe8>
 8006356:	0649      	lsls	r1, r1, #25
 8006358:	bf48      	it	mi
 800635a:	b2ad      	uxthmi	r5, r5
 800635c:	2f6f      	cmp	r7, #111	@ 0x6f
 800635e:	4853      	ldr	r0, [pc, #332]	@ (80064ac <_printf_i+0x238>)
 8006360:	6033      	str	r3, [r6, #0]
 8006362:	bf14      	ite	ne
 8006364:	230a      	movne	r3, #10
 8006366:	2308      	moveq	r3, #8
 8006368:	2100      	movs	r1, #0
 800636a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800636e:	6866      	ldr	r6, [r4, #4]
 8006370:	60a6      	str	r6, [r4, #8]
 8006372:	2e00      	cmp	r6, #0
 8006374:	bfa2      	ittt	ge
 8006376:	6821      	ldrge	r1, [r4, #0]
 8006378:	f021 0104 	bicge.w	r1, r1, #4
 800637c:	6021      	strge	r1, [r4, #0]
 800637e:	b90d      	cbnz	r5, 8006384 <_printf_i+0x110>
 8006380:	2e00      	cmp	r6, #0
 8006382:	d04b      	beq.n	800641c <_printf_i+0x1a8>
 8006384:	4616      	mov	r6, r2
 8006386:	fbb5 f1f3 	udiv	r1, r5, r3
 800638a:	fb03 5711 	mls	r7, r3, r1, r5
 800638e:	5dc7      	ldrb	r7, [r0, r7]
 8006390:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006394:	462f      	mov	r7, r5
 8006396:	42bb      	cmp	r3, r7
 8006398:	460d      	mov	r5, r1
 800639a:	d9f4      	bls.n	8006386 <_printf_i+0x112>
 800639c:	2b08      	cmp	r3, #8
 800639e:	d10b      	bne.n	80063b8 <_printf_i+0x144>
 80063a0:	6823      	ldr	r3, [r4, #0]
 80063a2:	07df      	lsls	r7, r3, #31
 80063a4:	d508      	bpl.n	80063b8 <_printf_i+0x144>
 80063a6:	6923      	ldr	r3, [r4, #16]
 80063a8:	6861      	ldr	r1, [r4, #4]
 80063aa:	4299      	cmp	r1, r3
 80063ac:	bfde      	ittt	le
 80063ae:	2330      	movle	r3, #48	@ 0x30
 80063b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80063b8:	1b92      	subs	r2, r2, r6
 80063ba:	6122      	str	r2, [r4, #16]
 80063bc:	f8cd a000 	str.w	sl, [sp]
 80063c0:	464b      	mov	r3, r9
 80063c2:	aa03      	add	r2, sp, #12
 80063c4:	4621      	mov	r1, r4
 80063c6:	4640      	mov	r0, r8
 80063c8:	f7ff fee6 	bl	8006198 <_printf_common>
 80063cc:	3001      	adds	r0, #1
 80063ce:	d14a      	bne.n	8006466 <_printf_i+0x1f2>
 80063d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063d4:	b004      	add	sp, #16
 80063d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	f043 0320 	orr.w	r3, r3, #32
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	4833      	ldr	r0, [pc, #204]	@ (80064b0 <_printf_i+0x23c>)
 80063e4:	2778      	movs	r7, #120	@ 0x78
 80063e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	6831      	ldr	r1, [r6, #0]
 80063ee:	061f      	lsls	r7, r3, #24
 80063f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80063f4:	d402      	bmi.n	80063fc <_printf_i+0x188>
 80063f6:	065f      	lsls	r7, r3, #25
 80063f8:	bf48      	it	mi
 80063fa:	b2ad      	uxthmi	r5, r5
 80063fc:	6031      	str	r1, [r6, #0]
 80063fe:	07d9      	lsls	r1, r3, #31
 8006400:	bf44      	itt	mi
 8006402:	f043 0320 	orrmi.w	r3, r3, #32
 8006406:	6023      	strmi	r3, [r4, #0]
 8006408:	b11d      	cbz	r5, 8006412 <_printf_i+0x19e>
 800640a:	2310      	movs	r3, #16
 800640c:	e7ac      	b.n	8006368 <_printf_i+0xf4>
 800640e:	4827      	ldr	r0, [pc, #156]	@ (80064ac <_printf_i+0x238>)
 8006410:	e7e9      	b.n	80063e6 <_printf_i+0x172>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	f023 0320 	bic.w	r3, r3, #32
 8006418:	6023      	str	r3, [r4, #0]
 800641a:	e7f6      	b.n	800640a <_printf_i+0x196>
 800641c:	4616      	mov	r6, r2
 800641e:	e7bd      	b.n	800639c <_printf_i+0x128>
 8006420:	6833      	ldr	r3, [r6, #0]
 8006422:	6825      	ldr	r5, [r4, #0]
 8006424:	6961      	ldr	r1, [r4, #20]
 8006426:	1d18      	adds	r0, r3, #4
 8006428:	6030      	str	r0, [r6, #0]
 800642a:	062e      	lsls	r6, r5, #24
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	d501      	bpl.n	8006434 <_printf_i+0x1c0>
 8006430:	6019      	str	r1, [r3, #0]
 8006432:	e002      	b.n	800643a <_printf_i+0x1c6>
 8006434:	0668      	lsls	r0, r5, #25
 8006436:	d5fb      	bpl.n	8006430 <_printf_i+0x1bc>
 8006438:	8019      	strh	r1, [r3, #0]
 800643a:	2300      	movs	r3, #0
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	4616      	mov	r6, r2
 8006440:	e7bc      	b.n	80063bc <_printf_i+0x148>
 8006442:	6833      	ldr	r3, [r6, #0]
 8006444:	1d1a      	adds	r2, r3, #4
 8006446:	6032      	str	r2, [r6, #0]
 8006448:	681e      	ldr	r6, [r3, #0]
 800644a:	6862      	ldr	r2, [r4, #4]
 800644c:	2100      	movs	r1, #0
 800644e:	4630      	mov	r0, r6
 8006450:	f7f9 fee6 	bl	8000220 <memchr>
 8006454:	b108      	cbz	r0, 800645a <_printf_i+0x1e6>
 8006456:	1b80      	subs	r0, r0, r6
 8006458:	6060      	str	r0, [r4, #4]
 800645a:	6863      	ldr	r3, [r4, #4]
 800645c:	6123      	str	r3, [r4, #16]
 800645e:	2300      	movs	r3, #0
 8006460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006464:	e7aa      	b.n	80063bc <_printf_i+0x148>
 8006466:	6923      	ldr	r3, [r4, #16]
 8006468:	4632      	mov	r2, r6
 800646a:	4649      	mov	r1, r9
 800646c:	4640      	mov	r0, r8
 800646e:	47d0      	blx	sl
 8006470:	3001      	adds	r0, #1
 8006472:	d0ad      	beq.n	80063d0 <_printf_i+0x15c>
 8006474:	6823      	ldr	r3, [r4, #0]
 8006476:	079b      	lsls	r3, r3, #30
 8006478:	d413      	bmi.n	80064a2 <_printf_i+0x22e>
 800647a:	68e0      	ldr	r0, [r4, #12]
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	4298      	cmp	r0, r3
 8006480:	bfb8      	it	lt
 8006482:	4618      	movlt	r0, r3
 8006484:	e7a6      	b.n	80063d4 <_printf_i+0x160>
 8006486:	2301      	movs	r3, #1
 8006488:	4632      	mov	r2, r6
 800648a:	4649      	mov	r1, r9
 800648c:	4640      	mov	r0, r8
 800648e:	47d0      	blx	sl
 8006490:	3001      	adds	r0, #1
 8006492:	d09d      	beq.n	80063d0 <_printf_i+0x15c>
 8006494:	3501      	adds	r5, #1
 8006496:	68e3      	ldr	r3, [r4, #12]
 8006498:	9903      	ldr	r1, [sp, #12]
 800649a:	1a5b      	subs	r3, r3, r1
 800649c:	42ab      	cmp	r3, r5
 800649e:	dcf2      	bgt.n	8006486 <_printf_i+0x212>
 80064a0:	e7eb      	b.n	800647a <_printf_i+0x206>
 80064a2:	2500      	movs	r5, #0
 80064a4:	f104 0619 	add.w	r6, r4, #25
 80064a8:	e7f5      	b.n	8006496 <_printf_i+0x222>
 80064aa:	bf00      	nop
 80064ac:	080084fb 	.word	0x080084fb
 80064b0:	0800850c 	.word	0x0800850c

080064b4 <__sflush_r>:
 80064b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064bc:	0716      	lsls	r6, r2, #28
 80064be:	4605      	mov	r5, r0
 80064c0:	460c      	mov	r4, r1
 80064c2:	d454      	bmi.n	800656e <__sflush_r+0xba>
 80064c4:	684b      	ldr	r3, [r1, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	dc02      	bgt.n	80064d0 <__sflush_r+0x1c>
 80064ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	dd48      	ble.n	8006562 <__sflush_r+0xae>
 80064d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	d045      	beq.n	8006562 <__sflush_r+0xae>
 80064d6:	2300      	movs	r3, #0
 80064d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80064dc:	682f      	ldr	r7, [r5, #0]
 80064de:	6a21      	ldr	r1, [r4, #32]
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	d030      	beq.n	8006546 <__sflush_r+0x92>
 80064e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	0759      	lsls	r1, r3, #29
 80064ea:	d505      	bpl.n	80064f8 <__sflush_r+0x44>
 80064ec:	6863      	ldr	r3, [r4, #4]
 80064ee:	1ad2      	subs	r2, r2, r3
 80064f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80064f2:	b10b      	cbz	r3, 80064f8 <__sflush_r+0x44>
 80064f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064f6:	1ad2      	subs	r2, r2, r3
 80064f8:	2300      	movs	r3, #0
 80064fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80064fc:	6a21      	ldr	r1, [r4, #32]
 80064fe:	4628      	mov	r0, r5
 8006500:	47b0      	blx	r6
 8006502:	1c43      	adds	r3, r0, #1
 8006504:	89a3      	ldrh	r3, [r4, #12]
 8006506:	d106      	bne.n	8006516 <__sflush_r+0x62>
 8006508:	6829      	ldr	r1, [r5, #0]
 800650a:	291d      	cmp	r1, #29
 800650c:	d82b      	bhi.n	8006566 <__sflush_r+0xb2>
 800650e:	4a2a      	ldr	r2, [pc, #168]	@ (80065b8 <__sflush_r+0x104>)
 8006510:	410a      	asrs	r2, r1
 8006512:	07d6      	lsls	r6, r2, #31
 8006514:	d427      	bmi.n	8006566 <__sflush_r+0xb2>
 8006516:	2200      	movs	r2, #0
 8006518:	6062      	str	r2, [r4, #4]
 800651a:	04d9      	lsls	r1, r3, #19
 800651c:	6922      	ldr	r2, [r4, #16]
 800651e:	6022      	str	r2, [r4, #0]
 8006520:	d504      	bpl.n	800652c <__sflush_r+0x78>
 8006522:	1c42      	adds	r2, r0, #1
 8006524:	d101      	bne.n	800652a <__sflush_r+0x76>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	b903      	cbnz	r3, 800652c <__sflush_r+0x78>
 800652a:	6560      	str	r0, [r4, #84]	@ 0x54
 800652c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800652e:	602f      	str	r7, [r5, #0]
 8006530:	b1b9      	cbz	r1, 8006562 <__sflush_r+0xae>
 8006532:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006536:	4299      	cmp	r1, r3
 8006538:	d002      	beq.n	8006540 <__sflush_r+0x8c>
 800653a:	4628      	mov	r0, r5
 800653c:	f000 fe44 	bl	80071c8 <_free_r>
 8006540:	2300      	movs	r3, #0
 8006542:	6363      	str	r3, [r4, #52]	@ 0x34
 8006544:	e00d      	b.n	8006562 <__sflush_r+0xae>
 8006546:	2301      	movs	r3, #1
 8006548:	4628      	mov	r0, r5
 800654a:	47b0      	blx	r6
 800654c:	4602      	mov	r2, r0
 800654e:	1c50      	adds	r0, r2, #1
 8006550:	d1c9      	bne.n	80064e6 <__sflush_r+0x32>
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d0c6      	beq.n	80064e6 <__sflush_r+0x32>
 8006558:	2b1d      	cmp	r3, #29
 800655a:	d001      	beq.n	8006560 <__sflush_r+0xac>
 800655c:	2b16      	cmp	r3, #22
 800655e:	d11e      	bne.n	800659e <__sflush_r+0xea>
 8006560:	602f      	str	r7, [r5, #0]
 8006562:	2000      	movs	r0, #0
 8006564:	e022      	b.n	80065ac <__sflush_r+0xf8>
 8006566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800656a:	b21b      	sxth	r3, r3
 800656c:	e01b      	b.n	80065a6 <__sflush_r+0xf2>
 800656e:	690f      	ldr	r7, [r1, #16]
 8006570:	2f00      	cmp	r7, #0
 8006572:	d0f6      	beq.n	8006562 <__sflush_r+0xae>
 8006574:	0793      	lsls	r3, r2, #30
 8006576:	680e      	ldr	r6, [r1, #0]
 8006578:	bf08      	it	eq
 800657a:	694b      	ldreq	r3, [r1, #20]
 800657c:	600f      	str	r7, [r1, #0]
 800657e:	bf18      	it	ne
 8006580:	2300      	movne	r3, #0
 8006582:	eba6 0807 	sub.w	r8, r6, r7
 8006586:	608b      	str	r3, [r1, #8]
 8006588:	f1b8 0f00 	cmp.w	r8, #0
 800658c:	dde9      	ble.n	8006562 <__sflush_r+0xae>
 800658e:	6a21      	ldr	r1, [r4, #32]
 8006590:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006592:	4643      	mov	r3, r8
 8006594:	463a      	mov	r2, r7
 8006596:	4628      	mov	r0, r5
 8006598:	47b0      	blx	r6
 800659a:	2800      	cmp	r0, #0
 800659c:	dc08      	bgt.n	80065b0 <__sflush_r+0xfc>
 800659e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065b0:	4407      	add	r7, r0
 80065b2:	eba8 0800 	sub.w	r8, r8, r0
 80065b6:	e7e7      	b.n	8006588 <__sflush_r+0xd4>
 80065b8:	dfbffffe 	.word	0xdfbffffe

080065bc <_fflush_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	690b      	ldr	r3, [r1, #16]
 80065c0:	4605      	mov	r5, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	b913      	cbnz	r3, 80065cc <_fflush_r+0x10>
 80065c6:	2500      	movs	r5, #0
 80065c8:	4628      	mov	r0, r5
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	b118      	cbz	r0, 80065d6 <_fflush_r+0x1a>
 80065ce:	6a03      	ldr	r3, [r0, #32]
 80065d0:	b90b      	cbnz	r3, 80065d6 <_fflush_r+0x1a>
 80065d2:	f7fe f9f9 	bl	80049c8 <__sinit>
 80065d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0f3      	beq.n	80065c6 <_fflush_r+0xa>
 80065de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80065e0:	07d0      	lsls	r0, r2, #31
 80065e2:	d404      	bmi.n	80065ee <_fflush_r+0x32>
 80065e4:	0599      	lsls	r1, r3, #22
 80065e6:	d402      	bmi.n	80065ee <_fflush_r+0x32>
 80065e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80065ea:	f7ff f878 	bl	80056de <__retarget_lock_acquire_recursive>
 80065ee:	4628      	mov	r0, r5
 80065f0:	4621      	mov	r1, r4
 80065f2:	f7ff ff5f 	bl	80064b4 <__sflush_r>
 80065f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80065f8:	07da      	lsls	r2, r3, #31
 80065fa:	4605      	mov	r5, r0
 80065fc:	d4e4      	bmi.n	80065c8 <_fflush_r+0xc>
 80065fe:	89a3      	ldrh	r3, [r4, #12]
 8006600:	059b      	lsls	r3, r3, #22
 8006602:	d4e1      	bmi.n	80065c8 <_fflush_r+0xc>
 8006604:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006606:	f7ff f86b 	bl	80056e0 <__retarget_lock_release_recursive>
 800660a:	e7dd      	b.n	80065c8 <_fflush_r+0xc>

0800660c <__malloc_lock>:
 800660c:	4801      	ldr	r0, [pc, #4]	@ (8006614 <__malloc_lock+0x8>)
 800660e:	f7ff b866 	b.w	80056de <__retarget_lock_acquire_recursive>
 8006612:	bf00      	nop
 8006614:	2000058c 	.word	0x2000058c

08006618 <__malloc_unlock>:
 8006618:	4801      	ldr	r0, [pc, #4]	@ (8006620 <__malloc_unlock+0x8>)
 800661a:	f7ff b861 	b.w	80056e0 <__retarget_lock_release_recursive>
 800661e:	bf00      	nop
 8006620:	2000058c 	.word	0x2000058c

08006624 <_Balloc>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	69c6      	ldr	r6, [r0, #28]
 8006628:	4604      	mov	r4, r0
 800662a:	460d      	mov	r5, r1
 800662c:	b976      	cbnz	r6, 800664c <_Balloc+0x28>
 800662e:	2010      	movs	r0, #16
 8006630:	f000 fe14 	bl	800725c <malloc>
 8006634:	4602      	mov	r2, r0
 8006636:	61e0      	str	r0, [r4, #28]
 8006638:	b920      	cbnz	r0, 8006644 <_Balloc+0x20>
 800663a:	4b18      	ldr	r3, [pc, #96]	@ (800669c <_Balloc+0x78>)
 800663c:	4818      	ldr	r0, [pc, #96]	@ (80066a0 <_Balloc+0x7c>)
 800663e:	216b      	movs	r1, #107	@ 0x6b
 8006640:	f000 fd90 	bl	8007164 <__assert_func>
 8006644:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006648:	6006      	str	r6, [r0, #0]
 800664a:	60c6      	str	r6, [r0, #12]
 800664c:	69e6      	ldr	r6, [r4, #28]
 800664e:	68f3      	ldr	r3, [r6, #12]
 8006650:	b183      	cbz	r3, 8006674 <_Balloc+0x50>
 8006652:	69e3      	ldr	r3, [r4, #28]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800665a:	b9b8      	cbnz	r0, 800668c <_Balloc+0x68>
 800665c:	2101      	movs	r1, #1
 800665e:	fa01 f605 	lsl.w	r6, r1, r5
 8006662:	1d72      	adds	r2, r6, #5
 8006664:	0092      	lsls	r2, r2, #2
 8006666:	4620      	mov	r0, r4
 8006668:	f000 fd9a 	bl	80071a0 <_calloc_r>
 800666c:	b160      	cbz	r0, 8006688 <_Balloc+0x64>
 800666e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006672:	e00e      	b.n	8006692 <_Balloc+0x6e>
 8006674:	2221      	movs	r2, #33	@ 0x21
 8006676:	2104      	movs	r1, #4
 8006678:	4620      	mov	r0, r4
 800667a:	f000 fd91 	bl	80071a0 <_calloc_r>
 800667e:	69e3      	ldr	r3, [r4, #28]
 8006680:	60f0      	str	r0, [r6, #12]
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e4      	bne.n	8006652 <_Balloc+0x2e>
 8006688:	2000      	movs	r0, #0
 800668a:	bd70      	pop	{r4, r5, r6, pc}
 800668c:	6802      	ldr	r2, [r0, #0]
 800668e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006692:	2300      	movs	r3, #0
 8006694:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006698:	e7f7      	b.n	800668a <_Balloc+0x66>
 800669a:	bf00      	nop
 800669c:	0800851d 	.word	0x0800851d
 80066a0:	08008534 	.word	0x08008534

080066a4 <_Bfree>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	69c6      	ldr	r6, [r0, #28]
 80066a8:	4605      	mov	r5, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	b976      	cbnz	r6, 80066cc <_Bfree+0x28>
 80066ae:	2010      	movs	r0, #16
 80066b0:	f000 fdd4 	bl	800725c <malloc>
 80066b4:	4602      	mov	r2, r0
 80066b6:	61e8      	str	r0, [r5, #28]
 80066b8:	b920      	cbnz	r0, 80066c4 <_Bfree+0x20>
 80066ba:	4b09      	ldr	r3, [pc, #36]	@ (80066e0 <_Bfree+0x3c>)
 80066bc:	4809      	ldr	r0, [pc, #36]	@ (80066e4 <_Bfree+0x40>)
 80066be:	218f      	movs	r1, #143	@ 0x8f
 80066c0:	f000 fd50 	bl	8007164 <__assert_func>
 80066c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066c8:	6006      	str	r6, [r0, #0]
 80066ca:	60c6      	str	r6, [r0, #12]
 80066cc:	b13c      	cbz	r4, 80066de <_Bfree+0x3a>
 80066ce:	69eb      	ldr	r3, [r5, #28]
 80066d0:	6862      	ldr	r2, [r4, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066d8:	6021      	str	r1, [r4, #0]
 80066da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066de:	bd70      	pop	{r4, r5, r6, pc}
 80066e0:	0800851d 	.word	0x0800851d
 80066e4:	08008534 	.word	0x08008534

080066e8 <__multadd>:
 80066e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066ec:	690d      	ldr	r5, [r1, #16]
 80066ee:	4607      	mov	r7, r0
 80066f0:	460c      	mov	r4, r1
 80066f2:	461e      	mov	r6, r3
 80066f4:	f101 0c14 	add.w	ip, r1, #20
 80066f8:	2000      	movs	r0, #0
 80066fa:	f8dc 3000 	ldr.w	r3, [ip]
 80066fe:	b299      	uxth	r1, r3
 8006700:	fb02 6101 	mla	r1, r2, r1, r6
 8006704:	0c1e      	lsrs	r6, r3, #16
 8006706:	0c0b      	lsrs	r3, r1, #16
 8006708:	fb02 3306 	mla	r3, r2, r6, r3
 800670c:	b289      	uxth	r1, r1
 800670e:	3001      	adds	r0, #1
 8006710:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006714:	4285      	cmp	r5, r0
 8006716:	f84c 1b04 	str.w	r1, [ip], #4
 800671a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800671e:	dcec      	bgt.n	80066fa <__multadd+0x12>
 8006720:	b30e      	cbz	r6, 8006766 <__multadd+0x7e>
 8006722:	68a3      	ldr	r3, [r4, #8]
 8006724:	42ab      	cmp	r3, r5
 8006726:	dc19      	bgt.n	800675c <__multadd+0x74>
 8006728:	6861      	ldr	r1, [r4, #4]
 800672a:	4638      	mov	r0, r7
 800672c:	3101      	adds	r1, #1
 800672e:	f7ff ff79 	bl	8006624 <_Balloc>
 8006732:	4680      	mov	r8, r0
 8006734:	b928      	cbnz	r0, 8006742 <__multadd+0x5a>
 8006736:	4602      	mov	r2, r0
 8006738:	4b0c      	ldr	r3, [pc, #48]	@ (800676c <__multadd+0x84>)
 800673a:	480d      	ldr	r0, [pc, #52]	@ (8006770 <__multadd+0x88>)
 800673c:	21ba      	movs	r1, #186	@ 0xba
 800673e:	f000 fd11 	bl	8007164 <__assert_func>
 8006742:	6922      	ldr	r2, [r4, #16]
 8006744:	3202      	adds	r2, #2
 8006746:	f104 010c 	add.w	r1, r4, #12
 800674a:	0092      	lsls	r2, r2, #2
 800674c:	300c      	adds	r0, #12
 800674e:	f7fe ffc8 	bl	80056e2 <memcpy>
 8006752:	4621      	mov	r1, r4
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff ffa5 	bl	80066a4 <_Bfree>
 800675a:	4644      	mov	r4, r8
 800675c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006760:	3501      	adds	r5, #1
 8006762:	615e      	str	r6, [r3, #20]
 8006764:	6125      	str	r5, [r4, #16]
 8006766:	4620      	mov	r0, r4
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	08008479 	.word	0x08008479
 8006770:	08008534 	.word	0x08008534

08006774 <__s2b>:
 8006774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006778:	460c      	mov	r4, r1
 800677a:	4615      	mov	r5, r2
 800677c:	461f      	mov	r7, r3
 800677e:	2209      	movs	r2, #9
 8006780:	3308      	adds	r3, #8
 8006782:	4606      	mov	r6, r0
 8006784:	fb93 f3f2 	sdiv	r3, r3, r2
 8006788:	2100      	movs	r1, #0
 800678a:	2201      	movs	r2, #1
 800678c:	429a      	cmp	r2, r3
 800678e:	db09      	blt.n	80067a4 <__s2b+0x30>
 8006790:	4630      	mov	r0, r6
 8006792:	f7ff ff47 	bl	8006624 <_Balloc>
 8006796:	b940      	cbnz	r0, 80067aa <__s2b+0x36>
 8006798:	4602      	mov	r2, r0
 800679a:	4b19      	ldr	r3, [pc, #100]	@ (8006800 <__s2b+0x8c>)
 800679c:	4819      	ldr	r0, [pc, #100]	@ (8006804 <__s2b+0x90>)
 800679e:	21d3      	movs	r1, #211	@ 0xd3
 80067a0:	f000 fce0 	bl	8007164 <__assert_func>
 80067a4:	0052      	lsls	r2, r2, #1
 80067a6:	3101      	adds	r1, #1
 80067a8:	e7f0      	b.n	800678c <__s2b+0x18>
 80067aa:	9b08      	ldr	r3, [sp, #32]
 80067ac:	6143      	str	r3, [r0, #20]
 80067ae:	2d09      	cmp	r5, #9
 80067b0:	f04f 0301 	mov.w	r3, #1
 80067b4:	6103      	str	r3, [r0, #16]
 80067b6:	dd16      	ble.n	80067e6 <__s2b+0x72>
 80067b8:	f104 0909 	add.w	r9, r4, #9
 80067bc:	46c8      	mov	r8, r9
 80067be:	442c      	add	r4, r5
 80067c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80067c4:	4601      	mov	r1, r0
 80067c6:	3b30      	subs	r3, #48	@ 0x30
 80067c8:	220a      	movs	r2, #10
 80067ca:	4630      	mov	r0, r6
 80067cc:	f7ff ff8c 	bl	80066e8 <__multadd>
 80067d0:	45a0      	cmp	r8, r4
 80067d2:	d1f5      	bne.n	80067c0 <__s2b+0x4c>
 80067d4:	f1a5 0408 	sub.w	r4, r5, #8
 80067d8:	444c      	add	r4, r9
 80067da:	1b2d      	subs	r5, r5, r4
 80067dc:	1963      	adds	r3, r4, r5
 80067de:	42bb      	cmp	r3, r7
 80067e0:	db04      	blt.n	80067ec <__s2b+0x78>
 80067e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067e6:	340a      	adds	r4, #10
 80067e8:	2509      	movs	r5, #9
 80067ea:	e7f6      	b.n	80067da <__s2b+0x66>
 80067ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80067f0:	4601      	mov	r1, r0
 80067f2:	3b30      	subs	r3, #48	@ 0x30
 80067f4:	220a      	movs	r2, #10
 80067f6:	4630      	mov	r0, r6
 80067f8:	f7ff ff76 	bl	80066e8 <__multadd>
 80067fc:	e7ee      	b.n	80067dc <__s2b+0x68>
 80067fe:	bf00      	nop
 8006800:	08008479 	.word	0x08008479
 8006804:	08008534 	.word	0x08008534

08006808 <__hi0bits>:
 8006808:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800680c:	4603      	mov	r3, r0
 800680e:	bf36      	itet	cc
 8006810:	0403      	lslcc	r3, r0, #16
 8006812:	2000      	movcs	r0, #0
 8006814:	2010      	movcc	r0, #16
 8006816:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800681a:	bf3c      	itt	cc
 800681c:	021b      	lslcc	r3, r3, #8
 800681e:	3008      	addcc	r0, #8
 8006820:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006824:	bf3c      	itt	cc
 8006826:	011b      	lslcc	r3, r3, #4
 8006828:	3004      	addcc	r0, #4
 800682a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800682e:	bf3c      	itt	cc
 8006830:	009b      	lslcc	r3, r3, #2
 8006832:	3002      	addcc	r0, #2
 8006834:	2b00      	cmp	r3, #0
 8006836:	db05      	blt.n	8006844 <__hi0bits+0x3c>
 8006838:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800683c:	f100 0001 	add.w	r0, r0, #1
 8006840:	bf08      	it	eq
 8006842:	2020      	moveq	r0, #32
 8006844:	4770      	bx	lr

08006846 <__lo0bits>:
 8006846:	6803      	ldr	r3, [r0, #0]
 8006848:	4602      	mov	r2, r0
 800684a:	f013 0007 	ands.w	r0, r3, #7
 800684e:	d00b      	beq.n	8006868 <__lo0bits+0x22>
 8006850:	07d9      	lsls	r1, r3, #31
 8006852:	d421      	bmi.n	8006898 <__lo0bits+0x52>
 8006854:	0798      	lsls	r0, r3, #30
 8006856:	bf49      	itett	mi
 8006858:	085b      	lsrmi	r3, r3, #1
 800685a:	089b      	lsrpl	r3, r3, #2
 800685c:	2001      	movmi	r0, #1
 800685e:	6013      	strmi	r3, [r2, #0]
 8006860:	bf5c      	itt	pl
 8006862:	6013      	strpl	r3, [r2, #0]
 8006864:	2002      	movpl	r0, #2
 8006866:	4770      	bx	lr
 8006868:	b299      	uxth	r1, r3
 800686a:	b909      	cbnz	r1, 8006870 <__lo0bits+0x2a>
 800686c:	0c1b      	lsrs	r3, r3, #16
 800686e:	2010      	movs	r0, #16
 8006870:	b2d9      	uxtb	r1, r3
 8006872:	b909      	cbnz	r1, 8006878 <__lo0bits+0x32>
 8006874:	3008      	adds	r0, #8
 8006876:	0a1b      	lsrs	r3, r3, #8
 8006878:	0719      	lsls	r1, r3, #28
 800687a:	bf04      	itt	eq
 800687c:	091b      	lsreq	r3, r3, #4
 800687e:	3004      	addeq	r0, #4
 8006880:	0799      	lsls	r1, r3, #30
 8006882:	bf04      	itt	eq
 8006884:	089b      	lsreq	r3, r3, #2
 8006886:	3002      	addeq	r0, #2
 8006888:	07d9      	lsls	r1, r3, #31
 800688a:	d403      	bmi.n	8006894 <__lo0bits+0x4e>
 800688c:	085b      	lsrs	r3, r3, #1
 800688e:	f100 0001 	add.w	r0, r0, #1
 8006892:	d003      	beq.n	800689c <__lo0bits+0x56>
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	4770      	bx	lr
 8006898:	2000      	movs	r0, #0
 800689a:	4770      	bx	lr
 800689c:	2020      	movs	r0, #32
 800689e:	4770      	bx	lr

080068a0 <__i2b>:
 80068a0:	b510      	push	{r4, lr}
 80068a2:	460c      	mov	r4, r1
 80068a4:	2101      	movs	r1, #1
 80068a6:	f7ff febd 	bl	8006624 <_Balloc>
 80068aa:	4602      	mov	r2, r0
 80068ac:	b928      	cbnz	r0, 80068ba <__i2b+0x1a>
 80068ae:	4b05      	ldr	r3, [pc, #20]	@ (80068c4 <__i2b+0x24>)
 80068b0:	4805      	ldr	r0, [pc, #20]	@ (80068c8 <__i2b+0x28>)
 80068b2:	f240 1145 	movw	r1, #325	@ 0x145
 80068b6:	f000 fc55 	bl	8007164 <__assert_func>
 80068ba:	2301      	movs	r3, #1
 80068bc:	6144      	str	r4, [r0, #20]
 80068be:	6103      	str	r3, [r0, #16]
 80068c0:	bd10      	pop	{r4, pc}
 80068c2:	bf00      	nop
 80068c4:	08008479 	.word	0x08008479
 80068c8:	08008534 	.word	0x08008534

080068cc <__multiply>:
 80068cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d0:	4614      	mov	r4, r2
 80068d2:	690a      	ldr	r2, [r1, #16]
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	bfa8      	it	ge
 80068da:	4623      	movge	r3, r4
 80068dc:	460f      	mov	r7, r1
 80068de:	bfa4      	itt	ge
 80068e0:	460c      	movge	r4, r1
 80068e2:	461f      	movge	r7, r3
 80068e4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80068e8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80068ec:	68a3      	ldr	r3, [r4, #8]
 80068ee:	6861      	ldr	r1, [r4, #4]
 80068f0:	eb0a 0609 	add.w	r6, sl, r9
 80068f4:	42b3      	cmp	r3, r6
 80068f6:	b085      	sub	sp, #20
 80068f8:	bfb8      	it	lt
 80068fa:	3101      	addlt	r1, #1
 80068fc:	f7ff fe92 	bl	8006624 <_Balloc>
 8006900:	b930      	cbnz	r0, 8006910 <__multiply+0x44>
 8006902:	4602      	mov	r2, r0
 8006904:	4b44      	ldr	r3, [pc, #272]	@ (8006a18 <__multiply+0x14c>)
 8006906:	4845      	ldr	r0, [pc, #276]	@ (8006a1c <__multiply+0x150>)
 8006908:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800690c:	f000 fc2a 	bl	8007164 <__assert_func>
 8006910:	f100 0514 	add.w	r5, r0, #20
 8006914:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006918:	462b      	mov	r3, r5
 800691a:	2200      	movs	r2, #0
 800691c:	4543      	cmp	r3, r8
 800691e:	d321      	bcc.n	8006964 <__multiply+0x98>
 8006920:	f107 0114 	add.w	r1, r7, #20
 8006924:	f104 0214 	add.w	r2, r4, #20
 8006928:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800692c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006930:	9302      	str	r3, [sp, #8]
 8006932:	1b13      	subs	r3, r2, r4
 8006934:	3b15      	subs	r3, #21
 8006936:	f023 0303 	bic.w	r3, r3, #3
 800693a:	3304      	adds	r3, #4
 800693c:	f104 0715 	add.w	r7, r4, #21
 8006940:	42ba      	cmp	r2, r7
 8006942:	bf38      	it	cc
 8006944:	2304      	movcc	r3, #4
 8006946:	9301      	str	r3, [sp, #4]
 8006948:	9b02      	ldr	r3, [sp, #8]
 800694a:	9103      	str	r1, [sp, #12]
 800694c:	428b      	cmp	r3, r1
 800694e:	d80c      	bhi.n	800696a <__multiply+0x9e>
 8006950:	2e00      	cmp	r6, #0
 8006952:	dd03      	ble.n	800695c <__multiply+0x90>
 8006954:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006958:	2b00      	cmp	r3, #0
 800695a:	d05b      	beq.n	8006a14 <__multiply+0x148>
 800695c:	6106      	str	r6, [r0, #16]
 800695e:	b005      	add	sp, #20
 8006960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006964:	f843 2b04 	str.w	r2, [r3], #4
 8006968:	e7d8      	b.n	800691c <__multiply+0x50>
 800696a:	f8b1 a000 	ldrh.w	sl, [r1]
 800696e:	f1ba 0f00 	cmp.w	sl, #0
 8006972:	d024      	beq.n	80069be <__multiply+0xf2>
 8006974:	f104 0e14 	add.w	lr, r4, #20
 8006978:	46a9      	mov	r9, r5
 800697a:	f04f 0c00 	mov.w	ip, #0
 800697e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006982:	f8d9 3000 	ldr.w	r3, [r9]
 8006986:	fa1f fb87 	uxth.w	fp, r7
 800698a:	b29b      	uxth	r3, r3
 800698c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006990:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006994:	f8d9 7000 	ldr.w	r7, [r9]
 8006998:	4463      	add	r3, ip
 800699a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800699e:	fb0a c70b 	mla	r7, sl, fp, ip
 80069a2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80069ac:	4572      	cmp	r2, lr
 80069ae:	f849 3b04 	str.w	r3, [r9], #4
 80069b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80069b6:	d8e2      	bhi.n	800697e <__multiply+0xb2>
 80069b8:	9b01      	ldr	r3, [sp, #4]
 80069ba:	f845 c003 	str.w	ip, [r5, r3]
 80069be:	9b03      	ldr	r3, [sp, #12]
 80069c0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80069c4:	3104      	adds	r1, #4
 80069c6:	f1b9 0f00 	cmp.w	r9, #0
 80069ca:	d021      	beq.n	8006a10 <__multiply+0x144>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	f104 0c14 	add.w	ip, r4, #20
 80069d2:	46ae      	mov	lr, r5
 80069d4:	f04f 0a00 	mov.w	sl, #0
 80069d8:	f8bc b000 	ldrh.w	fp, [ip]
 80069dc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80069e0:	fb09 770b 	mla	r7, r9, fp, r7
 80069e4:	4457      	add	r7, sl
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80069ec:	f84e 3b04 	str.w	r3, [lr], #4
 80069f0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80069f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069f8:	f8be 3000 	ldrh.w	r3, [lr]
 80069fc:	fb09 330a 	mla	r3, r9, sl, r3
 8006a00:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006a04:	4562      	cmp	r2, ip
 8006a06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a0a:	d8e5      	bhi.n	80069d8 <__multiply+0x10c>
 8006a0c:	9f01      	ldr	r7, [sp, #4]
 8006a0e:	51eb      	str	r3, [r5, r7]
 8006a10:	3504      	adds	r5, #4
 8006a12:	e799      	b.n	8006948 <__multiply+0x7c>
 8006a14:	3e01      	subs	r6, #1
 8006a16:	e79b      	b.n	8006950 <__multiply+0x84>
 8006a18:	08008479 	.word	0x08008479
 8006a1c:	08008534 	.word	0x08008534

08006a20 <__pow5mult>:
 8006a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a24:	4615      	mov	r5, r2
 8006a26:	f012 0203 	ands.w	r2, r2, #3
 8006a2a:	4607      	mov	r7, r0
 8006a2c:	460e      	mov	r6, r1
 8006a2e:	d007      	beq.n	8006a40 <__pow5mult+0x20>
 8006a30:	4c25      	ldr	r4, [pc, #148]	@ (8006ac8 <__pow5mult+0xa8>)
 8006a32:	3a01      	subs	r2, #1
 8006a34:	2300      	movs	r3, #0
 8006a36:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a3a:	f7ff fe55 	bl	80066e8 <__multadd>
 8006a3e:	4606      	mov	r6, r0
 8006a40:	10ad      	asrs	r5, r5, #2
 8006a42:	d03d      	beq.n	8006ac0 <__pow5mult+0xa0>
 8006a44:	69fc      	ldr	r4, [r7, #28]
 8006a46:	b97c      	cbnz	r4, 8006a68 <__pow5mult+0x48>
 8006a48:	2010      	movs	r0, #16
 8006a4a:	f000 fc07 	bl	800725c <malloc>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	61f8      	str	r0, [r7, #28]
 8006a52:	b928      	cbnz	r0, 8006a60 <__pow5mult+0x40>
 8006a54:	4b1d      	ldr	r3, [pc, #116]	@ (8006acc <__pow5mult+0xac>)
 8006a56:	481e      	ldr	r0, [pc, #120]	@ (8006ad0 <__pow5mult+0xb0>)
 8006a58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006a5c:	f000 fb82 	bl	8007164 <__assert_func>
 8006a60:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a64:	6004      	str	r4, [r0, #0]
 8006a66:	60c4      	str	r4, [r0, #12]
 8006a68:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006a6c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a70:	b94c      	cbnz	r4, 8006a86 <__pow5mult+0x66>
 8006a72:	f240 2171 	movw	r1, #625	@ 0x271
 8006a76:	4638      	mov	r0, r7
 8006a78:	f7ff ff12 	bl	80068a0 <__i2b>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a82:	4604      	mov	r4, r0
 8006a84:	6003      	str	r3, [r0, #0]
 8006a86:	f04f 0900 	mov.w	r9, #0
 8006a8a:	07eb      	lsls	r3, r5, #31
 8006a8c:	d50a      	bpl.n	8006aa4 <__pow5mult+0x84>
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4622      	mov	r2, r4
 8006a92:	4638      	mov	r0, r7
 8006a94:	f7ff ff1a 	bl	80068cc <__multiply>
 8006a98:	4631      	mov	r1, r6
 8006a9a:	4680      	mov	r8, r0
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	f7ff fe01 	bl	80066a4 <_Bfree>
 8006aa2:	4646      	mov	r6, r8
 8006aa4:	106d      	asrs	r5, r5, #1
 8006aa6:	d00b      	beq.n	8006ac0 <__pow5mult+0xa0>
 8006aa8:	6820      	ldr	r0, [r4, #0]
 8006aaa:	b938      	cbnz	r0, 8006abc <__pow5mult+0x9c>
 8006aac:	4622      	mov	r2, r4
 8006aae:	4621      	mov	r1, r4
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	f7ff ff0b 	bl	80068cc <__multiply>
 8006ab6:	6020      	str	r0, [r4, #0]
 8006ab8:	f8c0 9000 	str.w	r9, [r0]
 8006abc:	4604      	mov	r4, r0
 8006abe:	e7e4      	b.n	8006a8a <__pow5mult+0x6a>
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ac6:	bf00      	nop
 8006ac8:	08008590 	.word	0x08008590
 8006acc:	0800851d 	.word	0x0800851d
 8006ad0:	08008534 	.word	0x08008534

08006ad4 <__lshift>:
 8006ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad8:	460c      	mov	r4, r1
 8006ada:	6849      	ldr	r1, [r1, #4]
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006ae2:	68a3      	ldr	r3, [r4, #8]
 8006ae4:	4607      	mov	r7, r0
 8006ae6:	4691      	mov	r9, r2
 8006ae8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006aec:	f108 0601 	add.w	r6, r8, #1
 8006af0:	42b3      	cmp	r3, r6
 8006af2:	db0b      	blt.n	8006b0c <__lshift+0x38>
 8006af4:	4638      	mov	r0, r7
 8006af6:	f7ff fd95 	bl	8006624 <_Balloc>
 8006afa:	4605      	mov	r5, r0
 8006afc:	b948      	cbnz	r0, 8006b12 <__lshift+0x3e>
 8006afe:	4602      	mov	r2, r0
 8006b00:	4b28      	ldr	r3, [pc, #160]	@ (8006ba4 <__lshift+0xd0>)
 8006b02:	4829      	ldr	r0, [pc, #164]	@ (8006ba8 <__lshift+0xd4>)
 8006b04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b08:	f000 fb2c 	bl	8007164 <__assert_func>
 8006b0c:	3101      	adds	r1, #1
 8006b0e:	005b      	lsls	r3, r3, #1
 8006b10:	e7ee      	b.n	8006af0 <__lshift+0x1c>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f100 0114 	add.w	r1, r0, #20
 8006b18:	f100 0210 	add.w	r2, r0, #16
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	4553      	cmp	r3, sl
 8006b20:	db33      	blt.n	8006b8a <__lshift+0xb6>
 8006b22:	6920      	ldr	r0, [r4, #16]
 8006b24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b28:	f104 0314 	add.w	r3, r4, #20
 8006b2c:	f019 091f 	ands.w	r9, r9, #31
 8006b30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b38:	d02b      	beq.n	8006b92 <__lshift+0xbe>
 8006b3a:	f1c9 0e20 	rsb	lr, r9, #32
 8006b3e:	468a      	mov	sl, r1
 8006b40:	2200      	movs	r2, #0
 8006b42:	6818      	ldr	r0, [r3, #0]
 8006b44:	fa00 f009 	lsl.w	r0, r0, r9
 8006b48:	4310      	orrs	r0, r2
 8006b4a:	f84a 0b04 	str.w	r0, [sl], #4
 8006b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b52:	459c      	cmp	ip, r3
 8006b54:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b58:	d8f3      	bhi.n	8006b42 <__lshift+0x6e>
 8006b5a:	ebac 0304 	sub.w	r3, ip, r4
 8006b5e:	3b15      	subs	r3, #21
 8006b60:	f023 0303 	bic.w	r3, r3, #3
 8006b64:	3304      	adds	r3, #4
 8006b66:	f104 0015 	add.w	r0, r4, #21
 8006b6a:	4584      	cmp	ip, r0
 8006b6c:	bf38      	it	cc
 8006b6e:	2304      	movcc	r3, #4
 8006b70:	50ca      	str	r2, [r1, r3]
 8006b72:	b10a      	cbz	r2, 8006b78 <__lshift+0xa4>
 8006b74:	f108 0602 	add.w	r6, r8, #2
 8006b78:	3e01      	subs	r6, #1
 8006b7a:	4638      	mov	r0, r7
 8006b7c:	612e      	str	r6, [r5, #16]
 8006b7e:	4621      	mov	r1, r4
 8006b80:	f7ff fd90 	bl	80066a4 <_Bfree>
 8006b84:	4628      	mov	r0, r5
 8006b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b8e:	3301      	adds	r3, #1
 8006b90:	e7c5      	b.n	8006b1e <__lshift+0x4a>
 8006b92:	3904      	subs	r1, #4
 8006b94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b98:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b9c:	459c      	cmp	ip, r3
 8006b9e:	d8f9      	bhi.n	8006b94 <__lshift+0xc0>
 8006ba0:	e7ea      	b.n	8006b78 <__lshift+0xa4>
 8006ba2:	bf00      	nop
 8006ba4:	08008479 	.word	0x08008479
 8006ba8:	08008534 	.word	0x08008534

08006bac <__mcmp>:
 8006bac:	690a      	ldr	r2, [r1, #16]
 8006bae:	4603      	mov	r3, r0
 8006bb0:	6900      	ldr	r0, [r0, #16]
 8006bb2:	1a80      	subs	r0, r0, r2
 8006bb4:	b530      	push	{r4, r5, lr}
 8006bb6:	d10e      	bne.n	8006bd6 <__mcmp+0x2a>
 8006bb8:	3314      	adds	r3, #20
 8006bba:	3114      	adds	r1, #20
 8006bbc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006bc0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006bc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006bc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006bcc:	4295      	cmp	r5, r2
 8006bce:	d003      	beq.n	8006bd8 <__mcmp+0x2c>
 8006bd0:	d205      	bcs.n	8006bde <__mcmp+0x32>
 8006bd2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006bd6:	bd30      	pop	{r4, r5, pc}
 8006bd8:	42a3      	cmp	r3, r4
 8006bda:	d3f3      	bcc.n	8006bc4 <__mcmp+0x18>
 8006bdc:	e7fb      	b.n	8006bd6 <__mcmp+0x2a>
 8006bde:	2001      	movs	r0, #1
 8006be0:	e7f9      	b.n	8006bd6 <__mcmp+0x2a>
	...

08006be4 <__mdiff>:
 8006be4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be8:	4689      	mov	r9, r1
 8006bea:	4606      	mov	r6, r0
 8006bec:	4611      	mov	r1, r2
 8006bee:	4648      	mov	r0, r9
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	f7ff ffdb 	bl	8006bac <__mcmp>
 8006bf6:	1e05      	subs	r5, r0, #0
 8006bf8:	d112      	bne.n	8006c20 <__mdiff+0x3c>
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff fd11 	bl	8006624 <_Balloc>
 8006c02:	4602      	mov	r2, r0
 8006c04:	b928      	cbnz	r0, 8006c12 <__mdiff+0x2e>
 8006c06:	4b3f      	ldr	r3, [pc, #252]	@ (8006d04 <__mdiff+0x120>)
 8006c08:	f240 2137 	movw	r1, #567	@ 0x237
 8006c0c:	483e      	ldr	r0, [pc, #248]	@ (8006d08 <__mdiff+0x124>)
 8006c0e:	f000 faa9 	bl	8007164 <__assert_func>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c18:	4610      	mov	r0, r2
 8006c1a:	b003      	add	sp, #12
 8006c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c20:	bfbc      	itt	lt
 8006c22:	464b      	movlt	r3, r9
 8006c24:	46a1      	movlt	r9, r4
 8006c26:	4630      	mov	r0, r6
 8006c28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c2c:	bfba      	itte	lt
 8006c2e:	461c      	movlt	r4, r3
 8006c30:	2501      	movlt	r5, #1
 8006c32:	2500      	movge	r5, #0
 8006c34:	f7ff fcf6 	bl	8006624 <_Balloc>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	b918      	cbnz	r0, 8006c44 <__mdiff+0x60>
 8006c3c:	4b31      	ldr	r3, [pc, #196]	@ (8006d04 <__mdiff+0x120>)
 8006c3e:	f240 2145 	movw	r1, #581	@ 0x245
 8006c42:	e7e3      	b.n	8006c0c <__mdiff+0x28>
 8006c44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c48:	6926      	ldr	r6, [r4, #16]
 8006c4a:	60c5      	str	r5, [r0, #12]
 8006c4c:	f109 0310 	add.w	r3, r9, #16
 8006c50:	f109 0514 	add.w	r5, r9, #20
 8006c54:	f104 0e14 	add.w	lr, r4, #20
 8006c58:	f100 0b14 	add.w	fp, r0, #20
 8006c5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006c60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006c64:	9301      	str	r3, [sp, #4]
 8006c66:	46d9      	mov	r9, fp
 8006c68:	f04f 0c00 	mov.w	ip, #0
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006c72:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	fa1f f38a 	uxth.w	r3, sl
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	b283      	uxth	r3, r0
 8006c80:	1acb      	subs	r3, r1, r3
 8006c82:	0c00      	lsrs	r0, r0, #16
 8006c84:	4463      	add	r3, ip
 8006c86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006c8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c94:	4576      	cmp	r6, lr
 8006c96:	f849 3b04 	str.w	r3, [r9], #4
 8006c9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c9e:	d8e5      	bhi.n	8006c6c <__mdiff+0x88>
 8006ca0:	1b33      	subs	r3, r6, r4
 8006ca2:	3b15      	subs	r3, #21
 8006ca4:	f023 0303 	bic.w	r3, r3, #3
 8006ca8:	3415      	adds	r4, #21
 8006caa:	3304      	adds	r3, #4
 8006cac:	42a6      	cmp	r6, r4
 8006cae:	bf38      	it	cc
 8006cb0:	2304      	movcc	r3, #4
 8006cb2:	441d      	add	r5, r3
 8006cb4:	445b      	add	r3, fp
 8006cb6:	461e      	mov	r6, r3
 8006cb8:	462c      	mov	r4, r5
 8006cba:	4544      	cmp	r4, r8
 8006cbc:	d30e      	bcc.n	8006cdc <__mdiff+0xf8>
 8006cbe:	f108 0103 	add.w	r1, r8, #3
 8006cc2:	1b49      	subs	r1, r1, r5
 8006cc4:	f021 0103 	bic.w	r1, r1, #3
 8006cc8:	3d03      	subs	r5, #3
 8006cca:	45a8      	cmp	r8, r5
 8006ccc:	bf38      	it	cc
 8006cce:	2100      	movcc	r1, #0
 8006cd0:	440b      	add	r3, r1
 8006cd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006cd6:	b191      	cbz	r1, 8006cfe <__mdiff+0x11a>
 8006cd8:	6117      	str	r7, [r2, #16]
 8006cda:	e79d      	b.n	8006c18 <__mdiff+0x34>
 8006cdc:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ce0:	46e6      	mov	lr, ip
 8006ce2:	0c08      	lsrs	r0, r1, #16
 8006ce4:	fa1c fc81 	uxtah	ip, ip, r1
 8006ce8:	4471      	add	r1, lr
 8006cea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006cee:	b289      	uxth	r1, r1
 8006cf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006cf4:	f846 1b04 	str.w	r1, [r6], #4
 8006cf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006cfc:	e7dd      	b.n	8006cba <__mdiff+0xd6>
 8006cfe:	3f01      	subs	r7, #1
 8006d00:	e7e7      	b.n	8006cd2 <__mdiff+0xee>
 8006d02:	bf00      	nop
 8006d04:	08008479 	.word	0x08008479
 8006d08:	08008534 	.word	0x08008534

08006d0c <__ulp>:
 8006d0c:	b082      	sub	sp, #8
 8006d0e:	ed8d 0b00 	vstr	d0, [sp]
 8006d12:	9a01      	ldr	r2, [sp, #4]
 8006d14:	4b0f      	ldr	r3, [pc, #60]	@ (8006d54 <__ulp+0x48>)
 8006d16:	4013      	ands	r3, r2
 8006d18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	dc08      	bgt.n	8006d32 <__ulp+0x26>
 8006d20:	425b      	negs	r3, r3
 8006d22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006d26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006d2a:	da04      	bge.n	8006d36 <__ulp+0x2a>
 8006d2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006d30:	4113      	asrs	r3, r2
 8006d32:	2200      	movs	r2, #0
 8006d34:	e008      	b.n	8006d48 <__ulp+0x3c>
 8006d36:	f1a2 0314 	sub.w	r3, r2, #20
 8006d3a:	2b1e      	cmp	r3, #30
 8006d3c:	bfda      	itte	le
 8006d3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006d42:	40da      	lsrle	r2, r3
 8006d44:	2201      	movgt	r2, #1
 8006d46:	2300      	movs	r3, #0
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4610      	mov	r0, r2
 8006d4c:	ec41 0b10 	vmov	d0, r0, r1
 8006d50:	b002      	add	sp, #8
 8006d52:	4770      	bx	lr
 8006d54:	7ff00000 	.word	0x7ff00000

08006d58 <__b2d>:
 8006d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5c:	6906      	ldr	r6, [r0, #16]
 8006d5e:	f100 0814 	add.w	r8, r0, #20
 8006d62:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006d66:	1f37      	subs	r7, r6, #4
 8006d68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7ff fd4b 	bl	8006808 <__hi0bits>
 8006d72:	f1c0 0320 	rsb	r3, r0, #32
 8006d76:	280a      	cmp	r0, #10
 8006d78:	600b      	str	r3, [r1, #0]
 8006d7a:	491b      	ldr	r1, [pc, #108]	@ (8006de8 <__b2d+0x90>)
 8006d7c:	dc15      	bgt.n	8006daa <__b2d+0x52>
 8006d7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006d82:	fa22 f30c 	lsr.w	r3, r2, ip
 8006d86:	45b8      	cmp	r8, r7
 8006d88:	ea43 0501 	orr.w	r5, r3, r1
 8006d8c:	bf34      	ite	cc
 8006d8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006d92:	2300      	movcs	r3, #0
 8006d94:	3015      	adds	r0, #21
 8006d96:	fa02 f000 	lsl.w	r0, r2, r0
 8006d9a:	fa23 f30c 	lsr.w	r3, r3, ip
 8006d9e:	4303      	orrs	r3, r0
 8006da0:	461c      	mov	r4, r3
 8006da2:	ec45 4b10 	vmov	d0, r4, r5
 8006da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006daa:	45b8      	cmp	r8, r7
 8006dac:	bf3a      	itte	cc
 8006dae:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006db2:	f1a6 0708 	subcc.w	r7, r6, #8
 8006db6:	2300      	movcs	r3, #0
 8006db8:	380b      	subs	r0, #11
 8006dba:	d012      	beq.n	8006de2 <__b2d+0x8a>
 8006dbc:	f1c0 0120 	rsb	r1, r0, #32
 8006dc0:	fa23 f401 	lsr.w	r4, r3, r1
 8006dc4:	4082      	lsls	r2, r0
 8006dc6:	4322      	orrs	r2, r4
 8006dc8:	4547      	cmp	r7, r8
 8006dca:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006dce:	bf8c      	ite	hi
 8006dd0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006dd4:	2200      	movls	r2, #0
 8006dd6:	4083      	lsls	r3, r0
 8006dd8:	40ca      	lsrs	r2, r1
 8006dda:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006dde:	4313      	orrs	r3, r2
 8006de0:	e7de      	b.n	8006da0 <__b2d+0x48>
 8006de2:	ea42 0501 	orr.w	r5, r2, r1
 8006de6:	e7db      	b.n	8006da0 <__b2d+0x48>
 8006de8:	3ff00000 	.word	0x3ff00000

08006dec <__d2b>:
 8006dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006df0:	460f      	mov	r7, r1
 8006df2:	2101      	movs	r1, #1
 8006df4:	ec59 8b10 	vmov	r8, r9, d0
 8006df8:	4616      	mov	r6, r2
 8006dfa:	f7ff fc13 	bl	8006624 <_Balloc>
 8006dfe:	4604      	mov	r4, r0
 8006e00:	b930      	cbnz	r0, 8006e10 <__d2b+0x24>
 8006e02:	4602      	mov	r2, r0
 8006e04:	4b23      	ldr	r3, [pc, #140]	@ (8006e94 <__d2b+0xa8>)
 8006e06:	4824      	ldr	r0, [pc, #144]	@ (8006e98 <__d2b+0xac>)
 8006e08:	f240 310f 	movw	r1, #783	@ 0x30f
 8006e0c:	f000 f9aa 	bl	8007164 <__assert_func>
 8006e10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e18:	b10d      	cbz	r5, 8006e1e <__d2b+0x32>
 8006e1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e1e:	9301      	str	r3, [sp, #4]
 8006e20:	f1b8 0300 	subs.w	r3, r8, #0
 8006e24:	d023      	beq.n	8006e6e <__d2b+0x82>
 8006e26:	4668      	mov	r0, sp
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	f7ff fd0c 	bl	8006846 <__lo0bits>
 8006e2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e32:	b1d0      	cbz	r0, 8006e6a <__d2b+0x7e>
 8006e34:	f1c0 0320 	rsb	r3, r0, #32
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	40c2      	lsrs	r2, r0
 8006e40:	6163      	str	r3, [r4, #20]
 8006e42:	9201      	str	r2, [sp, #4]
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	61a3      	str	r3, [r4, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	bf0c      	ite	eq
 8006e4c:	2201      	moveq	r2, #1
 8006e4e:	2202      	movne	r2, #2
 8006e50:	6122      	str	r2, [r4, #16]
 8006e52:	b1a5      	cbz	r5, 8006e7e <__d2b+0x92>
 8006e54:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e58:	4405      	add	r5, r0
 8006e5a:	603d      	str	r5, [r7, #0]
 8006e5c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e60:	6030      	str	r0, [r6, #0]
 8006e62:	4620      	mov	r0, r4
 8006e64:	b003      	add	sp, #12
 8006e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e6a:	6161      	str	r1, [r4, #20]
 8006e6c:	e7ea      	b.n	8006e44 <__d2b+0x58>
 8006e6e:	a801      	add	r0, sp, #4
 8006e70:	f7ff fce9 	bl	8006846 <__lo0bits>
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	6163      	str	r3, [r4, #20]
 8006e78:	3020      	adds	r0, #32
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	e7e8      	b.n	8006e50 <__d2b+0x64>
 8006e7e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e82:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e86:	6038      	str	r0, [r7, #0]
 8006e88:	6918      	ldr	r0, [r3, #16]
 8006e8a:	f7ff fcbd 	bl	8006808 <__hi0bits>
 8006e8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e92:	e7e5      	b.n	8006e60 <__d2b+0x74>
 8006e94:	08008479 	.word	0x08008479
 8006e98:	08008534 	.word	0x08008534

08006e9c <__ratio>:
 8006e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	e9cd 1000 	strd	r1, r0, [sp]
 8006ea6:	a902      	add	r1, sp, #8
 8006ea8:	f7ff ff56 	bl	8006d58 <__b2d>
 8006eac:	9800      	ldr	r0, [sp, #0]
 8006eae:	a903      	add	r1, sp, #12
 8006eb0:	ec55 4b10 	vmov	r4, r5, d0
 8006eb4:	f7ff ff50 	bl	8006d58 <__b2d>
 8006eb8:	9b01      	ldr	r3, [sp, #4]
 8006eba:	6919      	ldr	r1, [r3, #16]
 8006ebc:	9b00      	ldr	r3, [sp, #0]
 8006ebe:	691b      	ldr	r3, [r3, #16]
 8006ec0:	1ac9      	subs	r1, r1, r3
 8006ec2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	ec5b ab10 	vmov	sl, fp, d0
 8006ecc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	bfce      	itee	gt
 8006ed4:	462a      	movgt	r2, r5
 8006ed6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006eda:	465a      	movle	r2, fp
 8006edc:	462f      	mov	r7, r5
 8006ede:	46d9      	mov	r9, fp
 8006ee0:	bfcc      	ite	gt
 8006ee2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006ee6:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006eea:	464b      	mov	r3, r9
 8006eec:	4652      	mov	r2, sl
 8006eee:	4620      	mov	r0, r4
 8006ef0:	4639      	mov	r1, r7
 8006ef2:	f7f9 fccb 	bl	800088c <__aeabi_ddiv>
 8006ef6:	ec41 0b10 	vmov	d0, r0, r1
 8006efa:	b005      	add	sp, #20
 8006efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f00 <__copybits>:
 8006f00:	3901      	subs	r1, #1
 8006f02:	b570      	push	{r4, r5, r6, lr}
 8006f04:	1149      	asrs	r1, r1, #5
 8006f06:	6914      	ldr	r4, [r2, #16]
 8006f08:	3101      	adds	r1, #1
 8006f0a:	f102 0314 	add.w	r3, r2, #20
 8006f0e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f12:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f16:	1f05      	subs	r5, r0, #4
 8006f18:	42a3      	cmp	r3, r4
 8006f1a:	d30c      	bcc.n	8006f36 <__copybits+0x36>
 8006f1c:	1aa3      	subs	r3, r4, r2
 8006f1e:	3b11      	subs	r3, #17
 8006f20:	f023 0303 	bic.w	r3, r3, #3
 8006f24:	3211      	adds	r2, #17
 8006f26:	42a2      	cmp	r2, r4
 8006f28:	bf88      	it	hi
 8006f2a:	2300      	movhi	r3, #0
 8006f2c:	4418      	add	r0, r3
 8006f2e:	2300      	movs	r3, #0
 8006f30:	4288      	cmp	r0, r1
 8006f32:	d305      	bcc.n	8006f40 <__copybits+0x40>
 8006f34:	bd70      	pop	{r4, r5, r6, pc}
 8006f36:	f853 6b04 	ldr.w	r6, [r3], #4
 8006f3a:	f845 6f04 	str.w	r6, [r5, #4]!
 8006f3e:	e7eb      	b.n	8006f18 <__copybits+0x18>
 8006f40:	f840 3b04 	str.w	r3, [r0], #4
 8006f44:	e7f4      	b.n	8006f30 <__copybits+0x30>

08006f46 <__any_on>:
 8006f46:	f100 0214 	add.w	r2, r0, #20
 8006f4a:	6900      	ldr	r0, [r0, #16]
 8006f4c:	114b      	asrs	r3, r1, #5
 8006f4e:	4298      	cmp	r0, r3
 8006f50:	b510      	push	{r4, lr}
 8006f52:	db11      	blt.n	8006f78 <__any_on+0x32>
 8006f54:	dd0a      	ble.n	8006f6c <__any_on+0x26>
 8006f56:	f011 011f 	ands.w	r1, r1, #31
 8006f5a:	d007      	beq.n	8006f6c <__any_on+0x26>
 8006f5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006f60:	fa24 f001 	lsr.w	r0, r4, r1
 8006f64:	fa00 f101 	lsl.w	r1, r0, r1
 8006f68:	428c      	cmp	r4, r1
 8006f6a:	d10b      	bne.n	8006f84 <__any_on+0x3e>
 8006f6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d803      	bhi.n	8006f7c <__any_on+0x36>
 8006f74:	2000      	movs	r0, #0
 8006f76:	bd10      	pop	{r4, pc}
 8006f78:	4603      	mov	r3, r0
 8006f7a:	e7f7      	b.n	8006f6c <__any_on+0x26>
 8006f7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f80:	2900      	cmp	r1, #0
 8006f82:	d0f5      	beq.n	8006f70 <__any_on+0x2a>
 8006f84:	2001      	movs	r0, #1
 8006f86:	e7f6      	b.n	8006f76 <__any_on+0x30>

08006f88 <__sread>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f90:	f000 f8b4 	bl	80070fc <_read_r>
 8006f94:	2800      	cmp	r0, #0
 8006f96:	bfab      	itete	ge
 8006f98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f9c:	181b      	addge	r3, r3, r0
 8006f9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006fa2:	bfac      	ite	ge
 8006fa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006fa6:	81a3      	strhlt	r3, [r4, #12]
 8006fa8:	bd10      	pop	{r4, pc}

08006faa <__swrite>:
 8006faa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fae:	461f      	mov	r7, r3
 8006fb0:	898b      	ldrh	r3, [r1, #12]
 8006fb2:	05db      	lsls	r3, r3, #23
 8006fb4:	4605      	mov	r5, r0
 8006fb6:	460c      	mov	r4, r1
 8006fb8:	4616      	mov	r6, r2
 8006fba:	d505      	bpl.n	8006fc8 <__swrite+0x1e>
 8006fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f000 f888 	bl	80070d8 <_lseek_r>
 8006fc8:	89a3      	ldrh	r3, [r4, #12]
 8006fca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	4632      	mov	r2, r6
 8006fd6:	463b      	mov	r3, r7
 8006fd8:	4628      	mov	r0, r5
 8006fda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fde:	f000 b8af 	b.w	8007140 <_write_r>

08006fe2 <__sseek>:
 8006fe2:	b510      	push	{r4, lr}
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fea:	f000 f875 	bl	80070d8 <_lseek_r>
 8006fee:	1c43      	adds	r3, r0, #1
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	bf15      	itete	ne
 8006ff4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ff6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ffa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ffe:	81a3      	strheq	r3, [r4, #12]
 8007000:	bf18      	it	ne
 8007002:	81a3      	strhne	r3, [r4, #12]
 8007004:	bd10      	pop	{r4, pc}

08007006 <__sclose>:
 8007006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800700a:	f000 b855 	b.w	80070b8 <_close_r>

0800700e <_realloc_r>:
 800700e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007012:	4680      	mov	r8, r0
 8007014:	4615      	mov	r5, r2
 8007016:	460c      	mov	r4, r1
 8007018:	b921      	cbnz	r1, 8007024 <_realloc_r+0x16>
 800701a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800701e:	4611      	mov	r1, r2
 8007020:	f7ff b828 	b.w	8006074 <_malloc_r>
 8007024:	b92a      	cbnz	r2, 8007032 <_realloc_r+0x24>
 8007026:	f000 f8cf 	bl	80071c8 <_free_r>
 800702a:	2400      	movs	r4, #0
 800702c:	4620      	mov	r0, r4
 800702e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007032:	f000 f91b 	bl	800726c <_malloc_usable_size_r>
 8007036:	4285      	cmp	r5, r0
 8007038:	4606      	mov	r6, r0
 800703a:	d802      	bhi.n	8007042 <_realloc_r+0x34>
 800703c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007040:	d8f4      	bhi.n	800702c <_realloc_r+0x1e>
 8007042:	4629      	mov	r1, r5
 8007044:	4640      	mov	r0, r8
 8007046:	f7ff f815 	bl	8006074 <_malloc_r>
 800704a:	4607      	mov	r7, r0
 800704c:	2800      	cmp	r0, #0
 800704e:	d0ec      	beq.n	800702a <_realloc_r+0x1c>
 8007050:	42b5      	cmp	r5, r6
 8007052:	462a      	mov	r2, r5
 8007054:	4621      	mov	r1, r4
 8007056:	bf28      	it	cs
 8007058:	4632      	movcs	r2, r6
 800705a:	f7fe fb42 	bl	80056e2 <memcpy>
 800705e:	4621      	mov	r1, r4
 8007060:	4640      	mov	r0, r8
 8007062:	f000 f8b1 	bl	80071c8 <_free_r>
 8007066:	463c      	mov	r4, r7
 8007068:	e7e0      	b.n	800702c <_realloc_r+0x1e>

0800706a <__ascii_wctomb>:
 800706a:	4603      	mov	r3, r0
 800706c:	4608      	mov	r0, r1
 800706e:	b141      	cbz	r1, 8007082 <__ascii_wctomb+0x18>
 8007070:	2aff      	cmp	r2, #255	@ 0xff
 8007072:	d904      	bls.n	800707e <__ascii_wctomb+0x14>
 8007074:	228a      	movs	r2, #138	@ 0x8a
 8007076:	601a      	str	r2, [r3, #0]
 8007078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800707c:	4770      	bx	lr
 800707e:	700a      	strb	r2, [r1, #0]
 8007080:	2001      	movs	r0, #1
 8007082:	4770      	bx	lr

08007084 <memmove>:
 8007084:	4288      	cmp	r0, r1
 8007086:	b510      	push	{r4, lr}
 8007088:	eb01 0402 	add.w	r4, r1, r2
 800708c:	d902      	bls.n	8007094 <memmove+0x10>
 800708e:	4284      	cmp	r4, r0
 8007090:	4623      	mov	r3, r4
 8007092:	d807      	bhi.n	80070a4 <memmove+0x20>
 8007094:	1e43      	subs	r3, r0, #1
 8007096:	42a1      	cmp	r1, r4
 8007098:	d008      	beq.n	80070ac <memmove+0x28>
 800709a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800709e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070a2:	e7f8      	b.n	8007096 <memmove+0x12>
 80070a4:	4402      	add	r2, r0
 80070a6:	4601      	mov	r1, r0
 80070a8:	428a      	cmp	r2, r1
 80070aa:	d100      	bne.n	80070ae <memmove+0x2a>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070b6:	e7f7      	b.n	80070a8 <memmove+0x24>

080070b8 <_close_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d06      	ldr	r5, [pc, #24]	@ (80070d4 <_close_r+0x1c>)
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	f7fa fcb4 	bl	8001a30 <_close>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_close_r+0x1a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_close_r+0x1a>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	20000598 	.word	0x20000598

080070d8 <_lseek_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d07      	ldr	r5, [pc, #28]	@ (80070f8 <_lseek_r+0x20>)
 80070dc:	4604      	mov	r4, r0
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	602a      	str	r2, [r5, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7fa fcc9 	bl	8001a7e <_lseek>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_lseek_r+0x1e>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_lseek_r+0x1e>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20000598 	.word	0x20000598

080070fc <_read_r>:
 80070fc:	b538      	push	{r3, r4, r5, lr}
 80070fe:	4d07      	ldr	r5, [pc, #28]	@ (800711c <_read_r+0x20>)
 8007100:	4604      	mov	r4, r0
 8007102:	4608      	mov	r0, r1
 8007104:	4611      	mov	r1, r2
 8007106:	2200      	movs	r2, #0
 8007108:	602a      	str	r2, [r5, #0]
 800710a:	461a      	mov	r2, r3
 800710c:	f7fa fc57 	bl	80019be <_read>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_read_r+0x1e>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_read_r+0x1e>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	20000598 	.word	0x20000598

08007120 <_sbrk_r>:
 8007120:	b538      	push	{r3, r4, r5, lr}
 8007122:	4d06      	ldr	r5, [pc, #24]	@ (800713c <_sbrk_r+0x1c>)
 8007124:	2300      	movs	r3, #0
 8007126:	4604      	mov	r4, r0
 8007128:	4608      	mov	r0, r1
 800712a:	602b      	str	r3, [r5, #0]
 800712c:	f7fa fcb4 	bl	8001a98 <_sbrk>
 8007130:	1c43      	adds	r3, r0, #1
 8007132:	d102      	bne.n	800713a <_sbrk_r+0x1a>
 8007134:	682b      	ldr	r3, [r5, #0]
 8007136:	b103      	cbz	r3, 800713a <_sbrk_r+0x1a>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	bd38      	pop	{r3, r4, r5, pc}
 800713c:	20000598 	.word	0x20000598

08007140 <_write_r>:
 8007140:	b538      	push	{r3, r4, r5, lr}
 8007142:	4d07      	ldr	r5, [pc, #28]	@ (8007160 <_write_r+0x20>)
 8007144:	4604      	mov	r4, r0
 8007146:	4608      	mov	r0, r1
 8007148:	4611      	mov	r1, r2
 800714a:	2200      	movs	r2, #0
 800714c:	602a      	str	r2, [r5, #0]
 800714e:	461a      	mov	r2, r3
 8007150:	f7fa fc52 	bl	80019f8 <_write>
 8007154:	1c43      	adds	r3, r0, #1
 8007156:	d102      	bne.n	800715e <_write_r+0x1e>
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	b103      	cbz	r3, 800715e <_write_r+0x1e>
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	bd38      	pop	{r3, r4, r5, pc}
 8007160:	20000598 	.word	0x20000598

08007164 <__assert_func>:
 8007164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007166:	4614      	mov	r4, r2
 8007168:	461a      	mov	r2, r3
 800716a:	4b09      	ldr	r3, [pc, #36]	@ (8007190 <__assert_func+0x2c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4605      	mov	r5, r0
 8007170:	68d8      	ldr	r0, [r3, #12]
 8007172:	b954      	cbnz	r4, 800718a <__assert_func+0x26>
 8007174:	4b07      	ldr	r3, [pc, #28]	@ (8007194 <__assert_func+0x30>)
 8007176:	461c      	mov	r4, r3
 8007178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800717c:	9100      	str	r1, [sp, #0]
 800717e:	462b      	mov	r3, r5
 8007180:	4905      	ldr	r1, [pc, #20]	@ (8007198 <__assert_func+0x34>)
 8007182:	f000 f87b 	bl	800727c <fiprintf>
 8007186:	f000 f88b 	bl	80072a0 <abort>
 800718a:	4b04      	ldr	r3, [pc, #16]	@ (800719c <__assert_func+0x38>)
 800718c:	e7f4      	b.n	8007178 <__assert_func+0x14>
 800718e:	bf00      	nop
 8007190:	20000190 	.word	0x20000190
 8007194:	080086cb 	.word	0x080086cb
 8007198:	0800869d 	.word	0x0800869d
 800719c:	08008690 	.word	0x08008690

080071a0 <_calloc_r>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	fba1 5402 	umull	r5, r4, r1, r2
 80071a6:	b93c      	cbnz	r4, 80071b8 <_calloc_r+0x18>
 80071a8:	4629      	mov	r1, r5
 80071aa:	f7fe ff63 	bl	8006074 <_malloc_r>
 80071ae:	4606      	mov	r6, r0
 80071b0:	b928      	cbnz	r0, 80071be <_calloc_r+0x1e>
 80071b2:	2600      	movs	r6, #0
 80071b4:	4630      	mov	r0, r6
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	220c      	movs	r2, #12
 80071ba:	6002      	str	r2, [r0, #0]
 80071bc:	e7f9      	b.n	80071b2 <_calloc_r+0x12>
 80071be:	462a      	mov	r2, r5
 80071c0:	4621      	mov	r1, r4
 80071c2:	f7fe fa59 	bl	8005678 <memset>
 80071c6:	e7f5      	b.n	80071b4 <_calloc_r+0x14>

080071c8 <_free_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4605      	mov	r5, r0
 80071cc:	2900      	cmp	r1, #0
 80071ce:	d041      	beq.n	8007254 <_free_r+0x8c>
 80071d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d4:	1f0c      	subs	r4, r1, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfb8      	it	lt
 80071da:	18e4      	addlt	r4, r4, r3
 80071dc:	f7ff fa16 	bl	800660c <__malloc_lock>
 80071e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007258 <_free_r+0x90>)
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	b933      	cbnz	r3, 80071f4 <_free_r+0x2c>
 80071e6:	6063      	str	r3, [r4, #4]
 80071e8:	6014      	str	r4, [r2, #0]
 80071ea:	4628      	mov	r0, r5
 80071ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f0:	f7ff ba12 	b.w	8006618 <__malloc_unlock>
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	d908      	bls.n	800720a <_free_r+0x42>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	1821      	adds	r1, r4, r0
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf01      	itttt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	1809      	addeq	r1, r1, r0
 8007206:	6021      	streq	r1, [r4, #0]
 8007208:	e7ed      	b.n	80071e6 <_free_r+0x1e>
 800720a:	461a      	mov	r2, r3
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	b10b      	cbz	r3, 8007214 <_free_r+0x4c>
 8007210:	42a3      	cmp	r3, r4
 8007212:	d9fa      	bls.n	800720a <_free_r+0x42>
 8007214:	6811      	ldr	r1, [r2, #0]
 8007216:	1850      	adds	r0, r2, r1
 8007218:	42a0      	cmp	r0, r4
 800721a:	d10b      	bne.n	8007234 <_free_r+0x6c>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	4401      	add	r1, r0
 8007220:	1850      	adds	r0, r2, r1
 8007222:	4283      	cmp	r3, r0
 8007224:	6011      	str	r1, [r2, #0]
 8007226:	d1e0      	bne.n	80071ea <_free_r+0x22>
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	6053      	str	r3, [r2, #4]
 800722e:	4408      	add	r0, r1
 8007230:	6010      	str	r0, [r2, #0]
 8007232:	e7da      	b.n	80071ea <_free_r+0x22>
 8007234:	d902      	bls.n	800723c <_free_r+0x74>
 8007236:	230c      	movs	r3, #12
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	e7d6      	b.n	80071ea <_free_r+0x22>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	1821      	adds	r1, r4, r0
 8007240:	428b      	cmp	r3, r1
 8007242:	bf04      	itt	eq
 8007244:	6819      	ldreq	r1, [r3, #0]
 8007246:	685b      	ldreq	r3, [r3, #4]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	bf04      	itt	eq
 800724c:	1809      	addeq	r1, r1, r0
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	6054      	str	r4, [r2, #4]
 8007252:	e7ca      	b.n	80071ea <_free_r+0x22>
 8007254:	bd38      	pop	{r3, r4, r5, pc}
 8007256:	bf00      	nop
 8007258:	20000594 	.word	0x20000594

0800725c <malloc>:
 800725c:	4b02      	ldr	r3, [pc, #8]	@ (8007268 <malloc+0xc>)
 800725e:	4601      	mov	r1, r0
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f7fe bf07 	b.w	8006074 <_malloc_r>
 8007266:	bf00      	nop
 8007268:	20000190 	.word	0x20000190

0800726c <_malloc_usable_size_r>:
 800726c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007270:	1f18      	subs	r0, r3, #4
 8007272:	2b00      	cmp	r3, #0
 8007274:	bfbc      	itt	lt
 8007276:	580b      	ldrlt	r3, [r1, r0]
 8007278:	18c0      	addlt	r0, r0, r3
 800727a:	4770      	bx	lr

0800727c <fiprintf>:
 800727c:	b40e      	push	{r1, r2, r3}
 800727e:	b503      	push	{r0, r1, lr}
 8007280:	4601      	mov	r1, r0
 8007282:	ab03      	add	r3, sp, #12
 8007284:	4805      	ldr	r0, [pc, #20]	@ (800729c <fiprintf+0x20>)
 8007286:	f853 2b04 	ldr.w	r2, [r3], #4
 800728a:	6800      	ldr	r0, [r0, #0]
 800728c:	9301      	str	r3, [sp, #4]
 800728e:	f000 f837 	bl	8007300 <_vfiprintf_r>
 8007292:	b002      	add	sp, #8
 8007294:	f85d eb04 	ldr.w	lr, [sp], #4
 8007298:	b003      	add	sp, #12
 800729a:	4770      	bx	lr
 800729c:	20000190 	.word	0x20000190

080072a0 <abort>:
 80072a0:	b508      	push	{r3, lr}
 80072a2:	2006      	movs	r0, #6
 80072a4:	f000 fa84 	bl	80077b0 <raise>
 80072a8:	2001      	movs	r0, #1
 80072aa:	f7fa fb7d 	bl	80019a8 <_exit>

080072ae <__sfputc_r>:
 80072ae:	6893      	ldr	r3, [r2, #8]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	b410      	push	{r4}
 80072b6:	6093      	str	r3, [r2, #8]
 80072b8:	da08      	bge.n	80072cc <__sfputc_r+0x1e>
 80072ba:	6994      	ldr	r4, [r2, #24]
 80072bc:	42a3      	cmp	r3, r4
 80072be:	db01      	blt.n	80072c4 <__sfputc_r+0x16>
 80072c0:	290a      	cmp	r1, #10
 80072c2:	d103      	bne.n	80072cc <__sfputc_r+0x1e>
 80072c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072c8:	f000 b932 	b.w	8007530 <__swbuf_r>
 80072cc:	6813      	ldr	r3, [r2, #0]
 80072ce:	1c58      	adds	r0, r3, #1
 80072d0:	6010      	str	r0, [r2, #0]
 80072d2:	7019      	strb	r1, [r3, #0]
 80072d4:	4608      	mov	r0, r1
 80072d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072da:	4770      	bx	lr

080072dc <__sfputs_r>:
 80072dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072de:	4606      	mov	r6, r0
 80072e0:	460f      	mov	r7, r1
 80072e2:	4614      	mov	r4, r2
 80072e4:	18d5      	adds	r5, r2, r3
 80072e6:	42ac      	cmp	r4, r5
 80072e8:	d101      	bne.n	80072ee <__sfputs_r+0x12>
 80072ea:	2000      	movs	r0, #0
 80072ec:	e007      	b.n	80072fe <__sfputs_r+0x22>
 80072ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f2:	463a      	mov	r2, r7
 80072f4:	4630      	mov	r0, r6
 80072f6:	f7ff ffda 	bl	80072ae <__sfputc_r>
 80072fa:	1c43      	adds	r3, r0, #1
 80072fc:	d1f3      	bne.n	80072e6 <__sfputs_r+0xa>
 80072fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007300 <_vfiprintf_r>:
 8007300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007304:	460d      	mov	r5, r1
 8007306:	b09d      	sub	sp, #116	@ 0x74
 8007308:	4614      	mov	r4, r2
 800730a:	4698      	mov	r8, r3
 800730c:	4606      	mov	r6, r0
 800730e:	b118      	cbz	r0, 8007318 <_vfiprintf_r+0x18>
 8007310:	6a03      	ldr	r3, [r0, #32]
 8007312:	b90b      	cbnz	r3, 8007318 <_vfiprintf_r+0x18>
 8007314:	f7fd fb58 	bl	80049c8 <__sinit>
 8007318:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800731a:	07d9      	lsls	r1, r3, #31
 800731c:	d405      	bmi.n	800732a <_vfiprintf_r+0x2a>
 800731e:	89ab      	ldrh	r3, [r5, #12]
 8007320:	059a      	lsls	r2, r3, #22
 8007322:	d402      	bmi.n	800732a <_vfiprintf_r+0x2a>
 8007324:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007326:	f7fe f9da 	bl	80056de <__retarget_lock_acquire_recursive>
 800732a:	89ab      	ldrh	r3, [r5, #12]
 800732c:	071b      	lsls	r3, r3, #28
 800732e:	d501      	bpl.n	8007334 <_vfiprintf_r+0x34>
 8007330:	692b      	ldr	r3, [r5, #16]
 8007332:	b99b      	cbnz	r3, 800735c <_vfiprintf_r+0x5c>
 8007334:	4629      	mov	r1, r5
 8007336:	4630      	mov	r0, r6
 8007338:	f000 f938 	bl	80075ac <__swsetup_r>
 800733c:	b170      	cbz	r0, 800735c <_vfiprintf_r+0x5c>
 800733e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007340:	07dc      	lsls	r4, r3, #31
 8007342:	d504      	bpl.n	800734e <_vfiprintf_r+0x4e>
 8007344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007348:	b01d      	add	sp, #116	@ 0x74
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	89ab      	ldrh	r3, [r5, #12]
 8007350:	0598      	lsls	r0, r3, #22
 8007352:	d4f7      	bmi.n	8007344 <_vfiprintf_r+0x44>
 8007354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007356:	f7fe f9c3 	bl	80056e0 <__retarget_lock_release_recursive>
 800735a:	e7f3      	b.n	8007344 <_vfiprintf_r+0x44>
 800735c:	2300      	movs	r3, #0
 800735e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007360:	2320      	movs	r3, #32
 8007362:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007366:	f8cd 800c 	str.w	r8, [sp, #12]
 800736a:	2330      	movs	r3, #48	@ 0x30
 800736c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800751c <_vfiprintf_r+0x21c>
 8007370:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007374:	f04f 0901 	mov.w	r9, #1
 8007378:	4623      	mov	r3, r4
 800737a:	469a      	mov	sl, r3
 800737c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007380:	b10a      	cbz	r2, 8007386 <_vfiprintf_r+0x86>
 8007382:	2a25      	cmp	r2, #37	@ 0x25
 8007384:	d1f9      	bne.n	800737a <_vfiprintf_r+0x7a>
 8007386:	ebba 0b04 	subs.w	fp, sl, r4
 800738a:	d00b      	beq.n	80073a4 <_vfiprintf_r+0xa4>
 800738c:	465b      	mov	r3, fp
 800738e:	4622      	mov	r2, r4
 8007390:	4629      	mov	r1, r5
 8007392:	4630      	mov	r0, r6
 8007394:	f7ff ffa2 	bl	80072dc <__sfputs_r>
 8007398:	3001      	adds	r0, #1
 800739a:	f000 80a7 	beq.w	80074ec <_vfiprintf_r+0x1ec>
 800739e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073a0:	445a      	add	r2, fp
 80073a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80073a4:	f89a 3000 	ldrb.w	r3, [sl]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 809f 	beq.w	80074ec <_vfiprintf_r+0x1ec>
 80073ae:	2300      	movs	r3, #0
 80073b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073b8:	f10a 0a01 	add.w	sl, sl, #1
 80073bc:	9304      	str	r3, [sp, #16]
 80073be:	9307      	str	r3, [sp, #28]
 80073c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80073c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80073c6:	4654      	mov	r4, sl
 80073c8:	2205      	movs	r2, #5
 80073ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ce:	4853      	ldr	r0, [pc, #332]	@ (800751c <_vfiprintf_r+0x21c>)
 80073d0:	f7f8 ff26 	bl	8000220 <memchr>
 80073d4:	9a04      	ldr	r2, [sp, #16]
 80073d6:	b9d8      	cbnz	r0, 8007410 <_vfiprintf_r+0x110>
 80073d8:	06d1      	lsls	r1, r2, #27
 80073da:	bf44      	itt	mi
 80073dc:	2320      	movmi	r3, #32
 80073de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073e2:	0713      	lsls	r3, r2, #28
 80073e4:	bf44      	itt	mi
 80073e6:	232b      	movmi	r3, #43	@ 0x2b
 80073e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073ec:	f89a 3000 	ldrb.w	r3, [sl]
 80073f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f2:	d015      	beq.n	8007420 <_vfiprintf_r+0x120>
 80073f4:	9a07      	ldr	r2, [sp, #28]
 80073f6:	4654      	mov	r4, sl
 80073f8:	2000      	movs	r0, #0
 80073fa:	f04f 0c0a 	mov.w	ip, #10
 80073fe:	4621      	mov	r1, r4
 8007400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007404:	3b30      	subs	r3, #48	@ 0x30
 8007406:	2b09      	cmp	r3, #9
 8007408:	d94b      	bls.n	80074a2 <_vfiprintf_r+0x1a2>
 800740a:	b1b0      	cbz	r0, 800743a <_vfiprintf_r+0x13a>
 800740c:	9207      	str	r2, [sp, #28]
 800740e:	e014      	b.n	800743a <_vfiprintf_r+0x13a>
 8007410:	eba0 0308 	sub.w	r3, r0, r8
 8007414:	fa09 f303 	lsl.w	r3, r9, r3
 8007418:	4313      	orrs	r3, r2
 800741a:	9304      	str	r3, [sp, #16]
 800741c:	46a2      	mov	sl, r4
 800741e:	e7d2      	b.n	80073c6 <_vfiprintf_r+0xc6>
 8007420:	9b03      	ldr	r3, [sp, #12]
 8007422:	1d19      	adds	r1, r3, #4
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	9103      	str	r1, [sp, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	bfbb      	ittet	lt
 800742c:	425b      	neglt	r3, r3
 800742e:	f042 0202 	orrlt.w	r2, r2, #2
 8007432:	9307      	strge	r3, [sp, #28]
 8007434:	9307      	strlt	r3, [sp, #28]
 8007436:	bfb8      	it	lt
 8007438:	9204      	strlt	r2, [sp, #16]
 800743a:	7823      	ldrb	r3, [r4, #0]
 800743c:	2b2e      	cmp	r3, #46	@ 0x2e
 800743e:	d10a      	bne.n	8007456 <_vfiprintf_r+0x156>
 8007440:	7863      	ldrb	r3, [r4, #1]
 8007442:	2b2a      	cmp	r3, #42	@ 0x2a
 8007444:	d132      	bne.n	80074ac <_vfiprintf_r+0x1ac>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	1d1a      	adds	r2, r3, #4
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	9203      	str	r2, [sp, #12]
 800744e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007452:	3402      	adds	r4, #2
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800752c <_vfiprintf_r+0x22c>
 800745a:	7821      	ldrb	r1, [r4, #0]
 800745c:	2203      	movs	r2, #3
 800745e:	4650      	mov	r0, sl
 8007460:	f7f8 fede 	bl	8000220 <memchr>
 8007464:	b138      	cbz	r0, 8007476 <_vfiprintf_r+0x176>
 8007466:	9b04      	ldr	r3, [sp, #16]
 8007468:	eba0 000a 	sub.w	r0, r0, sl
 800746c:	2240      	movs	r2, #64	@ 0x40
 800746e:	4082      	lsls	r2, r0
 8007470:	4313      	orrs	r3, r2
 8007472:	3401      	adds	r4, #1
 8007474:	9304      	str	r3, [sp, #16]
 8007476:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747a:	4829      	ldr	r0, [pc, #164]	@ (8007520 <_vfiprintf_r+0x220>)
 800747c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007480:	2206      	movs	r2, #6
 8007482:	f7f8 fecd 	bl	8000220 <memchr>
 8007486:	2800      	cmp	r0, #0
 8007488:	d03f      	beq.n	800750a <_vfiprintf_r+0x20a>
 800748a:	4b26      	ldr	r3, [pc, #152]	@ (8007524 <_vfiprintf_r+0x224>)
 800748c:	bb1b      	cbnz	r3, 80074d6 <_vfiprintf_r+0x1d6>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	3307      	adds	r3, #7
 8007492:	f023 0307 	bic.w	r3, r3, #7
 8007496:	3308      	adds	r3, #8
 8007498:	9303      	str	r3, [sp, #12]
 800749a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749c:	443b      	add	r3, r7
 800749e:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a0:	e76a      	b.n	8007378 <_vfiprintf_r+0x78>
 80074a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80074a6:	460c      	mov	r4, r1
 80074a8:	2001      	movs	r0, #1
 80074aa:	e7a8      	b.n	80073fe <_vfiprintf_r+0xfe>
 80074ac:	2300      	movs	r3, #0
 80074ae:	3401      	adds	r4, #1
 80074b0:	9305      	str	r3, [sp, #20]
 80074b2:	4619      	mov	r1, r3
 80074b4:	f04f 0c0a 	mov.w	ip, #10
 80074b8:	4620      	mov	r0, r4
 80074ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074be:	3a30      	subs	r2, #48	@ 0x30
 80074c0:	2a09      	cmp	r2, #9
 80074c2:	d903      	bls.n	80074cc <_vfiprintf_r+0x1cc>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0c6      	beq.n	8007456 <_vfiprintf_r+0x156>
 80074c8:	9105      	str	r1, [sp, #20]
 80074ca:	e7c4      	b.n	8007456 <_vfiprintf_r+0x156>
 80074cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80074d0:	4604      	mov	r4, r0
 80074d2:	2301      	movs	r3, #1
 80074d4:	e7f0      	b.n	80074b8 <_vfiprintf_r+0x1b8>
 80074d6:	ab03      	add	r3, sp, #12
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	462a      	mov	r2, r5
 80074dc:	4b12      	ldr	r3, [pc, #72]	@ (8007528 <_vfiprintf_r+0x228>)
 80074de:	a904      	add	r1, sp, #16
 80074e0:	4630      	mov	r0, r6
 80074e2:	f3af 8000 	nop.w
 80074e6:	4607      	mov	r7, r0
 80074e8:	1c78      	adds	r0, r7, #1
 80074ea:	d1d6      	bne.n	800749a <_vfiprintf_r+0x19a>
 80074ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074ee:	07d9      	lsls	r1, r3, #31
 80074f0:	d405      	bmi.n	80074fe <_vfiprintf_r+0x1fe>
 80074f2:	89ab      	ldrh	r3, [r5, #12]
 80074f4:	059a      	lsls	r2, r3, #22
 80074f6:	d402      	bmi.n	80074fe <_vfiprintf_r+0x1fe>
 80074f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074fa:	f7fe f8f1 	bl	80056e0 <__retarget_lock_release_recursive>
 80074fe:	89ab      	ldrh	r3, [r5, #12]
 8007500:	065b      	lsls	r3, r3, #25
 8007502:	f53f af1f 	bmi.w	8007344 <_vfiprintf_r+0x44>
 8007506:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007508:	e71e      	b.n	8007348 <_vfiprintf_r+0x48>
 800750a:	ab03      	add	r3, sp, #12
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	462a      	mov	r2, r5
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <_vfiprintf_r+0x228>)
 8007512:	a904      	add	r1, sp, #16
 8007514:	4630      	mov	r0, r6
 8007516:	f7fe fead 	bl	8006274 <_printf_i>
 800751a:	e7e4      	b.n	80074e6 <_vfiprintf_r+0x1e6>
 800751c:	080084ea 	.word	0x080084ea
 8007520:	080084f4 	.word	0x080084f4
 8007524:	00000000 	.word	0x00000000
 8007528:	080072dd 	.word	0x080072dd
 800752c:	080084f0 	.word	0x080084f0

08007530 <__swbuf_r>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	460e      	mov	r6, r1
 8007534:	4614      	mov	r4, r2
 8007536:	4605      	mov	r5, r0
 8007538:	b118      	cbz	r0, 8007542 <__swbuf_r+0x12>
 800753a:	6a03      	ldr	r3, [r0, #32]
 800753c:	b90b      	cbnz	r3, 8007542 <__swbuf_r+0x12>
 800753e:	f7fd fa43 	bl	80049c8 <__sinit>
 8007542:	69a3      	ldr	r3, [r4, #24]
 8007544:	60a3      	str	r3, [r4, #8]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	071a      	lsls	r2, r3, #28
 800754a:	d501      	bpl.n	8007550 <__swbuf_r+0x20>
 800754c:	6923      	ldr	r3, [r4, #16]
 800754e:	b943      	cbnz	r3, 8007562 <__swbuf_r+0x32>
 8007550:	4621      	mov	r1, r4
 8007552:	4628      	mov	r0, r5
 8007554:	f000 f82a 	bl	80075ac <__swsetup_r>
 8007558:	b118      	cbz	r0, 8007562 <__swbuf_r+0x32>
 800755a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800755e:	4638      	mov	r0, r7
 8007560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	6922      	ldr	r2, [r4, #16]
 8007566:	1a98      	subs	r0, r3, r2
 8007568:	6963      	ldr	r3, [r4, #20]
 800756a:	b2f6      	uxtb	r6, r6
 800756c:	4283      	cmp	r3, r0
 800756e:	4637      	mov	r7, r6
 8007570:	dc05      	bgt.n	800757e <__swbuf_r+0x4e>
 8007572:	4621      	mov	r1, r4
 8007574:	4628      	mov	r0, r5
 8007576:	f7ff f821 	bl	80065bc <_fflush_r>
 800757a:	2800      	cmp	r0, #0
 800757c:	d1ed      	bne.n	800755a <__swbuf_r+0x2a>
 800757e:	68a3      	ldr	r3, [r4, #8]
 8007580:	3b01      	subs	r3, #1
 8007582:	60a3      	str	r3, [r4, #8]
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	1c5a      	adds	r2, r3, #1
 8007588:	6022      	str	r2, [r4, #0]
 800758a:	701e      	strb	r6, [r3, #0]
 800758c:	6962      	ldr	r2, [r4, #20]
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	429a      	cmp	r2, r3
 8007592:	d004      	beq.n	800759e <__swbuf_r+0x6e>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	07db      	lsls	r3, r3, #31
 8007598:	d5e1      	bpl.n	800755e <__swbuf_r+0x2e>
 800759a:	2e0a      	cmp	r6, #10
 800759c:	d1df      	bne.n	800755e <__swbuf_r+0x2e>
 800759e:	4621      	mov	r1, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	f7ff f80b 	bl	80065bc <_fflush_r>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	d0d9      	beq.n	800755e <__swbuf_r+0x2e>
 80075aa:	e7d6      	b.n	800755a <__swbuf_r+0x2a>

080075ac <__swsetup_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4b29      	ldr	r3, [pc, #164]	@ (8007654 <__swsetup_r+0xa8>)
 80075b0:	4605      	mov	r5, r0
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	460c      	mov	r4, r1
 80075b6:	b118      	cbz	r0, 80075c0 <__swsetup_r+0x14>
 80075b8:	6a03      	ldr	r3, [r0, #32]
 80075ba:	b90b      	cbnz	r3, 80075c0 <__swsetup_r+0x14>
 80075bc:	f7fd fa04 	bl	80049c8 <__sinit>
 80075c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c4:	0719      	lsls	r1, r3, #28
 80075c6:	d422      	bmi.n	800760e <__swsetup_r+0x62>
 80075c8:	06da      	lsls	r2, r3, #27
 80075ca:	d407      	bmi.n	80075dc <__swsetup_r+0x30>
 80075cc:	2209      	movs	r2, #9
 80075ce:	602a      	str	r2, [r5, #0]
 80075d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075da:	e033      	b.n	8007644 <__swsetup_r+0x98>
 80075dc:	0758      	lsls	r0, r3, #29
 80075de:	d512      	bpl.n	8007606 <__swsetup_r+0x5a>
 80075e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075e2:	b141      	cbz	r1, 80075f6 <__swsetup_r+0x4a>
 80075e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075e8:	4299      	cmp	r1, r3
 80075ea:	d002      	beq.n	80075f2 <__swsetup_r+0x46>
 80075ec:	4628      	mov	r0, r5
 80075ee:	f7ff fdeb 	bl	80071c8 <_free_r>
 80075f2:	2300      	movs	r3, #0
 80075f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	2300      	movs	r3, #0
 8007600:	6063      	str	r3, [r4, #4]
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f043 0308 	orr.w	r3, r3, #8
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	b94b      	cbnz	r3, 8007626 <__swsetup_r+0x7a>
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800761c:	d003      	beq.n	8007626 <__swsetup_r+0x7a>
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f000 f83f 	bl	80076a4 <__smakebuf_r>
 8007626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762a:	f013 0201 	ands.w	r2, r3, #1
 800762e:	d00a      	beq.n	8007646 <__swsetup_r+0x9a>
 8007630:	2200      	movs	r2, #0
 8007632:	60a2      	str	r2, [r4, #8]
 8007634:	6962      	ldr	r2, [r4, #20]
 8007636:	4252      	negs	r2, r2
 8007638:	61a2      	str	r2, [r4, #24]
 800763a:	6922      	ldr	r2, [r4, #16]
 800763c:	b942      	cbnz	r2, 8007650 <__swsetup_r+0xa4>
 800763e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007642:	d1c5      	bne.n	80075d0 <__swsetup_r+0x24>
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	0799      	lsls	r1, r3, #30
 8007648:	bf58      	it	pl
 800764a:	6962      	ldrpl	r2, [r4, #20]
 800764c:	60a2      	str	r2, [r4, #8]
 800764e:	e7f4      	b.n	800763a <__swsetup_r+0x8e>
 8007650:	2000      	movs	r0, #0
 8007652:	e7f7      	b.n	8007644 <__swsetup_r+0x98>
 8007654:	20000190 	.word	0x20000190

08007658 <__swhatbuf_r>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	460c      	mov	r4, r1
 800765c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007660:	2900      	cmp	r1, #0
 8007662:	b096      	sub	sp, #88	@ 0x58
 8007664:	4615      	mov	r5, r2
 8007666:	461e      	mov	r6, r3
 8007668:	da0d      	bge.n	8007686 <__swhatbuf_r+0x2e>
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007670:	f04f 0100 	mov.w	r1, #0
 8007674:	bf14      	ite	ne
 8007676:	2340      	movne	r3, #64	@ 0x40
 8007678:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800767c:	2000      	movs	r0, #0
 800767e:	6031      	str	r1, [r6, #0]
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	b016      	add	sp, #88	@ 0x58
 8007684:	bd70      	pop	{r4, r5, r6, pc}
 8007686:	466a      	mov	r2, sp
 8007688:	f000 f848 	bl	800771c <_fstat_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	dbec      	blt.n	800766a <__swhatbuf_r+0x12>
 8007690:	9901      	ldr	r1, [sp, #4]
 8007692:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007696:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800769a:	4259      	negs	r1, r3
 800769c:	4159      	adcs	r1, r3
 800769e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076a2:	e7eb      	b.n	800767c <__swhatbuf_r+0x24>

080076a4 <__smakebuf_r>:
 80076a4:	898b      	ldrh	r3, [r1, #12]
 80076a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076a8:	079d      	lsls	r5, r3, #30
 80076aa:	4606      	mov	r6, r0
 80076ac:	460c      	mov	r4, r1
 80076ae:	d507      	bpl.n	80076c0 <__smakebuf_r+0x1c>
 80076b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	6123      	str	r3, [r4, #16]
 80076b8:	2301      	movs	r3, #1
 80076ba:	6163      	str	r3, [r4, #20]
 80076bc:	b003      	add	sp, #12
 80076be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076c0:	ab01      	add	r3, sp, #4
 80076c2:	466a      	mov	r2, sp
 80076c4:	f7ff ffc8 	bl	8007658 <__swhatbuf_r>
 80076c8:	9f00      	ldr	r7, [sp, #0]
 80076ca:	4605      	mov	r5, r0
 80076cc:	4639      	mov	r1, r7
 80076ce:	4630      	mov	r0, r6
 80076d0:	f7fe fcd0 	bl	8006074 <_malloc_r>
 80076d4:	b948      	cbnz	r0, 80076ea <__smakebuf_r+0x46>
 80076d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076da:	059a      	lsls	r2, r3, #22
 80076dc:	d4ee      	bmi.n	80076bc <__smakebuf_r+0x18>
 80076de:	f023 0303 	bic.w	r3, r3, #3
 80076e2:	f043 0302 	orr.w	r3, r3, #2
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	e7e2      	b.n	80076b0 <__smakebuf_r+0xc>
 80076ea:	89a3      	ldrh	r3, [r4, #12]
 80076ec:	6020      	str	r0, [r4, #0]
 80076ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f2:	81a3      	strh	r3, [r4, #12]
 80076f4:	9b01      	ldr	r3, [sp, #4]
 80076f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80076fa:	b15b      	cbz	r3, 8007714 <__smakebuf_r+0x70>
 80076fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f81d 	bl	8007740 <_isatty_r>
 8007706:	b128      	cbz	r0, 8007714 <__smakebuf_r+0x70>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	431d      	orrs	r5, r3
 8007718:	81a5      	strh	r5, [r4, #12]
 800771a:	e7cf      	b.n	80076bc <__smakebuf_r+0x18>

0800771c <_fstat_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	@ (800773c <_fstat_r+0x20>)
 8007720:	2300      	movs	r3, #0
 8007722:	4604      	mov	r4, r0
 8007724:	4608      	mov	r0, r1
 8007726:	4611      	mov	r1, r2
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	f7fa f98d 	bl	8001a48 <_fstat>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	d102      	bne.n	8007738 <_fstat_r+0x1c>
 8007732:	682b      	ldr	r3, [r5, #0]
 8007734:	b103      	cbz	r3, 8007738 <_fstat_r+0x1c>
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	bd38      	pop	{r3, r4, r5, pc}
 800773a:	bf00      	nop
 800773c:	20000598 	.word	0x20000598

08007740 <_isatty_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d06      	ldr	r5, [pc, #24]	@ (800775c <_isatty_r+0x1c>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	f7fa f98c 	bl	8001a68 <_isatty>
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	d102      	bne.n	800775a <_isatty_r+0x1a>
 8007754:	682b      	ldr	r3, [r5, #0]
 8007756:	b103      	cbz	r3, 800775a <_isatty_r+0x1a>
 8007758:	6023      	str	r3, [r4, #0]
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	20000598 	.word	0x20000598

08007760 <_raise_r>:
 8007760:	291f      	cmp	r1, #31
 8007762:	b538      	push	{r3, r4, r5, lr}
 8007764:	4605      	mov	r5, r0
 8007766:	460c      	mov	r4, r1
 8007768:	d904      	bls.n	8007774 <_raise_r+0x14>
 800776a:	2316      	movs	r3, #22
 800776c:	6003      	str	r3, [r0, #0]
 800776e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007772:	bd38      	pop	{r3, r4, r5, pc}
 8007774:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007776:	b112      	cbz	r2, 800777e <_raise_r+0x1e>
 8007778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800777c:	b94b      	cbnz	r3, 8007792 <_raise_r+0x32>
 800777e:	4628      	mov	r0, r5
 8007780:	f000 f830 	bl	80077e4 <_getpid_r>
 8007784:	4622      	mov	r2, r4
 8007786:	4601      	mov	r1, r0
 8007788:	4628      	mov	r0, r5
 800778a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800778e:	f000 b817 	b.w	80077c0 <_kill_r>
 8007792:	2b01      	cmp	r3, #1
 8007794:	d00a      	beq.n	80077ac <_raise_r+0x4c>
 8007796:	1c59      	adds	r1, r3, #1
 8007798:	d103      	bne.n	80077a2 <_raise_r+0x42>
 800779a:	2316      	movs	r3, #22
 800779c:	6003      	str	r3, [r0, #0]
 800779e:	2001      	movs	r0, #1
 80077a0:	e7e7      	b.n	8007772 <_raise_r+0x12>
 80077a2:	2100      	movs	r1, #0
 80077a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80077a8:	4620      	mov	r0, r4
 80077aa:	4798      	blx	r3
 80077ac:	2000      	movs	r0, #0
 80077ae:	e7e0      	b.n	8007772 <_raise_r+0x12>

080077b0 <raise>:
 80077b0:	4b02      	ldr	r3, [pc, #8]	@ (80077bc <raise+0xc>)
 80077b2:	4601      	mov	r1, r0
 80077b4:	6818      	ldr	r0, [r3, #0]
 80077b6:	f7ff bfd3 	b.w	8007760 <_raise_r>
 80077ba:	bf00      	nop
 80077bc:	20000190 	.word	0x20000190

080077c0 <_kill_r>:
 80077c0:	b538      	push	{r3, r4, r5, lr}
 80077c2:	4d07      	ldr	r5, [pc, #28]	@ (80077e0 <_kill_r+0x20>)
 80077c4:	2300      	movs	r3, #0
 80077c6:	4604      	mov	r4, r0
 80077c8:	4608      	mov	r0, r1
 80077ca:	4611      	mov	r1, r2
 80077cc:	602b      	str	r3, [r5, #0]
 80077ce:	f7fa f8db 	bl	8001988 <_kill>
 80077d2:	1c43      	adds	r3, r0, #1
 80077d4:	d102      	bne.n	80077dc <_kill_r+0x1c>
 80077d6:	682b      	ldr	r3, [r5, #0]
 80077d8:	b103      	cbz	r3, 80077dc <_kill_r+0x1c>
 80077da:	6023      	str	r3, [r4, #0]
 80077dc:	bd38      	pop	{r3, r4, r5, pc}
 80077de:	bf00      	nop
 80077e0:	20000598 	.word	0x20000598

080077e4 <_getpid_r>:
 80077e4:	f7fa b8c8 	b.w	8001978 <_getpid>

080077e8 <sinf>:
 80077e8:	ee10 3a10 	vmov	r3, s0
 80077ec:	b507      	push	{r0, r1, r2, lr}
 80077ee:	4a1f      	ldr	r2, [pc, #124]	@ (800786c <sinf+0x84>)
 80077f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d807      	bhi.n	8007808 <sinf+0x20>
 80077f8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007870 <sinf+0x88>
 80077fc:	2000      	movs	r0, #0
 80077fe:	b003      	add	sp, #12
 8007800:	f85d eb04 	ldr.w	lr, [sp], #4
 8007804:	f000 b88e 	b.w	8007924 <__kernel_sinf>
 8007808:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800780c:	d304      	bcc.n	8007818 <sinf+0x30>
 800780e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007812:	b003      	add	sp, #12
 8007814:	f85d fb04 	ldr.w	pc, [sp], #4
 8007818:	4668      	mov	r0, sp
 800781a:	f000 f8cb 	bl	80079b4 <__ieee754_rem_pio2f>
 800781e:	f000 0003 	and.w	r0, r0, #3
 8007822:	2801      	cmp	r0, #1
 8007824:	d00a      	beq.n	800783c <sinf+0x54>
 8007826:	2802      	cmp	r0, #2
 8007828:	d00f      	beq.n	800784a <sinf+0x62>
 800782a:	b9c0      	cbnz	r0, 800785e <sinf+0x76>
 800782c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007830:	ed9d 0a00 	vldr	s0, [sp]
 8007834:	2001      	movs	r0, #1
 8007836:	f000 f875 	bl	8007924 <__kernel_sinf>
 800783a:	e7ea      	b.n	8007812 <sinf+0x2a>
 800783c:	eddd 0a01 	vldr	s1, [sp, #4]
 8007840:	ed9d 0a00 	vldr	s0, [sp]
 8007844:	f000 f816 	bl	8007874 <__kernel_cosf>
 8007848:	e7e3      	b.n	8007812 <sinf+0x2a>
 800784a:	eddd 0a01 	vldr	s1, [sp, #4]
 800784e:	ed9d 0a00 	vldr	s0, [sp]
 8007852:	2001      	movs	r0, #1
 8007854:	f000 f866 	bl	8007924 <__kernel_sinf>
 8007858:	eeb1 0a40 	vneg.f32	s0, s0
 800785c:	e7d9      	b.n	8007812 <sinf+0x2a>
 800785e:	eddd 0a01 	vldr	s1, [sp, #4]
 8007862:	ed9d 0a00 	vldr	s0, [sp]
 8007866:	f000 f805 	bl	8007874 <__kernel_cosf>
 800786a:	e7f5      	b.n	8007858 <sinf+0x70>
 800786c:	3f490fd8 	.word	0x3f490fd8
 8007870:	00000000 	.word	0x00000000

08007874 <__kernel_cosf>:
 8007874:	ee10 3a10 	vmov	r3, s0
 8007878:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800787c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007880:	eef0 6a40 	vmov.f32	s13, s0
 8007884:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007888:	d204      	bcs.n	8007894 <__kernel_cosf+0x20>
 800788a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800788e:	ee17 2a90 	vmov	r2, s15
 8007892:	b342      	cbz	r2, 80078e6 <__kernel_cosf+0x72>
 8007894:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007898:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8007904 <__kernel_cosf+0x90>
 800789c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007908 <__kernel_cosf+0x94>
 80078a0:	4a1a      	ldr	r2, [pc, #104]	@ (800790c <__kernel_cosf+0x98>)
 80078a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80078a6:	4293      	cmp	r3, r2
 80078a8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007910 <__kernel_cosf+0x9c>
 80078ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80078b0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8007914 <__kernel_cosf+0xa0>
 80078b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80078b8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007918 <__kernel_cosf+0xa4>
 80078bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80078c0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800791c <__kernel_cosf+0xa8>
 80078c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80078c8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80078cc:	ee26 6a07 	vmul.f32	s12, s12, s14
 80078d0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80078d4:	eee7 0a06 	vfma.f32	s1, s14, s12
 80078d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078dc:	d804      	bhi.n	80078e8 <__kernel_cosf+0x74>
 80078de:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80078e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80078e6:	4770      	bx	lr
 80078e8:	4a0d      	ldr	r2, [pc, #52]	@ (8007920 <__kernel_cosf+0xac>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	bf9a      	itte	ls
 80078ee:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80078f2:	ee07 3a10 	vmovls	s14, r3
 80078f6:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80078fa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80078fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007902:	e7ec      	b.n	80078de <__kernel_cosf+0x6a>
 8007904:	ad47d74e 	.word	0xad47d74e
 8007908:	310f74f6 	.word	0x310f74f6
 800790c:	3e999999 	.word	0x3e999999
 8007910:	b493f27c 	.word	0xb493f27c
 8007914:	37d00d01 	.word	0x37d00d01
 8007918:	bab60b61 	.word	0xbab60b61
 800791c:	3d2aaaab 	.word	0x3d2aaaab
 8007920:	3f480000 	.word	0x3f480000

08007924 <__kernel_sinf>:
 8007924:	ee10 3a10 	vmov	r3, s0
 8007928:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800792c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007930:	d204      	bcs.n	800793c <__kernel_sinf+0x18>
 8007932:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007936:	ee17 3a90 	vmov	r3, s15
 800793a:	b35b      	cbz	r3, 8007994 <__kernel_sinf+0x70>
 800793c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007940:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007998 <__kernel_sinf+0x74>
 8007944:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800799c <__kernel_sinf+0x78>
 8007948:	eea7 6a27 	vfma.f32	s12, s14, s15
 800794c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80079a0 <__kernel_sinf+0x7c>
 8007950:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007954:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80079a4 <__kernel_sinf+0x80>
 8007958:	eea7 6a87 	vfma.f32	s12, s15, s14
 800795c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80079a8 <__kernel_sinf+0x84>
 8007960:	ee60 6a07 	vmul.f32	s13, s0, s14
 8007964:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007968:	b930      	cbnz	r0, 8007978 <__kernel_sinf+0x54>
 800796a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80079ac <__kernel_sinf+0x88>
 800796e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007972:	eea6 0a26 	vfma.f32	s0, s12, s13
 8007976:	4770      	bx	lr
 8007978:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800797c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8007980:	eee0 7a86 	vfma.f32	s15, s1, s12
 8007984:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8007988:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80079b0 <__kernel_sinf+0x8c>
 800798c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8007990:	ee30 0a60 	vsub.f32	s0, s0, s1
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	2f2ec9d3 	.word	0x2f2ec9d3
 800799c:	b2d72f34 	.word	0xb2d72f34
 80079a0:	3638ef1b 	.word	0x3638ef1b
 80079a4:	b9500d01 	.word	0xb9500d01
 80079a8:	3c088889 	.word	0x3c088889
 80079ac:	be2aaaab 	.word	0xbe2aaaab
 80079b0:	3e2aaaab 	.word	0x3e2aaaab

080079b4 <__ieee754_rem_pio2f>:
 80079b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079b6:	ee10 6a10 	vmov	r6, s0
 80079ba:	4b88      	ldr	r3, [pc, #544]	@ (8007bdc <__ieee754_rem_pio2f+0x228>)
 80079bc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80079c0:	429d      	cmp	r5, r3
 80079c2:	b087      	sub	sp, #28
 80079c4:	4604      	mov	r4, r0
 80079c6:	d805      	bhi.n	80079d4 <__ieee754_rem_pio2f+0x20>
 80079c8:	2300      	movs	r3, #0
 80079ca:	ed80 0a00 	vstr	s0, [r0]
 80079ce:	6043      	str	r3, [r0, #4]
 80079d0:	2000      	movs	r0, #0
 80079d2:	e022      	b.n	8007a1a <__ieee754_rem_pio2f+0x66>
 80079d4:	4b82      	ldr	r3, [pc, #520]	@ (8007be0 <__ieee754_rem_pio2f+0x22c>)
 80079d6:	429d      	cmp	r5, r3
 80079d8:	d83a      	bhi.n	8007a50 <__ieee754_rem_pio2f+0x9c>
 80079da:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80079de:	2e00      	cmp	r6, #0
 80079e0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8007be4 <__ieee754_rem_pio2f+0x230>
 80079e4:	4a80      	ldr	r2, [pc, #512]	@ (8007be8 <__ieee754_rem_pio2f+0x234>)
 80079e6:	f023 030f 	bic.w	r3, r3, #15
 80079ea:	dd18      	ble.n	8007a1e <__ieee754_rem_pio2f+0x6a>
 80079ec:	4293      	cmp	r3, r2
 80079ee:	ee70 7a47 	vsub.f32	s15, s0, s14
 80079f2:	bf09      	itett	eq
 80079f4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8007bec <__ieee754_rem_pio2f+0x238>
 80079f8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8007bf0 <__ieee754_rem_pio2f+0x23c>
 80079fc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8007bf4 <__ieee754_rem_pio2f+0x240>
 8007a00:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8007a04:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8007a08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a0c:	ed80 7a00 	vstr	s14, [r0]
 8007a10:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007a14:	edc0 7a01 	vstr	s15, [r0, #4]
 8007a18:	2001      	movs	r0, #1
 8007a1a:	b007      	add	sp, #28
 8007a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	ee70 7a07 	vadd.f32	s15, s0, s14
 8007a24:	bf09      	itett	eq
 8007a26:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8007bec <__ieee754_rem_pio2f+0x238>
 8007a2a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8007bf0 <__ieee754_rem_pio2f+0x23c>
 8007a2e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8007bf4 <__ieee754_rem_pio2f+0x240>
 8007a32:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8007a36:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007a3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007a3e:	ed80 7a00 	vstr	s14, [r0]
 8007a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a46:	edc0 7a01 	vstr	s15, [r0, #4]
 8007a4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a4e:	e7e4      	b.n	8007a1a <__ieee754_rem_pio2f+0x66>
 8007a50:	4b69      	ldr	r3, [pc, #420]	@ (8007bf8 <__ieee754_rem_pio2f+0x244>)
 8007a52:	429d      	cmp	r5, r3
 8007a54:	d873      	bhi.n	8007b3e <__ieee754_rem_pio2f+0x18a>
 8007a56:	f000 f8dd 	bl	8007c14 <fabsf>
 8007a5a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8007bfc <__ieee754_rem_pio2f+0x248>
 8007a5e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007a62:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a6e:	ee17 0a90 	vmov	r0, s15
 8007a72:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007be4 <__ieee754_rem_pio2f+0x230>
 8007a76:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007a7a:	281f      	cmp	r0, #31
 8007a7c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8007bf0 <__ieee754_rem_pio2f+0x23c>
 8007a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a84:	eeb1 6a47 	vneg.f32	s12, s14
 8007a88:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007a8c:	ee16 1a90 	vmov	r1, s13
 8007a90:	dc09      	bgt.n	8007aa6 <__ieee754_rem_pio2f+0xf2>
 8007a92:	4a5b      	ldr	r2, [pc, #364]	@ (8007c00 <__ieee754_rem_pio2f+0x24c>)
 8007a94:	1e47      	subs	r7, r0, #1
 8007a96:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8007a9a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8007a9e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d107      	bne.n	8007ab6 <__ieee754_rem_pio2f+0x102>
 8007aa6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8007aaa:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8007aae:	2a08      	cmp	r2, #8
 8007ab0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8007ab4:	dc14      	bgt.n	8007ae0 <__ieee754_rem_pio2f+0x12c>
 8007ab6:	6021      	str	r1, [r4, #0]
 8007ab8:	ed94 7a00 	vldr	s14, [r4]
 8007abc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007ac0:	2e00      	cmp	r6, #0
 8007ac2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007ac6:	ed84 0a01 	vstr	s0, [r4, #4]
 8007aca:	daa6      	bge.n	8007a1a <__ieee754_rem_pio2f+0x66>
 8007acc:	eeb1 7a47 	vneg.f32	s14, s14
 8007ad0:	eeb1 0a40 	vneg.f32	s0, s0
 8007ad4:	ed84 7a00 	vstr	s14, [r4]
 8007ad8:	ed84 0a01 	vstr	s0, [r4, #4]
 8007adc:	4240      	negs	r0, r0
 8007ade:	e79c      	b.n	8007a1a <__ieee754_rem_pio2f+0x66>
 8007ae0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8007bec <__ieee754_rem_pio2f+0x238>
 8007ae4:	eef0 6a40 	vmov.f32	s13, s0
 8007ae8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8007aec:	ee70 7a66 	vsub.f32	s15, s0, s13
 8007af0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007af4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007bf4 <__ieee754_rem_pio2f+0x240>
 8007af8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8007afc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8007b00:	ee15 2a90 	vmov	r2, s11
 8007b04:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007b08:	1a5b      	subs	r3, r3, r1
 8007b0a:	2b19      	cmp	r3, #25
 8007b0c:	dc04      	bgt.n	8007b18 <__ieee754_rem_pio2f+0x164>
 8007b0e:	edc4 5a00 	vstr	s11, [r4]
 8007b12:	eeb0 0a66 	vmov.f32	s0, s13
 8007b16:	e7cf      	b.n	8007ab8 <__ieee754_rem_pio2f+0x104>
 8007b18:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8007c04 <__ieee754_rem_pio2f+0x250>
 8007b1c:	eeb0 0a66 	vmov.f32	s0, s13
 8007b20:	eea6 0a25 	vfma.f32	s0, s12, s11
 8007b24:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8007b28:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007c08 <__ieee754_rem_pio2f+0x254>
 8007b2c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8007b30:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8007b34:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007b38:	ed84 7a00 	vstr	s14, [r4]
 8007b3c:	e7bc      	b.n	8007ab8 <__ieee754_rem_pio2f+0x104>
 8007b3e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007b42:	d306      	bcc.n	8007b52 <__ieee754_rem_pio2f+0x19e>
 8007b44:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007b48:	edc0 7a01 	vstr	s15, [r0, #4]
 8007b4c:	edc0 7a00 	vstr	s15, [r0]
 8007b50:	e73e      	b.n	80079d0 <__ieee754_rem_pio2f+0x1c>
 8007b52:	15ea      	asrs	r2, r5, #23
 8007b54:	3a86      	subs	r2, #134	@ 0x86
 8007b56:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b62:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8007c0c <__ieee754_rem_pio2f+0x258>
 8007b66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b6e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007b72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007b7a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007b7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007b82:	ed8d 7a04 	vstr	s14, [sp, #16]
 8007b86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b92:	edcd 7a05 	vstr	s15, [sp, #20]
 8007b96:	d11e      	bne.n	8007bd6 <__ieee754_rem_pio2f+0x222>
 8007b98:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba0:	bf0c      	ite	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	2302      	movne	r3, #2
 8007ba6:	491a      	ldr	r1, [pc, #104]	@ (8007c10 <__ieee754_rem_pio2f+0x25c>)
 8007ba8:	9101      	str	r1, [sp, #4]
 8007baa:	2102      	movs	r1, #2
 8007bac:	9100      	str	r1, [sp, #0]
 8007bae:	a803      	add	r0, sp, #12
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f000 f837 	bl	8007c24 <__kernel_rem_pio2f>
 8007bb6:	2e00      	cmp	r6, #0
 8007bb8:	f6bf af2f 	bge.w	8007a1a <__ieee754_rem_pio2f+0x66>
 8007bbc:	edd4 7a00 	vldr	s15, [r4]
 8007bc0:	eef1 7a67 	vneg.f32	s15, s15
 8007bc4:	edc4 7a00 	vstr	s15, [r4]
 8007bc8:	edd4 7a01 	vldr	s15, [r4, #4]
 8007bcc:	eef1 7a67 	vneg.f32	s15, s15
 8007bd0:	edc4 7a01 	vstr	s15, [r4, #4]
 8007bd4:	e782      	b.n	8007adc <__ieee754_rem_pio2f+0x128>
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e7e5      	b.n	8007ba6 <__ieee754_rem_pio2f+0x1f2>
 8007bda:	bf00      	nop
 8007bdc:	3f490fd8 	.word	0x3f490fd8
 8007be0:	4016cbe3 	.word	0x4016cbe3
 8007be4:	3fc90f80 	.word	0x3fc90f80
 8007be8:	3fc90fd0 	.word	0x3fc90fd0
 8007bec:	37354400 	.word	0x37354400
 8007bf0:	37354443 	.word	0x37354443
 8007bf4:	2e85a308 	.word	0x2e85a308
 8007bf8:	43490f80 	.word	0x43490f80
 8007bfc:	3f22f984 	.word	0x3f22f984
 8007c00:	080086cc 	.word	0x080086cc
 8007c04:	2e85a300 	.word	0x2e85a300
 8007c08:	248d3132 	.word	0x248d3132
 8007c0c:	43800000 	.word	0x43800000
 8007c10:	0800874c 	.word	0x0800874c

08007c14 <fabsf>:
 8007c14:	ee10 3a10 	vmov	r3, s0
 8007c18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c1c:	ee00 3a10 	vmov	s0, r3
 8007c20:	4770      	bx	lr
	...

08007c24 <__kernel_rem_pio2f>:
 8007c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c28:	ed2d 8b04 	vpush	{d8-d9}
 8007c2c:	b0d9      	sub	sp, #356	@ 0x164
 8007c2e:	4690      	mov	r8, r2
 8007c30:	9001      	str	r0, [sp, #4]
 8007c32:	4ab9      	ldr	r2, [pc, #740]	@ (8007f18 <__kernel_rem_pio2f+0x2f4>)
 8007c34:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8007c36:	f118 0f04 	cmn.w	r8, #4
 8007c3a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8007c3e:	460f      	mov	r7, r1
 8007c40:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007c44:	db27      	blt.n	8007c96 <__kernel_rem_pio2f+0x72>
 8007c46:	f1b8 0203 	subs.w	r2, r8, #3
 8007c4a:	bf48      	it	mi
 8007c4c:	f108 0204 	addmi.w	r2, r8, #4
 8007c50:	10d2      	asrs	r2, r2, #3
 8007c52:	1c55      	adds	r5, r2, #1
 8007c54:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007c56:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8007f28 <__kernel_rem_pio2f+0x304>
 8007c5a:	00e8      	lsls	r0, r5, #3
 8007c5c:	eba2 060b 	sub.w	r6, r2, fp
 8007c60:	9002      	str	r0, [sp, #8]
 8007c62:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8007c66:	eb0a 0c0b 	add.w	ip, sl, fp
 8007c6a:	ac1c      	add	r4, sp, #112	@ 0x70
 8007c6c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8007c70:	2000      	movs	r0, #0
 8007c72:	4560      	cmp	r0, ip
 8007c74:	dd11      	ble.n	8007c9a <__kernel_rem_pio2f+0x76>
 8007c76:	a91c      	add	r1, sp, #112	@ 0x70
 8007c78:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8007c7c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8007c80:	f04f 0c00 	mov.w	ip, #0
 8007c84:	45d4      	cmp	ip, sl
 8007c86:	dc27      	bgt.n	8007cd8 <__kernel_rem_pio2f+0xb4>
 8007c88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007c8c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8007f28 <__kernel_rem_pio2f+0x304>
 8007c90:	4606      	mov	r6, r0
 8007c92:	2400      	movs	r4, #0
 8007c94:	e016      	b.n	8007cc4 <__kernel_rem_pio2f+0xa0>
 8007c96:	2200      	movs	r2, #0
 8007c98:	e7db      	b.n	8007c52 <__kernel_rem_pio2f+0x2e>
 8007c9a:	42c6      	cmn	r6, r0
 8007c9c:	bf5d      	ittte	pl
 8007c9e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8007ca2:	ee07 1a90 	vmovpl	s15, r1
 8007ca6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007caa:	eef0 7a47 	vmovmi.f32	s15, s14
 8007cae:	ece4 7a01 	vstmia	r4!, {s15}
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	e7dd      	b.n	8007c72 <__kernel_rem_pio2f+0x4e>
 8007cb6:	ecfe 6a01 	vldmia	lr!, {s13}
 8007cba:	ed96 7a00 	vldr	s14, [r6]
 8007cbe:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007cc2:	3401      	adds	r4, #1
 8007cc4:	455c      	cmp	r4, fp
 8007cc6:	f1a6 0604 	sub.w	r6, r6, #4
 8007cca:	ddf4      	ble.n	8007cb6 <__kernel_rem_pio2f+0x92>
 8007ccc:	ece9 7a01 	vstmia	r9!, {s15}
 8007cd0:	f10c 0c01 	add.w	ip, ip, #1
 8007cd4:	3004      	adds	r0, #4
 8007cd6:	e7d5      	b.n	8007c84 <__kernel_rem_pio2f+0x60>
 8007cd8:	a908      	add	r1, sp, #32
 8007cda:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cde:	9104      	str	r1, [sp, #16]
 8007ce0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8007ce2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8007f24 <__kernel_rem_pio2f+0x300>
 8007ce6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8007f20 <__kernel_rem_pio2f+0x2fc>
 8007cea:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007cee:	9203      	str	r2, [sp, #12]
 8007cf0:	4654      	mov	r4, sl
 8007cf2:	00a2      	lsls	r2, r4, #2
 8007cf4:	9205      	str	r2, [sp, #20]
 8007cf6:	aa58      	add	r2, sp, #352	@ 0x160
 8007cf8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8007cfc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8007d00:	a944      	add	r1, sp, #272	@ 0x110
 8007d02:	aa08      	add	r2, sp, #32
 8007d04:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8007d08:	4694      	mov	ip, r2
 8007d0a:	4626      	mov	r6, r4
 8007d0c:	2e00      	cmp	r6, #0
 8007d0e:	f1a0 0004 	sub.w	r0, r0, #4
 8007d12:	dc4c      	bgt.n	8007dae <__kernel_rem_pio2f+0x18a>
 8007d14:	4628      	mov	r0, r5
 8007d16:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d1a:	f000 fa39 	bl	8008190 <scalbnf>
 8007d1e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d22:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8007d26:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007d2a:	f000 f9ed 	bl	8008108 <floorf>
 8007d2e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8007d32:	eea0 8a67 	vfms.f32	s16, s0, s15
 8007d36:	2d00      	cmp	r5, #0
 8007d38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d3c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007d40:	ee17 9a90 	vmov	r9, s15
 8007d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d48:	ee38 8a67 	vsub.f32	s16, s16, s15
 8007d4c:	dd41      	ble.n	8007dd2 <__kernel_rem_pio2f+0x1ae>
 8007d4e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8007d52:	a908      	add	r1, sp, #32
 8007d54:	f1c5 0e08 	rsb	lr, r5, #8
 8007d58:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8007d5c:	fa46 f00e 	asr.w	r0, r6, lr
 8007d60:	4481      	add	r9, r0
 8007d62:	fa00 f00e 	lsl.w	r0, r0, lr
 8007d66:	1a36      	subs	r6, r6, r0
 8007d68:	f1c5 0007 	rsb	r0, r5, #7
 8007d6c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8007d70:	4106      	asrs	r6, r0
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	dd3c      	ble.n	8007df0 <__kernel_rem_pio2f+0x1cc>
 8007d76:	f04f 0e00 	mov.w	lr, #0
 8007d7a:	f109 0901 	add.w	r9, r9, #1
 8007d7e:	4670      	mov	r0, lr
 8007d80:	4574      	cmp	r4, lr
 8007d82:	dc68      	bgt.n	8007e56 <__kernel_rem_pio2f+0x232>
 8007d84:	2d00      	cmp	r5, #0
 8007d86:	dd03      	ble.n	8007d90 <__kernel_rem_pio2f+0x16c>
 8007d88:	2d01      	cmp	r5, #1
 8007d8a:	d074      	beq.n	8007e76 <__kernel_rem_pio2f+0x252>
 8007d8c:	2d02      	cmp	r5, #2
 8007d8e:	d07d      	beq.n	8007e8c <__kernel_rem_pio2f+0x268>
 8007d90:	2e02      	cmp	r6, #2
 8007d92:	d12d      	bne.n	8007df0 <__kernel_rem_pio2f+0x1cc>
 8007d94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007d98:	ee30 8a48 	vsub.f32	s16, s0, s16
 8007d9c:	b340      	cbz	r0, 8007df0 <__kernel_rem_pio2f+0x1cc>
 8007d9e:	4628      	mov	r0, r5
 8007da0:	9306      	str	r3, [sp, #24]
 8007da2:	f000 f9f5 	bl	8008190 <scalbnf>
 8007da6:	9b06      	ldr	r3, [sp, #24]
 8007da8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007dac:	e020      	b.n	8007df0 <__kernel_rem_pio2f+0x1cc>
 8007dae:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007db2:	3e01      	subs	r6, #1
 8007db4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007dbc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8007dc0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007dc4:	ecac 0a01 	vstmia	ip!, {s0}
 8007dc8:	ed90 0a00 	vldr	s0, [r0]
 8007dcc:	ee37 0a80 	vadd.f32	s0, s15, s0
 8007dd0:	e79c      	b.n	8007d0c <__kernel_rem_pio2f+0xe8>
 8007dd2:	d105      	bne.n	8007de0 <__kernel_rem_pio2f+0x1bc>
 8007dd4:	1e60      	subs	r0, r4, #1
 8007dd6:	a908      	add	r1, sp, #32
 8007dd8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8007ddc:	11f6      	asrs	r6, r6, #7
 8007dde:	e7c8      	b.n	8007d72 <__kernel_rem_pio2f+0x14e>
 8007de0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007de4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dec:	da31      	bge.n	8007e52 <__kernel_rem_pio2f+0x22e>
 8007dee:	2600      	movs	r6, #0
 8007df0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df8:	f040 8098 	bne.w	8007f2c <__kernel_rem_pio2f+0x308>
 8007dfc:	1e60      	subs	r0, r4, #1
 8007dfe:	2200      	movs	r2, #0
 8007e00:	4550      	cmp	r0, sl
 8007e02:	da4b      	bge.n	8007e9c <__kernel_rem_pio2f+0x278>
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	d065      	beq.n	8007ed4 <__kernel_rem_pio2f+0x2b0>
 8007e08:	3c01      	subs	r4, #1
 8007e0a:	ab08      	add	r3, sp, #32
 8007e0c:	3d08      	subs	r5, #8
 8007e0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0f8      	beq.n	8007e08 <__kernel_rem_pio2f+0x1e4>
 8007e16:	4628      	mov	r0, r5
 8007e18:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007e1c:	f000 f9b8 	bl	8008190 <scalbnf>
 8007e20:	1c63      	adds	r3, r4, #1
 8007e22:	aa44      	add	r2, sp, #272	@ 0x110
 8007e24:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007f24 <__kernel_rem_pio2f+0x300>
 8007e28:	0099      	lsls	r1, r3, #2
 8007e2a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8007e2e:	4623      	mov	r3, r4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f280 80a9 	bge.w	8007f88 <__kernel_rem_pio2f+0x364>
 8007e36:	4623      	mov	r3, r4
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f2c0 80c7 	blt.w	8007fcc <__kernel_rem_pio2f+0x3a8>
 8007e3e:	aa44      	add	r2, sp, #272	@ 0x110
 8007e40:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007e44:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8007f1c <__kernel_rem_pio2f+0x2f8>
 8007e48:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8007f28 <__kernel_rem_pio2f+0x304>
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	1ae2      	subs	r2, r4, r3
 8007e50:	e0b1      	b.n	8007fb6 <__kernel_rem_pio2f+0x392>
 8007e52:	2602      	movs	r6, #2
 8007e54:	e78f      	b.n	8007d76 <__kernel_rem_pio2f+0x152>
 8007e56:	f852 1b04 	ldr.w	r1, [r2], #4
 8007e5a:	b948      	cbnz	r0, 8007e70 <__kernel_rem_pio2f+0x24c>
 8007e5c:	b121      	cbz	r1, 8007e68 <__kernel_rem_pio2f+0x244>
 8007e5e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8007e62:	f842 1c04 	str.w	r1, [r2, #-4]
 8007e66:	2101      	movs	r1, #1
 8007e68:	f10e 0e01 	add.w	lr, lr, #1
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	e787      	b.n	8007d80 <__kernel_rem_pio2f+0x15c>
 8007e70:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8007e74:	e7f5      	b.n	8007e62 <__kernel_rem_pio2f+0x23e>
 8007e76:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8007e7a:	aa08      	add	r2, sp, #32
 8007e7c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007e80:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007e84:	a908      	add	r1, sp, #32
 8007e86:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8007e8a:	e781      	b.n	8007d90 <__kernel_rem_pio2f+0x16c>
 8007e8c:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 8007e90:	aa08      	add	r2, sp, #32
 8007e92:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8007e96:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007e9a:	e7f3      	b.n	8007e84 <__kernel_rem_pio2f+0x260>
 8007e9c:	a908      	add	r1, sp, #32
 8007e9e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007ea2:	3801      	subs	r0, #1
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	e7ab      	b.n	8007e00 <__kernel_rem_pio2f+0x1dc>
 8007ea8:	3201      	adds	r2, #1
 8007eaa:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8007eae:	2e00      	cmp	r6, #0
 8007eb0:	d0fa      	beq.n	8007ea8 <__kernel_rem_pio2f+0x284>
 8007eb2:	9905      	ldr	r1, [sp, #20]
 8007eb4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8007eb8:	eb0d 0001 	add.w	r0, sp, r1
 8007ebc:	18e6      	adds	r6, r4, r3
 8007ebe:	a91c      	add	r1, sp, #112	@ 0x70
 8007ec0:	f104 0c01 	add.w	ip, r4, #1
 8007ec4:	384c      	subs	r0, #76	@ 0x4c
 8007ec6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8007eca:	4422      	add	r2, r4
 8007ecc:	4562      	cmp	r2, ip
 8007ece:	da04      	bge.n	8007eda <__kernel_rem_pio2f+0x2b6>
 8007ed0:	4614      	mov	r4, r2
 8007ed2:	e70e      	b.n	8007cf2 <__kernel_rem_pio2f+0xce>
 8007ed4:	9804      	ldr	r0, [sp, #16]
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	e7e7      	b.n	8007eaa <__kernel_rem_pio2f+0x286>
 8007eda:	9903      	ldr	r1, [sp, #12]
 8007edc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007ee0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8007ee4:	9105      	str	r1, [sp, #20]
 8007ee6:	ee07 1a90 	vmov	s15, r1
 8007eea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007eee:	2400      	movs	r4, #0
 8007ef0:	ece6 7a01 	vstmia	r6!, {s15}
 8007ef4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8007f28 <__kernel_rem_pio2f+0x304>
 8007ef8:	46b1      	mov	r9, r6
 8007efa:	455c      	cmp	r4, fp
 8007efc:	dd04      	ble.n	8007f08 <__kernel_rem_pio2f+0x2e4>
 8007efe:	ece0 7a01 	vstmia	r0!, {s15}
 8007f02:	f10c 0c01 	add.w	ip, ip, #1
 8007f06:	e7e1      	b.n	8007ecc <__kernel_rem_pio2f+0x2a8>
 8007f08:	ecfe 6a01 	vldmia	lr!, {s13}
 8007f0c:	ed39 7a01 	vldmdb	r9!, {s14}
 8007f10:	3401      	adds	r4, #1
 8007f12:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007f16:	e7f0      	b.n	8007efa <__kernel_rem_pio2f+0x2d6>
 8007f18:	08008a90 	.word	0x08008a90
 8007f1c:	08008a64 	.word	0x08008a64
 8007f20:	43800000 	.word	0x43800000
 8007f24:	3b800000 	.word	0x3b800000
 8007f28:	00000000 	.word	0x00000000
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	eeb0 0a48 	vmov.f32	s0, s16
 8007f32:	eba3 0008 	sub.w	r0, r3, r8
 8007f36:	f000 f92b 	bl	8008190 <scalbnf>
 8007f3a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8007f20 <__kernel_rem_pio2f+0x2fc>
 8007f3e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8007f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f46:	db19      	blt.n	8007f7c <__kernel_rem_pio2f+0x358>
 8007f48:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8007f24 <__kernel_rem_pio2f+0x300>
 8007f4c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8007f50:	aa08      	add	r2, sp, #32
 8007f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f56:	3508      	adds	r5, #8
 8007f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f5c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007f60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007f64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007f68:	ee10 3a10 	vmov	r3, s0
 8007f6c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007f70:	ee17 3a90 	vmov	r3, s15
 8007f74:	3401      	adds	r4, #1
 8007f76:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8007f7a:	e74c      	b.n	8007e16 <__kernel_rem_pio2f+0x1f2>
 8007f7c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8007f80:	aa08      	add	r2, sp, #32
 8007f82:	ee10 3a10 	vmov	r3, s0
 8007f86:	e7f6      	b.n	8007f76 <__kernel_rem_pio2f+0x352>
 8007f88:	a808      	add	r0, sp, #32
 8007f8a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8007f8e:	9001      	str	r0, [sp, #4]
 8007f90:	ee07 0a90 	vmov	s15, r0
 8007f94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007f9e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007fa2:	ed62 7a01 	vstmdb	r2!, {s15}
 8007fa6:	e743      	b.n	8007e30 <__kernel_rem_pio2f+0x20c>
 8007fa8:	ecfc 6a01 	vldmia	ip!, {s13}
 8007fac:	ecb5 7a01 	vldmia	r5!, {s14}
 8007fb0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	4550      	cmp	r0, sl
 8007fb8:	dc01      	bgt.n	8007fbe <__kernel_rem_pio2f+0x39a>
 8007fba:	4282      	cmp	r2, r0
 8007fbc:	daf4      	bge.n	8007fa8 <__kernel_rem_pio2f+0x384>
 8007fbe:	a858      	add	r0, sp, #352	@ 0x160
 8007fc0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007fc4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	e735      	b.n	8007e38 <__kernel_rem_pio2f+0x214>
 8007fcc:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	dc09      	bgt.n	8007fe6 <__kernel_rem_pio2f+0x3c2>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dc2b      	bgt.n	800802e <__kernel_rem_pio2f+0x40a>
 8007fd6:	d044      	beq.n	8008062 <__kernel_rem_pio2f+0x43e>
 8007fd8:	f009 0007 	and.w	r0, r9, #7
 8007fdc:	b059      	add	sp, #356	@ 0x164
 8007fde:	ecbd 8b04 	vpop	{d8-d9}
 8007fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8007fe8:	2b03      	cmp	r3, #3
 8007fea:	d1f5      	bne.n	8007fd8 <__kernel_rem_pio2f+0x3b4>
 8007fec:	aa30      	add	r2, sp, #192	@ 0xc0
 8007fee:	1f0b      	subs	r3, r1, #4
 8007ff0:	4413      	add	r3, r2
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f1a2 0204 	sub.w	r2, r2, #4
 8007ffc:	dc52      	bgt.n	80080a4 <__kernel_rem_pio2f+0x480>
 8007ffe:	4622      	mov	r2, r4
 8008000:	2a01      	cmp	r2, #1
 8008002:	f1a3 0304 	sub.w	r3, r3, #4
 8008006:	dc5d      	bgt.n	80080c4 <__kernel_rem_pio2f+0x4a0>
 8008008:	ab30      	add	r3, sp, #192	@ 0xc0
 800800a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8007f28 <__kernel_rem_pio2f+0x304>
 800800e:	440b      	add	r3, r1
 8008010:	2c01      	cmp	r4, #1
 8008012:	dc67      	bgt.n	80080e4 <__kernel_rem_pio2f+0x4c0>
 8008014:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008018:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800801c:	2e00      	cmp	r6, #0
 800801e:	d167      	bne.n	80080f0 <__kernel_rem_pio2f+0x4cc>
 8008020:	edc7 6a00 	vstr	s13, [r7]
 8008024:	ed87 7a01 	vstr	s14, [r7, #4]
 8008028:	edc7 7a02 	vstr	s15, [r7, #8]
 800802c:	e7d4      	b.n	8007fd8 <__kernel_rem_pio2f+0x3b4>
 800802e:	ab30      	add	r3, sp, #192	@ 0xc0
 8008030:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8007f28 <__kernel_rem_pio2f+0x304>
 8008034:	440b      	add	r3, r1
 8008036:	4622      	mov	r2, r4
 8008038:	2a00      	cmp	r2, #0
 800803a:	da24      	bge.n	8008086 <__kernel_rem_pio2f+0x462>
 800803c:	b34e      	cbz	r6, 8008092 <__kernel_rem_pio2f+0x46e>
 800803e:	eef1 7a47 	vneg.f32	s15, s14
 8008042:	edc7 7a00 	vstr	s15, [r7]
 8008046:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800804a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800804e:	aa31      	add	r2, sp, #196	@ 0xc4
 8008050:	2301      	movs	r3, #1
 8008052:	429c      	cmp	r4, r3
 8008054:	da20      	bge.n	8008098 <__kernel_rem_pio2f+0x474>
 8008056:	b10e      	cbz	r6, 800805c <__kernel_rem_pio2f+0x438>
 8008058:	eef1 7a67 	vneg.f32	s15, s15
 800805c:	edc7 7a01 	vstr	s15, [r7, #4]
 8008060:	e7ba      	b.n	8007fd8 <__kernel_rem_pio2f+0x3b4>
 8008062:	ab30      	add	r3, sp, #192	@ 0xc0
 8008064:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8007f28 <__kernel_rem_pio2f+0x304>
 8008068:	440b      	add	r3, r1
 800806a:	2c00      	cmp	r4, #0
 800806c:	da05      	bge.n	800807a <__kernel_rem_pio2f+0x456>
 800806e:	b10e      	cbz	r6, 8008074 <__kernel_rem_pio2f+0x450>
 8008070:	eef1 7a67 	vneg.f32	s15, s15
 8008074:	edc7 7a00 	vstr	s15, [r7]
 8008078:	e7ae      	b.n	8007fd8 <__kernel_rem_pio2f+0x3b4>
 800807a:	ed33 7a01 	vldmdb	r3!, {s14}
 800807e:	3c01      	subs	r4, #1
 8008080:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008084:	e7f1      	b.n	800806a <__kernel_rem_pio2f+0x446>
 8008086:	ed73 7a01 	vldmdb	r3!, {s15}
 800808a:	3a01      	subs	r2, #1
 800808c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008090:	e7d2      	b.n	8008038 <__kernel_rem_pio2f+0x414>
 8008092:	eef0 7a47 	vmov.f32	s15, s14
 8008096:	e7d4      	b.n	8008042 <__kernel_rem_pio2f+0x41e>
 8008098:	ecb2 7a01 	vldmia	r2!, {s14}
 800809c:	3301      	adds	r3, #1
 800809e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080a2:	e7d6      	b.n	8008052 <__kernel_rem_pio2f+0x42e>
 80080a4:	edd2 7a00 	vldr	s15, [r2]
 80080a8:	edd2 6a01 	vldr	s13, [r2, #4]
 80080ac:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80080b0:	3801      	subs	r0, #1
 80080b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080b6:	ed82 7a00 	vstr	s14, [r2]
 80080ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080be:	edc2 7a01 	vstr	s15, [r2, #4]
 80080c2:	e798      	b.n	8007ff6 <__kernel_rem_pio2f+0x3d2>
 80080c4:	edd3 7a00 	vldr	s15, [r3]
 80080c8:	edd3 6a01 	vldr	s13, [r3, #4]
 80080cc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80080d0:	3a01      	subs	r2, #1
 80080d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080d6:	ed83 7a00 	vstr	s14, [r3]
 80080da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080de:	edc3 7a01 	vstr	s15, [r3, #4]
 80080e2:	e78d      	b.n	8008000 <__kernel_rem_pio2f+0x3dc>
 80080e4:	ed33 7a01 	vldmdb	r3!, {s14}
 80080e8:	3c01      	subs	r4, #1
 80080ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080ee:	e78f      	b.n	8008010 <__kernel_rem_pio2f+0x3ec>
 80080f0:	eef1 6a66 	vneg.f32	s13, s13
 80080f4:	eeb1 7a47 	vneg.f32	s14, s14
 80080f8:	edc7 6a00 	vstr	s13, [r7]
 80080fc:	ed87 7a01 	vstr	s14, [r7, #4]
 8008100:	eef1 7a67 	vneg.f32	s15, s15
 8008104:	e790      	b.n	8008028 <__kernel_rem_pio2f+0x404>
 8008106:	bf00      	nop

08008108 <floorf>:
 8008108:	ee10 3a10 	vmov	r3, s0
 800810c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008110:	3a7f      	subs	r2, #127	@ 0x7f
 8008112:	2a16      	cmp	r2, #22
 8008114:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008118:	dc2b      	bgt.n	8008172 <floorf+0x6a>
 800811a:	2a00      	cmp	r2, #0
 800811c:	da12      	bge.n	8008144 <floorf+0x3c>
 800811e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008184 <floorf+0x7c>
 8008122:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008126:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800812a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800812e:	dd06      	ble.n	800813e <floorf+0x36>
 8008130:	2b00      	cmp	r3, #0
 8008132:	da24      	bge.n	800817e <floorf+0x76>
 8008134:	2900      	cmp	r1, #0
 8008136:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <floorf+0x80>)
 8008138:	bf08      	it	eq
 800813a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800813e:	ee00 3a10 	vmov	s0, r3
 8008142:	4770      	bx	lr
 8008144:	4911      	ldr	r1, [pc, #68]	@ (800818c <floorf+0x84>)
 8008146:	4111      	asrs	r1, r2
 8008148:	420b      	tst	r3, r1
 800814a:	d0fa      	beq.n	8008142 <floorf+0x3a>
 800814c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008184 <floorf+0x7c>
 8008150:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008154:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800815c:	ddef      	ble.n	800813e <floorf+0x36>
 800815e:	2b00      	cmp	r3, #0
 8008160:	bfbe      	ittt	lt
 8008162:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8008166:	fa40 f202 	asrlt.w	r2, r0, r2
 800816a:	189b      	addlt	r3, r3, r2
 800816c:	ea23 0301 	bic.w	r3, r3, r1
 8008170:	e7e5      	b.n	800813e <floorf+0x36>
 8008172:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008176:	d3e4      	bcc.n	8008142 <floorf+0x3a>
 8008178:	ee30 0a00 	vadd.f32	s0, s0, s0
 800817c:	4770      	bx	lr
 800817e:	2300      	movs	r3, #0
 8008180:	e7dd      	b.n	800813e <floorf+0x36>
 8008182:	bf00      	nop
 8008184:	7149f2ca 	.word	0x7149f2ca
 8008188:	bf800000 	.word	0xbf800000
 800818c:	007fffff 	.word	0x007fffff

08008190 <scalbnf>:
 8008190:	ee10 3a10 	vmov	r3, s0
 8008194:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008198:	d02b      	beq.n	80081f2 <scalbnf+0x62>
 800819a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800819e:	d302      	bcc.n	80081a6 <scalbnf+0x16>
 80081a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80081a4:	4770      	bx	lr
 80081a6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80081aa:	d123      	bne.n	80081f4 <scalbnf+0x64>
 80081ac:	4b24      	ldr	r3, [pc, #144]	@ (8008240 <scalbnf+0xb0>)
 80081ae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008244 <scalbnf+0xb4>
 80081b2:	4298      	cmp	r0, r3
 80081b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80081b8:	db17      	blt.n	80081ea <scalbnf+0x5a>
 80081ba:	ee10 3a10 	vmov	r3, s0
 80081be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80081c2:	3a19      	subs	r2, #25
 80081c4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80081c8:	4288      	cmp	r0, r1
 80081ca:	dd15      	ble.n	80081f8 <scalbnf+0x68>
 80081cc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008248 <scalbnf+0xb8>
 80081d0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800824c <scalbnf+0xbc>
 80081d4:	ee10 3a10 	vmov	r3, s0
 80081d8:	eeb0 7a67 	vmov.f32	s14, s15
 80081dc:	2b00      	cmp	r3, #0
 80081de:	bfb8      	it	lt
 80081e0:	eef0 7a66 	vmovlt.f32	s15, s13
 80081e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80081e8:	4770      	bx	lr
 80081ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008250 <scalbnf+0xc0>
 80081ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 80081f2:	4770      	bx	lr
 80081f4:	0dd2      	lsrs	r2, r2, #23
 80081f6:	e7e5      	b.n	80081c4 <scalbnf+0x34>
 80081f8:	4410      	add	r0, r2
 80081fa:	28fe      	cmp	r0, #254	@ 0xfe
 80081fc:	dce6      	bgt.n	80081cc <scalbnf+0x3c>
 80081fe:	2800      	cmp	r0, #0
 8008200:	dd06      	ble.n	8008210 <scalbnf+0x80>
 8008202:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008206:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800820a:	ee00 3a10 	vmov	s0, r3
 800820e:	4770      	bx	lr
 8008210:	f110 0f16 	cmn.w	r0, #22
 8008214:	da09      	bge.n	800822a <scalbnf+0x9a>
 8008216:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008250 <scalbnf+0xc0>
 800821a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008254 <scalbnf+0xc4>
 800821e:	ee10 3a10 	vmov	r3, s0
 8008222:	eeb0 7a67 	vmov.f32	s14, s15
 8008226:	2b00      	cmp	r3, #0
 8008228:	e7d9      	b.n	80081de <scalbnf+0x4e>
 800822a:	3019      	adds	r0, #25
 800822c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008230:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008234:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008258 <scalbnf+0xc8>
 8008238:	ee07 3a90 	vmov	s15, r3
 800823c:	e7d7      	b.n	80081ee <scalbnf+0x5e>
 800823e:	bf00      	nop
 8008240:	ffff3cb0 	.word	0xffff3cb0
 8008244:	4c000000 	.word	0x4c000000
 8008248:	7149f2ca 	.word	0x7149f2ca
 800824c:	f149f2ca 	.word	0xf149f2ca
 8008250:	0da24260 	.word	0x0da24260
 8008254:	8da24260 	.word	0x8da24260
 8008258:	33000000 	.word	0x33000000

0800825c <_init>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	bf00      	nop
 8008260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008262:	bc08      	pop	{r3}
 8008264:	469e      	mov	lr, r3
 8008266:	4770      	bx	lr

08008268 <_fini>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	bf00      	nop
 800826c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826e:	bc08      	pop	{r3}
 8008270:	469e      	mov	lr, r3
 8008272:	4770      	bx	lr
