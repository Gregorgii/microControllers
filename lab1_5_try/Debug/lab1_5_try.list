
lab1_5_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a68  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000c2c  08000c2c  00001c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c3c  08000c3c  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c3c  08000c3c  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c3c  08000c3c  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c3c  08000c3c  00001c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000c40  08000c40  00001c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000c44  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000c50  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000c50  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d1c  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000b8a  00000000  00000000  00004d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000380  00000000  00000000  000058e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000027e  00000000  00000000  00005c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f91f  00000000  00000000  00005ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003e40  00000000  00000000  00025805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1910  00000000  00000000  00029645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eaf55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c20  00000000  00000000  000eaf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000ebbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000c14 	.word	0x08000c14

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08000c14 	.word	0x08000c14

08000204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
  HAL_Init();
 800020a:	f000 f99d 	bl	8000548 <HAL_Init>
  SystemClock_Config();
 800020e:	f000 f849 	bl	80002a4 <SystemClock_Config>
  MX_GPIO_Init();
 8000212:	f000 f84f 	bl	80002b4 <MX_GPIO_Init>

  uint8_t red_button_previous = 0;
 8000216:	2300      	movs	r3, #0
 8000218:	71fb      	strb	r3, [r7, #7]
  uint8_t blue_button_previous = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	71bb      	strb	r3, [r7, #6]

  while (1)
  {
    uint8_t red_button_state = HAL_GPIO_ReadPin(GPIOD, RED_BUTTON_PIN);
 800021e:	2104      	movs	r1, #4
 8000220:	481d      	ldr	r0, [pc, #116]	@ (8000298 <main+0x94>)
 8000222:	f000 fca1 	bl	8000b68 <HAL_GPIO_ReadPin>
 8000226:	4603      	mov	r3, r0
 8000228:	717b      	strb	r3, [r7, #5]
    uint8_t blue_button_state = HAL_GPIO_ReadPin(GPIOC, BLUE_BUTTON_PIN);
 800022a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800022e:	481b      	ldr	r0, [pc, #108]	@ (800029c <main+0x98>)
 8000230:	f000 fc9a 	bl	8000b68 <HAL_GPIO_ReadPin>
 8000234:	4603      	mov	r3, r0
 8000236:	713b      	strb	r3, [r7, #4]

    // Проверка нажатия красной кнопки
    if (red_button_state && !red_button_previous) // Нажатие красной кнопки
 8000238:	797b      	ldrb	r3, [r7, #5]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d011      	beq.n	8000262 <main+0x5e>
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d10e      	bne.n	8000262 <main+0x5e>
    {
      if (led_state < 8)
 8000244:	4b16      	ldr	r3, [pc, #88]	@ (80002a0 <main+0x9c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	2b07      	cmp	r3, #7
 800024a:	d805      	bhi.n	8000258 <main+0x54>
      {
        led_state++;
 800024c:	4b14      	ldr	r3, [pc, #80]	@ (80002a0 <main+0x9c>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	3301      	adds	r3, #1
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b12      	ldr	r3, [pc, #72]	@ (80002a0 <main+0x9c>)
 8000256:	701a      	strb	r2, [r3, #0]
      }
      update_leds();
 8000258:	f000 f8b2 	bl	80003c0 <update_leds>
      HAL_Delay(DEBOUNCE_DELAY); // Задержка
 800025c:	20c8      	movs	r0, #200	@ 0xc8
 800025e:	f000 f9e5 	bl	800062c <HAL_Delay>
    }
    red_button_previous = red_button_state;
 8000262:	797b      	ldrb	r3, [r7, #5]
 8000264:	71fb      	strb	r3, [r7, #7]

    // Проверка нажатия синей кнопки
    if (blue_button_state && !blue_button_previous) // Нажатие синей кнопки
 8000266:	793b      	ldrb	r3, [r7, #4]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d011      	beq.n	8000290 <main+0x8c>
 800026c:	79bb      	ldrb	r3, [r7, #6]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d10e      	bne.n	8000290 <main+0x8c>
    {
      if (led_state > 0)
 8000272:	4b0b      	ldr	r3, [pc, #44]	@ (80002a0 <main+0x9c>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	2b00      	cmp	r3, #0
 8000278:	d005      	beq.n	8000286 <main+0x82>
      {
        led_state--;
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <main+0x9c>)
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	3b01      	subs	r3, #1
 8000280:	b2da      	uxtb	r2, r3
 8000282:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <main+0x9c>)
 8000284:	701a      	strb	r2, [r3, #0]
      }
      update_leds();
 8000286:	f000 f89b 	bl	80003c0 <update_leds>
      HAL_Delay(DEBOUNCE_DELAY); // Задержка
 800028a:	20c8      	movs	r0, #200	@ 0xc8
 800028c:	f000 f9ce 	bl	800062c <HAL_Delay>
    }
    blue_button_previous = blue_button_state;
 8000290:	793b      	ldrb	r3, [r7, #4]
 8000292:	71bb      	strb	r3, [r7, #6]
  {
 8000294:	e7c3      	b.n	800021e <main+0x1a>
 8000296:	bf00      	nop
 8000298:	40020c00 	.word	0x40020c00
 800029c:	40020800 	.word	0x40020800
 80002a0:	20000028 	.word	0x20000028

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
	...

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08a      	sub	sp, #40	@ 0x28
 80002b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ba:	f107 030c 	add.w	r3, r7, #12
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
 80002c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ca:	2300      	movs	r3, #0
 80002cc:	60bb      	str	r3, [r7, #8]
 80002ce:	4b38      	ldr	r3, [pc, #224]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d2:	4a37      	ldr	r2, [pc, #220]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002da:	4b35      	ldr	r3, [pc, #212]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002de:	f003 0304 	and.w	r3, r3, #4
 80002e2:	60bb      	str	r3, [r7, #8]
 80002e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	2300      	movs	r3, #0
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	4b31      	ldr	r3, [pc, #196]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 80002ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ee:	4a30      	ldr	r2, [pc, #192]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 80002f0:	f043 0301 	orr.w	r3, r3, #1
 80002f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002f6:	4b2e      	ldr	r3, [pc, #184]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fa:	f003 0301 	and.w	r3, r3, #1
 80002fe:	607b      	str	r3, [r7, #4]
 8000300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000302:	2300      	movs	r3, #0
 8000304:	603b      	str	r3, [r7, #0]
 8000306:	4b2a      	ldr	r3, [pc, #168]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030a:	4a29      	ldr	r2, [pc, #164]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 800030c:	f043 0308 	orr.w	r3, r3, #8
 8000310:	6313      	str	r3, [r2, #48]	@ 0x30
 8000312:	4b27      	ldr	r3, [pc, #156]	@ (80003b0 <MX_GPIO_Init+0xfc>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000316:	f003 0308 	and.w	r3, r3, #8
 800031a:	603b      	str	r3, [r7, #0]
 800031c:	683b      	ldr	r3, [r7, #0]

  /* Configure GPIO pin Output Level */
  for (int i = 0; i < 8; i++) {
 800031e:	2300      	movs	r3, #0
 8000320:	627b      	str	r3, [r7, #36]	@ 0x24
 8000322:	e00b      	b.n	800033c <MX_GPIO_Init+0x88>
    HAL_GPIO_WritePin(GPIOC, led_pins[i], GPIO_PIN_RESET);
 8000324:	4a23      	ldr	r2, [pc, #140]	@ (80003b4 <MX_GPIO_Init+0x100>)
 8000326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800032c:	2200      	movs	r2, #0
 800032e:	4619      	mov	r1, r3
 8000330:	4821      	ldr	r0, [pc, #132]	@ (80003b8 <MX_GPIO_Init+0x104>)
 8000332:	f000 fc31 	bl	8000b98 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 8000336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000338:	3301      	adds	r3, #1
 800033a:	627b      	str	r3, [r7, #36]	@ 0x24
 800033c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800033e:	2b07      	cmp	r3, #7
 8000340:	ddf0      	ble.n	8000324 <MX_GPIO_Init+0x70>
  }

  /* Configure LED pins */
  for (int i = 0; i < 8; i++) {
 8000342:	2300      	movs	r3, #0
 8000344:	623b      	str	r3, [r7, #32]
 8000346:	e013      	b.n	8000370 <MX_GPIO_Init+0xbc>
    GPIO_InitStruct.Pin = led_pins[i];
 8000348:	4a1a      	ldr	r2, [pc, #104]	@ (80003b4 <MX_GPIO_Init+0x100>)
 800034a:	6a3b      	ldr	r3, [r7, #32]
 800034c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000350:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2300      	movs	r3, #0
 800035c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	4619      	mov	r1, r3
 8000364:	4814      	ldr	r0, [pc, #80]	@ (80003b8 <MX_GPIO_Init+0x104>)
 8000366:	f000 fa6b 	bl	8000840 <HAL_GPIO_Init>
  for (int i = 0; i < 8; i++) {
 800036a:	6a3b      	ldr	r3, [r7, #32]
 800036c:	3301      	adds	r3, #1
 800036e:	623b      	str	r3, [r7, #32]
 8000370:	6a3b      	ldr	r3, [r7, #32]
 8000372:	2b07      	cmp	r3, #7
 8000374:	dde8      	ble.n	8000348 <MX_GPIO_Init+0x94>
  }

  /* Configure button pins */
  GPIO_InitStruct.Pin = RED_BUTTON_PIN;
 8000376:	2304      	movs	r3, #4
 8000378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800037e:	2302      	movs	r3, #2
 8000380:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	4619      	mov	r1, r3
 8000388:	480c      	ldr	r0, [pc, #48]	@ (80003bc <MX_GPIO_Init+0x108>)
 800038a:	f000 fa59 	bl	8000840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = BLUE_BUTTON_PIN;
 800038e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000398:	2302      	movs	r3, #2
 800039a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800039c:	f107 030c 	add.w	r3, r7, #12
 80003a0:	4619      	mov	r1, r3
 80003a2:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <MX_GPIO_Init+0x104>)
 80003a4:	f000 fa4c 	bl	8000840 <HAL_GPIO_Init>
}
 80003a8:	bf00      	nop
 80003aa:	3728      	adds	r7, #40	@ 0x28
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	40023800 	.word	0x40023800
 80003b4:	08000c2c 	.word	0x08000c2c
 80003b8:	40020800 	.word	0x40020800
 80003bc:	40020c00 	.word	0x40020c00

080003c0 <update_leds>:
/**
  * @brief Update LEDs state
  * @retval None
  */
void update_leds(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
  for (int i = 0; i < 8; i++) {
 80003c6:	2300      	movs	r3, #0
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	e01b      	b.n	8000404 <update_leds+0x44>
    if (i < led_state) {
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <update_leds+0x54>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	461a      	mov	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4293      	cmp	r3, r2
 80003d6:	da09      	bge.n	80003ec <update_leds+0x2c>
      HAL_GPIO_WritePin(GPIOC, led_pins[i], GPIO_PIN_SET); // Включаем светодиод
 80003d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000418 <update_leds+0x58>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003e0:	2201      	movs	r2, #1
 80003e2:	4619      	mov	r1, r3
 80003e4:	480d      	ldr	r0, [pc, #52]	@ (800041c <update_leds+0x5c>)
 80003e6:	f000 fbd7 	bl	8000b98 <HAL_GPIO_WritePin>
 80003ea:	e008      	b.n	80003fe <update_leds+0x3e>
    } else {
      HAL_GPIO_WritePin(GPIOC, led_pins[i], GPIO_PIN_RESET); // Выключаем светодиод
 80003ec:	4a0a      	ldr	r2, [pc, #40]	@ (8000418 <update_leds+0x58>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003f4:	2200      	movs	r2, #0
 80003f6:	4619      	mov	r1, r3
 80003f8:	4808      	ldr	r0, [pc, #32]	@ (800041c <update_leds+0x5c>)
 80003fa:	f000 fbcd 	bl	8000b98 <HAL_GPIO_WritePin>
  for (int i = 0; i < 8; i++) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	3301      	adds	r3, #1
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b07      	cmp	r3, #7
 8000408:	dde0      	ble.n	80003cc <update_leds+0xc>
    }
  }
}
 800040a:	bf00      	nop
 800040c:	bf00      	nop
 800040e:	3708      	adds	r7, #8
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028
 8000418:	08000c2c 	.word	0x08000c2c
 800041c:	40020800 	.word	0x40020800

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000426:	2300      	movs	r3, #0
 8000428:	607b      	str	r3, [r7, #4]
 800042a:	4b10      	ldr	r3, [pc, #64]	@ (800046c <HAL_MspInit+0x4c>)
 800042c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800042e:	4a0f      	ldr	r2, [pc, #60]	@ (800046c <HAL_MspInit+0x4c>)
 8000430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000434:	6453      	str	r3, [r2, #68]	@ 0x44
 8000436:	4b0d      	ldr	r3, [pc, #52]	@ (800046c <HAL_MspInit+0x4c>)
 8000438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800043a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	2300      	movs	r3, #0
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	4b09      	ldr	r3, [pc, #36]	@ (800046c <HAL_MspInit+0x4c>)
 8000448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800044a:	4a08      	ldr	r2, [pc, #32]	@ (800046c <HAL_MspInit+0x4c>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000450:	6413      	str	r3, [r2, #64]	@ 0x40
 8000452:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_MspInit+0x4c>)
 8000454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40023800 	.word	0x40023800

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <NMI_Handler+0x4>

08000478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047c:	bf00      	nop
 800047e:	e7fd      	b.n	800047c <HardFault_Handler+0x4>

08000480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <MemManage_Handler+0x4>

08000488 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <BusFault_Handler+0x4>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <UsageFault_Handler+0x4>

08000498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr

080004c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004c2:	b580      	push	{r7, lr}
 80004c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004c6:	f000 f891 	bl	80005ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004d4:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <SystemInit+0x20>)
 80004d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004da:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <SystemInit+0x20>)
 80004dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800052c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80004f8:	f7ff ffea 	bl	80004d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	@ (8000530 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	@ (8000534 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	@ (8000538 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	@ (8000540 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000522:	f000 fb53 	bl	8000bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000526:	f7ff fe6d 	bl	8000204 <main>
  bx  lr    
 800052a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800052c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000538:	08000c44 	.word	0x08000c44
  ldr r2, =_sbss
 800053c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000540:	20000030 	.word	0x20000030

08000544 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC_IRQHandler>
	...

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800054c:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <HAL_Init+0x40>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0d      	ldr	r2, [pc, #52]	@ (8000588 <HAL_Init+0x40>)
 8000552:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000556:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000558:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <HAL_Init+0x40>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <HAL_Init+0x40>)
 800055e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000562:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000564:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <HAL_Init+0x40>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a07      	ldr	r2, [pc, #28]	@ (8000588 <HAL_Init+0x40>)
 800056a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800056e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000570:	2003      	movs	r0, #3
 8000572:	f000 f931 	bl	80007d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000576:	200f      	movs	r0, #15
 8000578:	f000 f808 	bl	800058c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800057c:	f7ff ff50 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000580:	2300      	movs	r3, #0
}
 8000582:	4618      	mov	r0, r3
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40023c00 	.word	0x40023c00

0800058c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000594:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <HAL_InitTick+0x54>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <HAL_InitTick+0x58>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	4619      	mov	r1, r3
 800059e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 f93b 	bl	8000826 <HAL_SYSTICK_Config>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005b6:	2301      	movs	r3, #1
 80005b8:	e00e      	b.n	80005d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2b0f      	cmp	r3, #15
 80005be:	d80a      	bhi.n	80005d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c0:	2200      	movs	r2, #0
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80005c8:	f000 f911 	bl	80007ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005cc:	4a06      	ldr	r2, [pc, #24]	@ (80005e8 <HAL_InitTick+0x5c>)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005d2:	2300      	movs	r3, #0
 80005d4:	e000      	b.n	80005d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000000 	.word	0x20000000
 80005e4:	20000008 	.word	0x20000008
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <HAL_IncTick+0x20>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <HAL_IncTick+0x24>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <HAL_IncTick+0x24>)
 80005fe:	6013      	str	r3, [r2, #0]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000008 	.word	0x20000008
 8000610:	2000002c 	.word	0x2000002c

08000614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return uwTick;
 8000618:	4b03      	ldr	r3, [pc, #12]	@ (8000628 <HAL_GetTick+0x14>)
 800061a:	681b      	ldr	r3, [r3, #0]
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	2000002c 	.word	0x2000002c

0800062c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000634:	f7ff ffee 	bl	8000614 <HAL_GetTick>
 8000638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000644:	d005      	beq.n	8000652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <HAL_Delay+0x44>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	4413      	add	r3, r2
 8000650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000652:	bf00      	nop
 8000654:	f7ff ffde 	bl	8000614 <HAL_GetTick>
 8000658:	4602      	mov	r2, r0
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	1ad3      	subs	r3, r2, r3
 800065e:	68fa      	ldr	r2, [r7, #12]
 8000660:	429a      	cmp	r2, r3
 8000662:	d8f7      	bhi.n	8000654 <HAL_Delay+0x28>
  {
  }
}
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000008 	.word	0x20000008

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	6039      	str	r1, [r7, #0]
 80006e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db0a      	blt.n	8000702 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	b2da      	uxtb	r2, r3
 80006f0:	490c      	ldr	r1, [pc, #48]	@ (8000724 <__NVIC_SetPriority+0x4c>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	0112      	lsls	r2, r2, #4
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	440b      	add	r3, r1
 80006fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000700:	e00a      	b.n	8000718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4908      	ldr	r1, [pc, #32]	@ (8000728 <__NVIC_SetPriority+0x50>)
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f003 030f 	and.w	r3, r3, #15
 800070e:	3b04      	subs	r3, #4
 8000710:	0112      	lsls	r2, r2, #4
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	440b      	add	r3, r1
 8000716:	761a      	strb	r2, [r3, #24]
}
 8000718:	bf00      	nop
 800071a:	370c      	adds	r7, #12
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000e100 	.word	0xe000e100
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072c:	b480      	push	{r7}
 800072e:	b089      	sub	sp, #36	@ 0x24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f003 0307 	and.w	r3, r3, #7
 800073e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	f1c3 0307 	rsb	r3, r3, #7
 8000746:	2b04      	cmp	r3, #4
 8000748:	bf28      	it	cs
 800074a:	2304      	movcs	r3, #4
 800074c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3304      	adds	r3, #4
 8000752:	2b06      	cmp	r3, #6
 8000754:	d902      	bls.n	800075c <NVIC_EncodePriority+0x30>
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3b03      	subs	r3, #3
 800075a:	e000      	b.n	800075e <NVIC_EncodePriority+0x32>
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000760:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000764:	69bb      	ldr	r3, [r7, #24]
 8000766:	fa02 f303 	lsl.w	r3, r2, r3
 800076a:	43da      	mvns	r2, r3
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	401a      	ands	r2, r3
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000774:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	fa01 f303 	lsl.w	r3, r1, r3
 800077e:	43d9      	mvns	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000784:	4313      	orrs	r3, r2
         );
}
 8000786:	4618      	mov	r0, r3
 8000788:	3724      	adds	r7, #36	@ 0x24
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
	...

08000794 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007a4:	d301      	bcc.n	80007aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a6:	2301      	movs	r3, #1
 80007a8:	e00f      	b.n	80007ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007aa:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <SysTick_Config+0x40>)
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3b01      	subs	r3, #1
 80007b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b2:	210f      	movs	r1, #15
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007b8:	f7ff ff8e 	bl	80006d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <SysTick_Config+0x40>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c2:	4b04      	ldr	r3, [pc, #16]	@ (80007d4 <SysTick_Config+0x40>)
 80007c4:	2207      	movs	r2, #7
 80007c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c8:	2300      	movs	r3, #0
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	e000e010 	.word	0xe000e010

080007d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff47 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b086      	sub	sp, #24
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	4603      	mov	r3, r0
 80007f6:	60b9      	str	r1, [r7, #8]
 80007f8:	607a      	str	r2, [r7, #4]
 80007fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000800:	f7ff ff5c 	bl	80006bc <__NVIC_GetPriorityGrouping>
 8000804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	68b9      	ldr	r1, [r7, #8]
 800080a:	6978      	ldr	r0, [r7, #20]
 800080c:	f7ff ff8e 	bl	800072c <NVIC_EncodePriority>
 8000810:	4602      	mov	r2, r0
 8000812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000816:	4611      	mov	r1, r2
 8000818:	4618      	mov	r0, r3
 800081a:	f7ff ff5d 	bl	80006d8 <__NVIC_SetPriority>
}
 800081e:	bf00      	nop
 8000820:	3718      	adds	r7, #24
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffb0 	bl	8000794 <SysTick_Config>
 8000834:	4603      	mov	r3, r0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000840:	b480      	push	{r7}
 8000842:	b089      	sub	sp, #36	@ 0x24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
 800085a:	e165      	b.n	8000b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800085c:	2201      	movs	r2, #1
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	697a      	ldr	r2, [r7, #20]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	429a      	cmp	r2, r3
 8000876:	f040 8154 	bne.w	8000b22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	f003 0303 	and.w	r3, r3, #3
 8000882:	2b01      	cmp	r3, #1
 8000884:	d005      	beq.n	8000892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800088e:	2b02      	cmp	r3, #2
 8000890:	d130      	bne.n	80008f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	005b      	lsls	r3, r3, #1
 800089c:	2203      	movs	r2, #3
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	43db      	mvns	r3, r3
 80008a4:	69ba      	ldr	r2, [r7, #24]
 80008a6:	4013      	ands	r3, r2
 80008a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	005b      	lsls	r3, r3, #1
 80008b2:	fa02 f303 	lsl.w	r3, r2, r3
 80008b6:	69ba      	ldr	r2, [r7, #24]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	69ba      	ldr	r2, [r7, #24]
 80008c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	685b      	ldr	r3, [r3, #4]
 80008c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008c8:	2201      	movs	r2, #1
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	69ba      	ldr	r2, [r7, #24]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	f003 0201 	and.w	r2, r3, #1
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	69ba      	ldr	r2, [r7, #24]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	f003 0303 	and.w	r3, r3, #3
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d017      	beq.n	8000930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	2203      	movs	r2, #3
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	43db      	mvns	r3, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4013      	ands	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	689a      	ldr	r2, [r3, #8]
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	4313      	orrs	r3, r2
 8000928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	69ba      	ldr	r2, [r7, #24]
 800092e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f003 0303 	and.w	r3, r3, #3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d123      	bne.n	8000984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800093c:	69fb      	ldr	r3, [r7, #28]
 800093e:	08da      	lsrs	r2, r3, #3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	3208      	adds	r2, #8
 8000944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	f003 0307 	and.w	r3, r3, #7
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	220f      	movs	r2, #15
 8000954:	fa02 f303 	lsl.w	r3, r2, r3
 8000958:	43db      	mvns	r3, r3
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	4013      	ands	r3, r2
 800095e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	691a      	ldr	r2, [r3, #16]
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f003 0307 	and.w	r3, r3, #7
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	69ba      	ldr	r2, [r7, #24]
 8000972:	4313      	orrs	r3, r2
 8000974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	08da      	lsrs	r2, r3, #3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	3208      	adds	r2, #8
 800097e:	69b9      	ldr	r1, [r7, #24]
 8000980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	2203      	movs	r2, #3
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	43db      	mvns	r3, r3
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	4013      	ands	r3, r2
 800099a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 0203 	and.w	r2, r3, #3
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	69ba      	ldr	r2, [r7, #24]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69ba      	ldr	r2, [r7, #24]
 80009b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	f000 80ae 	beq.w	8000b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000b40 <HAL_GPIO_Init+0x300>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a5c      	ldr	r2, [pc, #368]	@ (8000b40 <HAL_GPIO_Init+0x300>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000b40 <HAL_GPIO_Init+0x300>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009e2:	4a58      	ldr	r2, [pc, #352]	@ (8000b44 <HAL_GPIO_Init+0x304>)
 80009e4:	69fb      	ldr	r3, [r7, #28]
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	3302      	adds	r3, #2
 80009ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f003 0303 	and.w	r3, r3, #3
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	220f      	movs	r2, #15
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	69ba      	ldr	r2, [r7, #24]
 8000a02:	4013      	ands	r3, r2
 8000a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a4f      	ldr	r2, [pc, #316]	@ (8000b48 <HAL_GPIO_Init+0x308>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d025      	beq.n	8000a5a <HAL_GPIO_Init+0x21a>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a4e      	ldr	r2, [pc, #312]	@ (8000b4c <HAL_GPIO_Init+0x30c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d01f      	beq.n	8000a56 <HAL_GPIO_Init+0x216>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a4d      	ldr	r2, [pc, #308]	@ (8000b50 <HAL_GPIO_Init+0x310>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d019      	beq.n	8000a52 <HAL_GPIO_Init+0x212>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4c      	ldr	r2, [pc, #304]	@ (8000b54 <HAL_GPIO_Init+0x314>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d013      	beq.n	8000a4e <HAL_GPIO_Init+0x20e>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4b      	ldr	r2, [pc, #300]	@ (8000b58 <HAL_GPIO_Init+0x318>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00d      	beq.n	8000a4a <HAL_GPIO_Init+0x20a>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4a      	ldr	r2, [pc, #296]	@ (8000b5c <HAL_GPIO_Init+0x31c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d007      	beq.n	8000a46 <HAL_GPIO_Init+0x206>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a49      	ldr	r2, [pc, #292]	@ (8000b60 <HAL_GPIO_Init+0x320>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_GPIO_Init+0x202>
 8000a3e:	2306      	movs	r3, #6
 8000a40:	e00c      	b.n	8000a5c <HAL_GPIO_Init+0x21c>
 8000a42:	2307      	movs	r3, #7
 8000a44:	e00a      	b.n	8000a5c <HAL_GPIO_Init+0x21c>
 8000a46:	2305      	movs	r3, #5
 8000a48:	e008      	b.n	8000a5c <HAL_GPIO_Init+0x21c>
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	e006      	b.n	8000a5c <HAL_GPIO_Init+0x21c>
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e004      	b.n	8000a5c <HAL_GPIO_Init+0x21c>
 8000a52:	2302      	movs	r3, #2
 8000a54:	e002      	b.n	8000a5c <HAL_GPIO_Init+0x21c>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <HAL_GPIO_Init+0x21c>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	69fa      	ldr	r2, [r7, #28]
 8000a5e:	f002 0203 	and.w	r2, r2, #3
 8000a62:	0092      	lsls	r2, r2, #2
 8000a64:	4093      	lsls	r3, r2
 8000a66:	69ba      	ldr	r2, [r7, #24]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a6c:	4935      	ldr	r1, [pc, #212]	@ (8000b44 <HAL_GPIO_Init+0x304>)
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	089b      	lsrs	r3, r3, #2
 8000a72:	3302      	adds	r3, #2
 8000a74:	69ba      	ldr	r2, [r7, #24]
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000b64 <HAL_GPIO_Init+0x324>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	43db      	mvns	r3, r3
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	4013      	ands	r3, r2
 8000a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000a96:	69ba      	ldr	r2, [r7, #24]
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a9e:	4a31      	ldr	r2, [pc, #196]	@ (8000b64 <HAL_GPIO_Init+0x324>)
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aa4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b64 <HAL_GPIO_Init+0x324>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ac8:	4a26      	ldr	r2, [pc, #152]	@ (8000b64 <HAL_GPIO_Init+0x324>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ace:	4b25      	ldr	r3, [pc, #148]	@ (8000b64 <HAL_GPIO_Init+0x324>)
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	4013      	ands	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000aea:	69ba      	ldr	r2, [r7, #24]
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000af2:	4a1c      	ldr	r2, [pc, #112]	@ (8000b64 <HAL_GPIO_Init+0x324>)
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <HAL_GPIO_Init+0x324>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	4013      	ands	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b14:	69ba      	ldr	r2, [r7, #24]
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000b1c:	4a11      	ldr	r2, [pc, #68]	@ (8000b64 <HAL_GPIO_Init+0x324>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	3301      	adds	r3, #1
 8000b26:	61fb      	str	r3, [r7, #28]
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	2b0f      	cmp	r3, #15
 8000b2c:	f67f ae96 	bls.w	800085c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	3724      	adds	r7, #36	@ 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40013800 	.word	0x40013800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40021400 	.word	0x40021400
 8000b60:	40021800 	.word	0x40021800
 8000b64:	40013c00 	.word	0x40013c00

08000b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	691a      	ldr	r2, [r3, #16]
 8000b78:	887b      	ldrh	r3, [r7, #2]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d002      	beq.n	8000b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b80:	2301      	movs	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e001      	b.n	8000b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	807b      	strh	r3, [r7, #2]
 8000ba4:	4613      	mov	r3, r2
 8000ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ba8:	787b      	ldrb	r3, [r7, #1]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bae:	887a      	ldrh	r2, [r7, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bb4:	e003      	b.n	8000bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bb6:	887b      	ldrh	r3, [r7, #2]
 8000bb8:	041a      	lsls	r2, r3, #16
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	619a      	str	r2, [r3, #24]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <__libc_init_array>:
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	4d0d      	ldr	r5, [pc, #52]	@ (8000c04 <__libc_init_array+0x38>)
 8000bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8000c08 <__libc_init_array+0x3c>)
 8000bd2:	1b64      	subs	r4, r4, r5
 8000bd4:	10a4      	asrs	r4, r4, #2
 8000bd6:	2600      	movs	r6, #0
 8000bd8:	42a6      	cmp	r6, r4
 8000bda:	d109      	bne.n	8000bf0 <__libc_init_array+0x24>
 8000bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8000c0c <__libc_init_array+0x40>)
 8000bde:	4c0c      	ldr	r4, [pc, #48]	@ (8000c10 <__libc_init_array+0x44>)
 8000be0:	f000 f818 	bl	8000c14 <_init>
 8000be4:	1b64      	subs	r4, r4, r5
 8000be6:	10a4      	asrs	r4, r4, #2
 8000be8:	2600      	movs	r6, #0
 8000bea:	42a6      	cmp	r6, r4
 8000bec:	d105      	bne.n	8000bfa <__libc_init_array+0x2e>
 8000bee:	bd70      	pop	{r4, r5, r6, pc}
 8000bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bf4:	4798      	blx	r3
 8000bf6:	3601      	adds	r6, #1
 8000bf8:	e7ee      	b.n	8000bd8 <__libc_init_array+0xc>
 8000bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bfe:	4798      	blx	r3
 8000c00:	3601      	adds	r6, #1
 8000c02:	e7f2      	b.n	8000bea <__libc_init_array+0x1e>
 8000c04:	08000c3c 	.word	0x08000c3c
 8000c08:	08000c3c 	.word	0x08000c3c
 8000c0c:	08000c3c 	.word	0x08000c3c
 8000c10:	08000c40 	.word	0x08000c40

08000c14 <_init>:
 8000c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c16:	bf00      	nop
 8000c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c1a:	bc08      	pop	{r3}
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	4770      	bx	lr

08000c20 <_fini>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	bf00      	nop
 8000c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c26:	bc08      	pop	{r3}
 8000c28:	469e      	mov	lr, r3
 8000c2a:	4770      	bx	lr
