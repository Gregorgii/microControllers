{\rtf1\ansi\ansicpg1251\cocoartf2820
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;\f2\fnil\fcharset0 Menlo-Italic;
}
{\colortbl;\red255\green255\blue255;\red63\green127\blue95;\red127\green0\blue85;\red42\green0\blue255;
\red0\green80\blue50;\red100\green40\blue128;\red0\green0\blue192;}
{\*\expandedcolortbl;;\csgenericrgb\c24706\c49804\c37255;\csgenericrgb\c49804\c0\c33333;\csgenericrgb\c16471\c0\c100000;
\csgenericrgb\c0\c31373\c19608;\csgenericrgb\c39216\c15686\c50196;\csgenericrgb\c0\c0\c75294;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 /* USER CODE BEGIN Header */\cf0 \
\cf2 /**\cf0 \
\cf2   ******************************************************************************\cf0 \
\cf2   * @file           : main.c\cf0 \
\cf2   * @brief          : Main program body\cf0 \
\cf2   ******************************************************************************\cf0 \
\cf2   * @attention\cf0 \
\cf2   *\cf0 \
\cf2   * Copyright (c) 2024 STMicroelectronics.\cf0 \
\cf2   * All rights reserved.\cf0 \
\cf2   *\cf0 \
\cf2   * This software is licensed under terms that can be found in the LICENSE file\cf0 \
\cf2   * in the root directory of this software component.\cf0 \
\cf2   * If no LICENSE file comes with this software, it is provided AS-IS.\cf0 \
\cf2   *\cf0 \
\cf2   ******************************************************************************\cf0 \
\cf2   */\cf0 \
\cf2 /* USER CODE END Header */\cf0 \
\cf2 /* Includes ------------------------------------------------------------------*/\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 "main.h"\cf0 \

\f1\b \cf3 #include
\f0\b0 \cf0  \cf4 <math.h>\cf0 \
\
\cf2 /* Private includes ----------------------------------------------------------*/\cf0 \
\cf2 /* USER CODE BEGIN Includes */\cf0 \
\
\cf2 /* USER CODE END Includes */\cf0 \
\
\cf2 /* Private typedef -----------------------------------------------------------*/\cf0 \
\cf2 /* USER CODE BEGIN PTD */\cf0 \
\
\cf2 /* USER CODE END PTD */\cf0 \
\
\cf2 /* Private define ------------------------------------------------------------*/\cf0 \
\cf2 /* USER CODE BEGIN PD */\cf0 \

\f1\b \cf3 #define
\f0\b0 \cf0  SAMPLES 100 \cf2 // \ul \uc0\u1050 \u1086 \u1083 \u1080 \u1095 \u1077 \u1089 \u1090 \u1074 \u1086 \ulnone  \ul \uc0\u1090 \u1086 \u1095 \u1077 \u1082 \ulnone  \ul \uc0\u1085 \u1072 \ulnone  \ul \uc0\u1087 \u1077 \u1088 \u1080 \u1086 \u1076 \cf0 \ulnone \

\f1\b \cf3 #define
\f0\b0 \cf0  M_PI 3.14159265358979323846\

\f1\b \cf3 float
\f0\b0 \cf0  sine_wave[SAMPLES];\
\cf2 /* USER CODE END PD */\cf0 \
\
\cf2 /* Private macro -------------------------------------------------------------*/\cf0 \
\cf2 /* USER CODE BEGIN PM */\cf0 \
\
\cf2 /* USER CODE END PM */\cf0 \
\
\cf2 /* Private variables ---------------------------------------------------------*/\cf0 \
\cf5 DAC_HandleTypeDef\cf0  hdac;\
\
\cf5 TIM_HandleTypeDef\cf0  htim6;\
\
\cf5 UART_HandleTypeDef\cf0  huart2;\
\
\cf2 /* USER CODE BEGIN PV */\cf0 \
\
\cf2 /* USER CODE END PV */\cf0 \
\
\cf2 /* Private function prototypes -----------------------------------------------*/\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b SystemClock_Config
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 static
\f0\b0 \cf0  
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b MX_GPIO_Init
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 static
\f0\b0 \cf0  
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b MX_DAC_Init
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 static
\f0\b0 \cf0  
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b MX_TIM6_Init
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\

\f1\b \cf3 static
\f0\b0 \cf0  
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b MX_USART2_UART_Init
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 );\
\cf2 /* USER CODE BEGIN PFP */\cf0 \
\
\cf2 /* USER CODE END PFP */\cf0 \
\
\cf2 /* Private user code ---------------------------------------------------------*/\cf0 \
\cf2 /* USER CODE BEGIN 0 */\cf0 \
\
\cf2 /* USER CODE END 0 */\cf0 \
\
\cf2 /**\cf0 \
\cf2   * @brief  The application entry point.\cf0 \
\cf2   * @\ul retval\ulnone  \ul int\cf0 \ulnone \
\cf2   */\cf0 \

\f1\b \cf3 int
\f0\b0 \cf0  
\f1\b main
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\
\{\
\
  \cf2 /* USER CODE BEGIN 1 */\cf0 \
\
  \cf2 /* USER CODE END 1 */\cf0 \
\
  \cf2 /* MCU Configuration--------------------------------------------------------*/\cf0 \
\
  \cf2 /* Reset of all peripherals, Initializes the Flash interface and the \ul Systick\ulnone . */\cf0 \
  HAL_Init();\
\
  \cf2 /* USER CODE BEGIN \ul Init\ulnone  */\cf0 \
\
  \cf2 /* USER CODE END \ul Init\ulnone  */\cf0 \
\
  \cf2 /* Configure the system clock */\cf0 \
  SystemClock_Config();\
\
  \cf2 /* USER CODE BEGIN SysInit */\cf0 \
\
  \cf2 /* USER CODE END SysInit */\cf0 \
\
  \cf2 /* Initialize all configured peripherals */\cf0 \
  MX_GPIO_Init();\
  MX_DAC_Init();\
  MX_TIM6_Init();\
  MX_USART2_UART_Init();\
  \cf2 /* USER CODE BEGIN 2 */\cf0 \
  \cf2 // \ul \uc0\u1047 \u1072 \u1087 \u1091 \u1089 \u1082 \ulnone  \ul \uc0\u1090 \u1072 \u1081 \u1084 \u1077 \u1088 \u1072 \ulnone  \uc0\u1074  \ul \uc0\u1088 \u1077 \u1078 \u1080 \u1084 \u1077 \ulnone  \ul \uc0\u1087 \u1088 \u1077 \u1088 \u1099 \u1074 \u1072 \u1085 \u1080 \u1081 \cf0 \ulnone \
  HAL_TIM_Base_Start_IT(&htim6); \cf2 // \ul \uc0\u1059 \u1073 \u1077 \u1076 \u1080 \u1090 \u1077 \u1089 \u1100 \ulnone , \ul \uc0\u1095 \u1090 \u1086 \ulnone  \ul \uc0\u1080 \u1084 \u1103 \ulnone  htim6 \ul \uc0\u1089 \u1086 \u1086 \u1090 \u1074 \u1077 \u1090 \u1089 \u1090 \u1074 \u1091 \u1077 \u1090 \ulnone  \ul \uc0\u1074 \u1072 \u1096 \u1077 \u1084 \u1091 \ulnone  \ul \uc0\u1090 \u1072 \u1081 \u1084 \u1077 \u1088 \u1091 \cf0 \ulnone \
\
  \cf2 // \ul \uc0\u1047 \u1072 \u1087 \u1091 \u1089 \u1082 \ulnone  \uc0\u1062 \u1040 \u1055 \cf0 \
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1); \cf2 // \ul \uc0\u1059 \u1073 \u1077 \u1076 \u1080 \u1090 \u1077 \u1089 \u1100 \ulnone , \ul \uc0\u1095 \u1090 \u1086 \ulnone  \ul \uc0\u1080 \u1089 \u1087 \u1086 \u1083 \u1100 \u1079 \u1091 \u1077 \u1090 \u1077 \ulnone  \ul \uc0\u1087 \u1088 \u1072 \u1074 \u1080 \u1083 \u1100 \u1085 \u1099 \u1081 \ulnone  \ul \uc0\u1082 \u1072 \u1085 \u1072 \u1083 \cf0 \ulnone \
  
\f1\b \cf3 for
\f0\b0 \cf0 (
\f1\b \cf3 int
\f0\b0 \cf0  i = 0; i < SAMPLES; i++)\
  \{\
      sine_wave[i] = (
\f1\b \cf6 sinf
\f0\b0 \cf0 (2 * M_PI * i / SAMPLES) + 1) / 2; \cf2 // \ul \uc0\u1053 \u1086 \u1088 \u1084 \u1072 \u1083 \u1080 \u1079 \u1091 \u1077 \u1084 \ulnone  \ul \uc0\u1086 \u1090 \ulnone  0 \ul \uc0\u1076 \u1086 \ulnone  1\cf0 \
  \}\
  \cf2 /* USER CODE END 2 */\cf0 \
\
  \cf2 /* Infinite loop */\cf0 \
  \cf2 /* USER CODE BEGIN WHILE */\cf0 \
  
\f1\b \cf3 while
\f0\b0 \cf0  (1)\
  \{\
    \cf2 /* USER CODE END WHILE */\cf0 \
\
    \cf2 /* USER CODE BEGIN 3 */\cf0 \
  \}\
  \cf2 /* USER CODE END 3 */\cf0 \
\}\
\
\cf2 /**\cf0 \
\cf2   * @brief System Clock Configuration\cf0 \
\cf2   * @\ul retval\ulnone  None\cf0 \
\cf2   */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b SystemClock_Config
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\
\{\
  \cf5 RCC_OscInitTypeDef\cf0  RCC_OscInitStruct = \{0\};\
  \cf5 RCC_ClkInitTypeDef\cf0  RCC_ClkInitStruct = \{0\};\
\
  \cf2 /** Configure the main internal regulator output voltage\cf0 \
\cf2   */\cf0 \
  __HAL_RCC_PWR_CLK_ENABLE();\
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);\
\
  \cf2 /** Initializes the RCC Oscillators according to the specified parameters\cf0 \
\cf2   * in the RCC_OscInitTypeDef structure.\cf0 \
\cf2   */\cf0 \
  RCC_OscInitStruct.\cf7 OscillatorType\cf0  = RCC_OSCILLATORTYPE_HSI;\
  RCC_OscInitStruct.\cf7 HSIState\cf0  = RCC_HSI_ON;\
  RCC_OscInitStruct.\cf7 HSICalibrationValue\cf0  = RCC_HSICALIBRATION_DEFAULT;\
  RCC_OscInitStruct.\cf7 PLL\cf0 .\cf7 PLLState\cf0  = RCC_PLL_ON;\
  RCC_OscInitStruct.\cf7 PLL\cf0 .\cf7 PLLSource\cf0  = RCC_PLLSOURCE_HSI;\
  RCC_OscInitStruct.\cf7 PLL\cf0 .\cf7 PLLM\cf0  = 8;\
  RCC_OscInitStruct.\cf7 PLL\cf0 .\cf7 PLLN\cf0  = 160;\
  RCC_OscInitStruct.\cf7 PLL\cf0 .\cf7 PLLP\cf0  = RCC_PLLP_DIV2;\
  RCC_OscInitStruct.\cf7 PLL\cf0 .\cf7 PLLQ\cf0  = 2;\
  RCC_OscInitStruct.\cf7 PLL\cf0 .\cf7 PLLR\cf0  = 2;\
  
\f1\b \cf3 if
\f0\b0 \cf0  (HAL_RCC_OscConfig(&RCC_OscInitStruct) != 
\f2\i \cf7 HAL_OK
\f0\i0 \cf0 )\
  \{\
    Error_Handler();\
  \}\
\
  \cf2 /** Initializes the CPU, AHB and APB buses clocks\cf0 \
\cf2   */\cf0 \
  RCC_ClkInitStruct.\cf7 ClockType\cf0  = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\
  RCC_ClkInitStruct.\cf7 SYSCLKSource\cf0  = RCC_SYSCLKSOURCE_PLLCLK;\
  RCC_ClkInitStruct.\cf7 AHBCLKDivider\cf0  = RCC_SYSCLK_DIV1;\
  RCC_ClkInitStruct.\cf7 APB1CLKDivider\cf0  = RCC_HCLK_DIV4;\
  RCC_ClkInitStruct.\cf7 APB2CLKDivider\cf0  = RCC_HCLK_DIV2;\
\
  
\f1\b \cf3 if
\f0\b0 \cf0  (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != 
\f2\i \cf7 HAL_OK
\f0\i0 \cf0 )\
  \{\
    Error_Handler();\
  \}\
\}\
\
\cf2 /**\cf0 \
\cf2   * @brief DAC Initialization Function\cf0 \
\cf2   * @\ul param\ulnone  None\cf0 \
\cf2   * @\ul retval\ulnone  None\cf0 \
\cf2   */\cf0 \

\f1\b \cf3 static
\f0\b0 \cf0  
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b MX_DAC_Init
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\
\{\
\
  \cf2 /* USER CODE BEGIN DAC_Init 0 */\cf0 \
\
  \cf2 /* USER CODE END DAC_Init 0 */\cf0 \
\
  \cf5 DAC_ChannelConfTypeDef\cf0  sConfig = \{0\};\
\
  \cf2 /* USER CODE BEGIN DAC_Init 1 */\cf0 \
\
  \cf2 /* USER CODE END DAC_Init 1 */\cf0 \
\
  \cf2 /** DAC Initialization\cf0 \
\cf2   */\cf0 \
  hdac.\cf7 Instance\cf0  = DAC;\
  
\f1\b \cf3 if
\f0\b0 \cf0  (HAL_DAC_Init(&hdac) != 
\f2\i \cf7 HAL_OK
\f0\i0 \cf0 )\
  \{\
    Error_Handler();\
  \}\
\
  \cf2 /** DAC channel OUT1 \ul config\cf0 \ulnone \
\cf2   */\cf0 \
  sConfig.\cf7 DAC_Trigger\cf0  = DAC_TRIGGER_NONE;\
  sConfig.\cf7 DAC_OutputBuffer\cf0  = DAC_OUTPUTBUFFER_ENABLE;\
  
\f1\b \cf3 if
\f0\b0 \cf0  (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != 
\f2\i \cf7 HAL_OK
\f0\i0 \cf0 )\
  \{\
    Error_Handler();\
  \}\
  \cf2 /* USER CODE BEGIN DAC_Init 2 */\cf0 \
\
  \cf2 /* USER CODE END DAC_Init 2 */\cf0 \
\
\}\
\
\cf2 /**\cf0 \
\cf2   * @brief TIM6 Initialization Function\cf0 \
\cf2   * @\ul param\ulnone  None\cf0 \
\cf2   * @\ul retval\ulnone  None\cf0 \
\cf2   */\cf0 \

\f1\b \cf3 static
\f0\b0 \cf0  
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b MX_TIM6_Init
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\
\{\
\
  \cf2 /* USER CODE BEGIN TIM6_\ul Init\ulnone  0 */\cf0 \
\
  \cf2 /* USER CODE END TIM6_\ul Init\ulnone  0 */\cf0 \
\
  \cf5 TIM_MasterConfigTypeDef\cf0  sMasterConfig = \{0\};\
\
  \cf2 /* USER CODE BEGIN TIM6_\ul Init\ulnone  1 */\cf0 \
\
  \cf2 /* USER CODE END TIM6_\ul Init\ulnone  1 */\cf0 \
  htim6.\cf7 Instance\cf0  = TIM6;\
  htim6.\cf7 Init\cf0 .\cf7 Prescaler\cf0  = 0;\
  htim6.\cf7 Init\cf0 .\cf7 CounterMode\cf0  = TIM_COUNTERMODE_UP;\
  htim6.\cf7 Init\cf0 .\cf7 Period\cf0  = 65535;\
  htim6.\cf7 Init\cf0 .\cf7 AutoReloadPreload\cf0  = TIM_AUTORELOAD_PRELOAD_DISABLE;\
  
\f1\b \cf3 if
\f0\b0 \cf0  (HAL_TIM_Base_Init(&htim6) != 
\f2\i \cf7 HAL_OK
\f0\i0 \cf0 )\
  \{\
    Error_Handler();\
  \}\
  sMasterConfig.\cf7 MasterOutputTrigger\cf0  = TIM_TRGO_RESET;\
  sMasterConfig.\cf7 MasterSlaveMode\cf0  = TIM_MASTERSLAVEMODE_DISABLE;\
  
\f1\b \cf3 if
\f0\b0 \cf0  (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != 
\f2\i \cf7 HAL_OK
\f0\i0 \cf0 )\
  \{\
    Error_Handler();\
  \}\
  \cf2 /* USER CODE BEGIN TIM6_\ul Init\ulnone  2 */\cf0 \
\
  \cf2 /* USER CODE END TIM6_\ul Init\ulnone  2 */\cf0 \
\
\}\
\
\cf2 /**\cf0 \
\cf2   * @brief USART2 Initialization Function\cf0 \
\cf2   * @\ul param\ulnone  None\cf0 \
\cf2   * @\ul retval\ulnone  None\cf0 \
\cf2   */\cf0 \

\f1\b \cf3 static
\f0\b0 \cf0  
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b MX_USART2_UART_Init
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\
\{\
\
  \cf2 /* USER CODE BEGIN USART2_\ul Init\ulnone  0 */\cf0 \
\
  \cf2 /* USER CODE END USART2_\ul Init\ulnone  0 */\cf0 \
\
  \cf2 /* USER CODE BEGIN USART2_\ul Init\ulnone  1 */\cf0 \
\
  \cf2 /* USER CODE END USART2_\ul Init\ulnone  1 */\cf0 \
  huart2.\cf7 Instance\cf0  = USART2;\
  huart2.\cf7 Init\cf0 .\cf7 BaudRate\cf0  = 115200;\
  huart2.\cf7 Init\cf0 .\cf7 WordLength\cf0  = UART_WORDLENGTH_8B;\
  huart2.\cf7 Init\cf0 .\cf7 StopBits\cf0  = UART_STOPBITS_1;\
  huart2.\cf7 Init\cf0 .\cf7 Parity\cf0  = UART_PARITY_NONE;\
  huart2.\cf7 Init\cf0 .\cf7 Mode\cf0  = UART_MODE_TX_RX;\
  huart2.\cf7 Init\cf0 .\cf7 HwFlowCtl\cf0  = UART_HWCONTROL_NONE;\
  huart2.\cf7 Init\cf0 .\cf7 OverSampling\cf0  = UART_OVERSAMPLING_16;\
  
\f1\b \cf3 if
\f0\b0 \cf0  (HAL_UART_Init(&huart2) != 
\f2\i \cf7 HAL_OK
\f0\i0 \cf0 )\
  \{\
    Error_Handler();\
  \}\
  \cf2 /* USER CODE BEGIN USART2_\ul Init\ulnone  2 */\cf0 \
\
  \cf2 /* USER CODE END USART2_\ul Init\ulnone  2 */\cf0 \
\
\}\
\
\cf2 /**\cf0 \
\cf2   * @brief GPIO Initialization Function\cf0 \
\cf2   * @\ul param\ulnone  None\cf0 \
\cf2   * @\ul retval\ulnone  None\cf0 \
\cf2   */\cf0 \

\f1\b \cf3 static
\f0\b0 \cf0  
\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b MX_GPIO_Init
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\
\{\
\cf2 /* USER CODE BEGIN MX_GPIO_Init_1 */\cf0 \
\cf2 /* USER CODE END MX_GPIO_Init_1 */\cf0 \
\
  \cf2 /* GPIO Ports Clock Enable */\cf0 \
  __HAL_RCC_GPIOC_CLK_ENABLE();\
  __HAL_RCC_GPIOH_CLK_ENABLE();\
  __HAL_RCC_GPIOA_CLK_ENABLE();\
\
\cf2 /* USER CODE BEGIN MX_GPIO_Init_2 */\cf0 \
\cf2 /* USER CODE END MX_GPIO_Init_2 */\cf0 \
\}\
\
\cf2 /* USER CODE BEGIN 4 */\cf0 \

\f1\b \cf3 static
\f0\b0 \cf0  \cf5 uint32_t\cf0  sample_index = 0;\
\

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b HAL_TIM_PeriodElapsedCallback
\f0\b0 (\cf5 TIM_HandleTypeDef\cf0  *htim)\
\{\
    
\f1\b \cf3 if
\f0\b0 \cf0 (htim->\cf7 Instance\cf0  == TIM6)\
    \{\
        \cf2 // \ul \uc0\u1055 \u1088 \u1077 \u1086 \u1073 \u1088 \u1072 \u1079 \u1091 \u1077 \u1084 \ulnone  \ul \uc0\u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077 \ulnone  \ul \uc0\u1080 \u1079 \ulnone  \ul \uc0\u1084 \u1072 \u1089 \u1089 \u1080 \u1074 \u1072 \ulnone  \uc0\u1074  \ul \uc0\u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077 \ulnone  \ul \uc0\u1076 \u1083 \u1103 \ulnone  \uc0\u1062 \u1040 \u1055 \cf0 \
        \cf5 uint32_t\cf0  dac_value = (\cf5 uint32_t\cf0 )(sine_wave[sample_index] * 4095); \cf2 // \ul \uc0\u1055 \u1088 \u1080 \u1074 \u1086 \u1076 \u1080 \u1084 \ulnone  \uc0\u1082  \ul \uc0\u1076 \u1080 \u1072 \u1087 \u1072 \u1079 \u1086 \u1085 \u1091 \ulnone  0-4095\cf0 \
\
        \cf2 // \ul \uc0\u1059 \u1089 \u1090 \u1072 \u1085 \u1072 \u1074 \u1083 \u1080 \u1074 \u1072 \u1077 \u1084 \ulnone  \ul \uc0\u1079 \u1085 \u1072 \u1095 \u1077 \u1085 \u1080 \u1077 \ulnone  \ul \uc0\u1085 \u1072 \ulnone  \uc0\u1062 \u1040 \u1055 \cf0 \
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);\
\
        \cf2 // \ul \uc0\u1059 \u1074 \u1077 \u1083 \u1080 \u1095 \u1080 \u1074 \u1072 \u1077 \u1084 \ulnone  \ul \uc0\u1080 \u1085 \u1076 \u1077 \u1082 \u1089 \ulnone  \uc0\u1080  \ul \uc0\u1087 \u1088 \u1086 \u1074 \u1077 \u1088 \u1103 \u1077 \u1084 \ulnone  \ul \uc0\u1085 \u1072 \ulnone  \ul \uc0\u1087 \u1077 \u1088 \u1077 \u1087 \u1086 \u1083 \u1085 \u1077 \u1085 \u1080 \u1077 \cf0 \ulnone \
        sample_index++;\
        
\f1\b \cf3 if
\f0\b0 \cf0 (sample_index >= SAMPLES)\
        \{\
            sample_index = 0;\
        \}\
    \}\
\}\
\cf2 /* USER CODE END 4 */\cf0 \
\
\cf2 /**\cf0 \
\cf2   * @brief  This function is executed in case of error occurrence.\cf0 \
\cf2   * @\ul retval\ulnone  None\cf0 \
\cf2   */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  
\f1\b Error_Handler
\f0\b0 (
\f1\b \cf3 void
\f0\b0 \cf0 )\
\{\
  \cf2 /* USER CODE BEGIN Error_Handler_Debug */\cf0 \
  \cf2 /* User can add his own implementation to report the HAL error return state */\cf0 \
  __disable_irq();\
  
\f1\b \cf3 while
\f0\b0 \cf0  (1)\
  \{\
  \}\
  \cf2 /* USER CODE END Error_Handler_Debug */\cf0 \
\}\
\

\f1\b \cf3 #ifdef
\f0\b0 \cf0   USE_FULL_ASSERT\
\cf2 /**\cf0 \
\cf2   * @brief  Reports the name of the source file and the source line number\cf0 \
\cf2   *         where the assert_param error has occurred.\cf0 \
\cf2   * @\ul param\ulnone   file: pointer to the source file name\cf0 \
\cf2   * @\ul param\ulnone   line: assert_param error line source number\cf0 \
\cf2   * @\ul retval\ulnone  None\cf0 \
\cf2   */\cf0 \

\f1\b \cf3 void
\f0\b0 \cf0  assert_failed(uint8_t *file, uint32_t line)\
\{\
  \cf2 /* USER CODE BEGIN 6 */\cf0 \
  \cf2 /* User can add his own implementation to report the file name and line number,\cf0 \
\cf2      \ul ex\ulnone : \ul printf\ulnone ("Wrong parameters value: file %s on line %d\\r\\n", file, line) */\cf0 \
  \cf2 /* USER CODE END 6 */\cf0 \
\}\

\f1\b \cf3 #endif
\f0\b0 \cf0  \cf2 /* USE_FULL_ASSERT */\cf0 \
}